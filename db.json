<<<<<<< HEAD
{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/hexo-theme-fluid-master/source/css/gitalk.css","path":"css/gitalk.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/css/highlight-dark.styl","path":"css/highlight-dark.styl","modified":1,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/css/highlight.styl","path":"css/highlight.styl","modified":1,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/default.png","path":"img/default.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/default03.jpg","path":"img/default03.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/default01.jpg","path":"img/default01.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/default3.jpeg","path":"img/default3.jpeg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/fluid.png","path":"img/fluid.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/fluid01.ico","path":"img/fluid01.ico","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/loading.gif","path":"img/loading.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/fluid02.jpg","path":"img/fluid02.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/police_beian.png","path":"img/police_beian.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/tx01.jpg","path":"img/tx01.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/js/boot.js","path":"js/boot.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/js/leancloud.js","path":"js/leancloud.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/js/img-lazyload.js","path":"js/img-lazyload.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/js/color-schema.js","path":"js/color-schema.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/js/local-search.js","path":"js/local-search.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/js/events.js","path":"js/events.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/js/plugins.js","path":"js/plugins.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/xml/local-search.xml","path":"xml/local-search.xml","modified":1,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"source/image/Tab栏切换html部分.png","path":"image/Tab栏切换html部分.png","modified":0,"renderable":0},{"_id":"source/image/Tab栏切换js部分.png","path":"image/Tab栏切换js部分.png","modified":0,"renderable":0},{"_id":"source/image/全选 全不选 反选-1.15.png","path":"image/全选 全不选 反选-1.15.png","modified":0,"renderable":0},{"_id":"source/image/商品查询案例.png","path":"image/商品查询案例.png","modified":0,"renderable":0},{"_id":"source/image/敏感词过滤-1.17.png","path":"image/敏感词过滤-1.17.png","modified":0,"renderable":0},{"_id":"source/image/Tab选项卡-1.15.png","path":"image/Tab选项卡-1.15.png","modified":0,"renderable":0},{"_id":"source/image/点击页面.png","path":"image/点击页面.png","modified":0,"renderable":0},{"_id":"source/image/电影票选座-1.20.png","path":"image/电影票选座-1.20.png","modified":0,"renderable":0},{"_id":"source/image/百度搜索框数据展示-1.11.png","path":"image/百度搜索框数据展示-1.11.png","modified":0,"renderable":0},{"_id":"source/image/移动盒子-1.29.png","path":"image/移动盒子-1.29.png","modified":0,"renderable":0},{"_id":"source/image/跳转页面.png","path":"image/跳转页面.png","modified":0,"renderable":0},{"_id":"source/image/相册选择-1.1.png","path":"image/相册选择-1.1.png","modified":0,"renderable":0},{"_id":"source/image/进度条功能-1.18.png","path":"image/进度条功能-1.18.png","modified":0,"renderable":0},{"_id":"source/image/返回首屏功能-1.20.png","path":"image/返回首屏功能-1.20.png","modified":0,"renderable":0},{"_id":"source/image/验证码生成及校验-1.2.png","path":"image/验证码生成及校验-1.2.png","modified":0,"renderable":0},{"_id":"themes/hexo-theme-fluid-master/source/img/fluid03.png","path":"img/fluid03.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/fluid04.png","path":"img/fluid04.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/fluid05.png","path":"img/fluid05.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/wx.jpg","path":"img/wx.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/tx.jpg","path":"img/tx.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/gd.png","path":"img/gd.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/gd2.png","path":"img/gd2.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/bitbug_favicon(1).ico","path":"img/bitbug_favicon(1).ico","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/zw.png","path":"img/zw.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/10002.jpg","path":"img/10002.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/10003.jpg","path":"img/10003.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/10001.jpg","path":"img/10001.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/dn.jpg","path":"img/dn.jpg","modified":0,"renderable":1},{"_id":"source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":0},{"_id":"source/img/10001.jpg","path":"img/10001.jpg","modified":0,"renderable":0},{"_id":"source/img/10002.jpg","path":"img/10002.jpg","modified":0,"renderable":0},{"_id":"source/img/10003.jpg","path":"img/10003.jpg","modified":0,"renderable":0},{"_id":"source/img/default03.jpg","path":"img/default03.jpg","modified":0,"renderable":0},{"_id":"source/img/default01.jpg","path":"img/default01.jpg","modified":0,"renderable":0},{"_id":"source/img/default3.jpeg","path":"img/default3.jpeg","modified":0,"renderable":0},{"_id":"source/img/fluid02.jpg","path":"img/fluid02.jpg","modified":0,"renderable":0},{"_id":"source/img/dn.jpg","path":"img/dn.jpg","modified":0,"renderable":0},{"_id":"source/img/fluid03.png","path":"img/fluid03.png","modified":0,"renderable":0},{"_id":"source/img/jl.png","path":"img/jl.png","modified":0,"renderable":0},{"_id":"source/img/zw.png","path":"img/zw.png","modified":0,"renderable":0},{"_id":"themes/hexo-theme-fluid-master/source/img/index.jpg","path":"img/index.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/wallhaven-1ppyk9_2560x1080.png","path":"img/wallhaven-1ppyk9_2560x1080.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/liul.png","path":"img/liul.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/beij.png","path":"img/beij.png","modified":0,"renderable":1},{"_id":"source/img/dy.jpg","path":"img/dy.jpg","modified":0,"renderable":0},{"_id":"source/img/10007.jpg","path":"img/10007.jpg","modified":0,"renderable":0},{"_id":"source/img/10004.jpg","path":"img/10004.jpg","modified":0,"renderable":0},{"_id":"source/img/10005.jpg","path":"img/10005.jpg","modified":0,"renderable":0},{"_id":"source/img/10006.jpg","path":"img/10006.jpg","modified":0,"renderable":0},{"_id":"source/img/dn3.jpg","path":"img/dn3.jpg","modified":0,"renderable":0},{"_id":"source/img/dn1.jpg","path":"img/dn1.jpg","modified":0,"renderable":0},{"_id":"source/img/dn2.jpg","path":"img/dn2.jpg","modified":0,"renderable":0},{"_id":"source/img/10008.jpg","path":"img/10008.jpg","modified":0,"renderable":0},{"_id":"source/img/10009.jpg","path":"img/10009.jpg","modified":0,"renderable":0},{"_id":"source/img/10010.jpg","path":"img/10010.jpg","modified":0,"renderable":0},{"_id":"source/img/sm.png","path":"img/sm.png","modified":0,"renderable":0},{"_id":"source/img/mao1.jpg","path":"img/mao1.jpg","modified":0,"renderable":0},{"_id":"source/img/mao2.jpg","path":"img/mao2.jpg","modified":0,"renderable":0},{"_id":"source/img/fluid.png","path":"img/fluid.png","modified":0,"renderable":0},{"_id":"source/img/bt.png","path":"img/bt.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/about/index.md","hash":"6bca4196e364e6b19757f920bb05e8a216754b39","modified":1676890782898},{"_id":"source/_posts/Hexo主题更换.md","hash":"aba52e4d89b98da159030f3de37ec0627c9d8a81","modified":1676890782893},{"_id":"source/_posts/hello-hexo.md","hash":"ee4c6f0f2687ed32a569c0c11433d4bc4836c83b","modified":1661457989032},{"_id":"source/_posts/使用node创建博客.md","hash":"9c21a4f4237fbafee7c1dbde00a60afb6bc82ec4","modified":1676890782896},{"_id":"source/_posts/htttp协议.md","hash":"a0f61397b5fd10c873e707e57e451fabc37da289","modified":1676890782895},{"_id":"source/categories/index.md","hash":"7ce64d10804ee9f8d0310cfe36bc475828173e92","modified":1676890782898},{"_id":"source/tags/index.md","hash":"9c68e78171033a5214585fd605818db39d757eee","modified":1676890782961},{"_id":"source/link/index.md","hash":"591c8008d1dad48fb3289863b8473e98a845bf61","modified":1676890782961},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_tag/tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1660531045000},{"_id":"themes/hexo-theme-fluid-master/.editorconfig","hash":"b595159772f3ee1ef5e6780ce307270e741cb309","modified":1676890782963},{"_id":"themes/hexo-theme-fluid-master/.eslintrc","hash":"3df89453e1f63051fafc90f16a8d83951050e316","modified":1676890782963},{"_id":"themes/hexo-theme-fluid-master/.gitattributes","hash":"3e00e1fb043438cd820d94ee3dc9ffb6718996f3","modified":1676890782963},{"_id":"themes/hexo-theme-fluid-master/LICENSE","hash":"511e49f0bd8282a0d002c527474da8e1e5add393","modified":1676890782967},{"_id":"themes/hexo-theme-fluid-master/.gitignore","hash":"9ede98b8d9dca802f82f651afb3b0366d69f05f1","modified":1676890782966},{"_id":"themes/hexo-theme-fluid-master/_config.yml","hash":"23ed08ba3ea7f19679f7a2a3587eae06248e150a","modified":1676914145259},{"_id":"themes/hexo-theme-fluid-master/README.md","hash":"2ec6a89d66f8e41fded68aa8ec3b3363a20ea48c","modified":1676890782967},{"_id":"themes/hexo-theme-fluid-master/README_en.md","hash":"10ff41f4b3cf24ad0fece6555b77f61694916133","modified":1676890782968},{"_id":"themes/hexo-theme-fluid-master/package.json","hash":"1c05cec69cd3cf349b268f027a6916a9187601e0","modified":1676890782990},{"_id":"themes/hexo-theme-fluid-master/languages/de.yml","hash":"c52ce73a291fa50953edbd11c1dfb1cc7cab52c2","modified":1676890782969},{"_id":"themes/hexo-theme-fluid-master/languages/en.yml","hash":"2839da328f197cf90cafdf2b538fcd027ab6cfba","modified":1676890782969},{"_id":"themes/hexo-theme-fluid-master/languages/eo.yml","hash":"76d2920b49c8d2489c37514489545d0fc4eac834","modified":1676890782970},{"_id":"themes/hexo-theme-fluid-master/languages/es.yml","hash":"7fcd16cd363f1a166a3270c23c0660eff7475744","modified":1676890782970},{"_id":"themes/hexo-theme-fluid-master/languages/ja.yml","hash":"411aa49e2e8dea90a6d8cc2dc92f264609ea273b","modified":1676890782970},{"_id":"themes/hexo-theme-fluid-master/languages/zh-CN.yml","hash":"b05d1a43516dc6886d65631d90d6995acae673db","modified":1676890782971},{"_id":"themes/hexo-theme-fluid-master/languages/zh-HK.yml","hash":"676b3ee8a16d796b4a898a9e5be2f52c372055ed","modified":1676890782971},{"_id":"themes/hexo-theme-fluid-master/languages/zh-TW.yml","hash":"aac765cccef9f9044c4a88941fd01ba1883178fc","modified":1676890782971},{"_id":"themes/hexo-theme-fluid-master/layout/404.ejs","hash":"0a589faccde6c2c9572e8d3d359e7c8fb166335e","modified":1676890782972},{"_id":"themes/hexo-theme-fluid-master/layout/archive.ejs","hash":"c524ce76747042ec2f9ed8d5025f80e01b462b3b","modified":1676890782987},{"_id":"themes/hexo-theme-fluid-master/layout/about.ejs","hash":"bd3ede2a5f45c5256cf8f883bb8fcca645834869","modified":1676890782986},{"_id":"themes/hexo-theme-fluid-master/layout/categories.ejs","hash":"838a68e210bddfca6d4ba070e1e2f1ca53cb7d06","modified":1676890782987},{"_id":"themes/hexo-theme-fluid-master/layout/layout.ejs","hash":"d4ffeb7eff398dea154340794bd277f75ddeedef","modified":1676890782988},{"_id":"themes/hexo-theme-fluid-master/layout/links.ejs","hash":"fbed4b3d1e475b3de9d8ce05362abcc658a53408","modified":1676890782988},{"_id":"themes/hexo-theme-fluid-master/layout/category.ejs","hash":"264f68cbf826787e683a30e1377c56c0895c7386","modified":1676890782987},{"_id":"themes/hexo-theme-fluid-master/layout/index.ejs","hash":"33ee985aaf03c8839d8f48e38113e851705cb2db","modified":1676890782988},{"_id":"themes/hexo-theme-fluid-master/layout/post.ejs","hash":"5a712dded014ff5a5ffea79fb0e30b429ae715c7","modified":1676890782989},{"_id":"themes/hexo-theme-fluid-master/layout/page.ejs","hash":"8ba210724c023d45a4564415762f3da299bd1d0e","modified":1676890782989},{"_id":"themes/hexo-theme-fluid-master/layout/tag.ejs","hash":"e87fc58829ea214ac16e8e4f13cd5c389133697b","modified":1676890782989},{"_id":"themes/hexo-theme-fluid-master/layout/tags.ejs","hash":"b7c1a6d8fc1097fc16d2300260297013cb692153","modified":1676890782990},{"_id":"themes/hexo-theme-fluid-master/.github/ISSUE_TEMPLATE/bug_report.md","hash":"7d7c1e5a1da6b4f7be6685beb4798ec76d5efd31","modified":1676890782964},{"_id":"themes/hexo-theme-fluid-master/.github/ISSUE_TEMPLATE/bug_report_zh.md","hash":"fea63a9a5c3befd8783705eed09adf1b596a6203","modified":1676890782964},{"_id":"themes/hexo-theme-fluid-master/.github/ISSUE_TEMPLATE/feature_request_zh.md","hash":"7db378613df2b7d13e8c428c006399a879a4a852","modified":1676890782965},{"_id":"themes/hexo-theme-fluid-master/.github/ISSUE_TEMPLATE/feature_request.md","hash":"5cc30e7b6e7b77c8b40b182ba02a5d93d37d2fc2","modified":1676890782965},{"_id":"themes/hexo-theme-fluid-master/.github/ISSUE_TEMPLATE/question_zh.md","hash":"07e24578c25fcaca94618fd86569887dadf7a276","modified":1676890782965},{"_id":"themes/hexo-theme-fluid-master/.github/ISSUE_TEMPLATE/question.md","hash":"102213e5d6790d060c0e26b4a3a7ec744d753c52","modified":1676890782965},{"_id":"themes/hexo-theme-fluid-master/.github/workflows/limit.yaml","hash":"bdbdb66da69ab7353b546f02150a6792f4787975","modified":1676890782966},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/archive-list.ejs","hash":"78c34e32746041f23678669bbadfbede15e4c6d2","modified":1676890782972},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/category-list.ejs","hash":"bd763ffc145a1f0b2c4a5dc8a101f0bc94b3f2f7","modified":1676890782972},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/category-chains.ejs","hash":"508254a648d8597e62e4012c8beab44bfa82e904","modified":1676890782972},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/comments.ejs","hash":"bfea4674af78eb72b3a6baaa7ec9fc3c3db55ebd","modified":1676890782973},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/css.ejs","hash":"70646e7f7a7684e12b298cd8a36fbea2814c3635","modified":1676890782977},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/head.ejs","hash":"3ca4c60a38b6b895986b15128a668266b1b12009","modified":1676890782978},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/footer.ejs","hash":"52b8954ae0eff5eb66a3841b37f144336b8f0866","modified":1676890782977},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/header.ejs","hash":"3668304d08c48b68d532532921a12069a2736150","modified":1676890782979},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/markdown-plugins.ejs","hash":"b5cd435b27f090939b6051bef41a38a3376044ac","modified":1676890782980},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/paginator.ejs","hash":"0d443f23c459787338917900f50fec1c8b3b3bdd","modified":1676890782980},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/scripts.ejs","hash":"89fc9f663a1091911b79ab9697c09446d16184f9","modified":1676890782986},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/search.ejs","hash":"57a0f61242d9ce2bd2c51b2f84193f6dc1377ef9","modified":1676890782986},{"_id":"themes/hexo-theme-fluid-master/scripts/events/index.js","hash":"6c3b24207e4ea3ae4edeb715af40ef23711b92b9","modified":1676890782990},{"_id":"themes/hexo-theme-fluid-master/scripts/generators/local-search.js","hash":"bda7fbe58082a2a02c0db066794b791b14462271","modified":1676890782994},{"_id":"themes/hexo-theme-fluid-master/scripts/generators/pages.js","hash":"a2a15ea722863aba09dcad578558432682a3b6b3","modified":1676890782994},{"_id":"themes/hexo-theme-fluid-master/scripts/filters/default-injects.js","hash":"3d30c722b9e24c33577d6fab822628841fadf992","modified":1676890782993},{"_id":"themes/hexo-theme-fluid-master/scripts/filters/locals.js","hash":"2340a576635b16fd2456b3494f5afe89cd7764db","modified":1676890782994},{"_id":"themes/hexo-theme-fluid-master/scripts/filters/post-filter.js","hash":"1c9156e12030fa2219a933edde460ec563836047","modified":1676890782994},{"_id":"themes/hexo-theme-fluid-master/scripts/utils/compare-versions.js","hash":"37f90bd4e35ce49457dc2a348b9f66e0b242c014","modified":1676890782999},{"_id":"themes/hexo-theme-fluid-master/scripts/utils/object.js","hash":"3e03b534e2e92a6e17567b006d7e3eaad4b37598","modified":1676890783000},{"_id":"themes/hexo-theme-fluid-master/scripts/utils/resolve.js","hash":"a5d70005913ab03cea0a0dc601097628b4dbd5a8","modified":1676890783000},{"_id":"themes/hexo-theme-fluid-master/scripts/utils/url-join.js","hash":"dbdb10b23fcd3928e86a4cb46fa3455e060b4aa0","modified":1676890783000},{"_id":"themes/hexo-theme-fluid-master/scripts/tags/button.js","hash":"e1d0caed12e7cd9a35cf64272c41854b2901a58f","modified":1676890782997},{"_id":"themes/hexo-theme-fluid-master/scripts/tags/checkbox.js","hash":"aa03d0b914d87b9194ee3a0612ab5827a8dedbdd","modified":1676890782998},{"_id":"themes/hexo-theme-fluid-master/scripts/tags/group-image.js","hash":"cc176cc1d7e7cc28cedf8397ae748c691d140be2","modified":1676890782998},{"_id":"themes/hexo-theme-fluid-master/scripts/tags/label.js","hash":"6c5916d86c63795c7e910bf614b0e7ece5073702","modified":1676890782999},{"_id":"themes/hexo-theme-fluid-master/scripts/tags/mermaid.js","hash":"dbfe59fde77d87b1d7d0c46480a2a729010988eb","modified":1676890782999},{"_id":"themes/hexo-theme-fluid-master/scripts/tags/note.js","hash":"8020acc2c4bb3a2054e3cb349fac7cd10b79a0be","modified":1676890782999},{"_id":"themes/hexo-theme-fluid-master/scripts/helpers/date.js","hash":"9bc9ba08d1d871394ee1c3a1cc2f21dc343f515a","modified":1676890782995},{"_id":"themes/hexo-theme-fluid-master/scripts/helpers/engine.js","hash":"96af7e55fdbe0819bacc554ecbfe42375a088df6","modified":1676890782995},{"_id":"themes/hexo-theme-fluid-master/scripts/helpers/export-config.js","hash":"00a41768fe258bb8f3323bf4bb0b862d6e2d97c0","modified":1676890782995},{"_id":"themes/hexo-theme-fluid-master/scripts/helpers/page.js","hash":"49b2c6449d7be35739c6cfea3cab4e790580983a","modified":1676890782996},{"_id":"themes/hexo-theme-fluid-master/scripts/helpers/scope.js","hash":"a93b87835bfa491fa2aa90f97f25281e3a4ffed9","modified":1676890782996},{"_id":"themes/hexo-theme-fluid-master/scripts/helpers/import.js","hash":"f9821f7789ea6f069977a8c642aa5ccb6d19077c","modified":1676890782996},{"_id":"themes/hexo-theme-fluid-master/scripts/helpers/injects.js","hash":"9219d59c51930c7a82fcde918d6efbc5aa572ea2","modified":1676890782996},{"_id":"themes/hexo-theme-fluid-master/scripts/helpers/url.js","hash":"f713ddb6c8018ec7b96d3567057f1f932609beea","modified":1676890782996},{"_id":"themes/hexo-theme-fluid-master/scripts/helpers/utils.js","hash":"d7ff7cf5e721dfeafe0c2a77a5929b2c3f8fee2a","modified":1676890782997},{"_id":"themes/hexo-theme-fluid-master/scripts/helpers/wordcount.js","hash":"9c01393f446c490c56b6b0d482aaa8d97cc8b717","modified":1676890782997},{"_id":"themes/hexo-theme-fluid-master/source/css/gitalk.css","hash":"1fe60b2ab1d704f5a4f55e700dca5b8785fb390e","modified":1676890783013},{"_id":"themes/hexo-theme-fluid-master/source/css/highlight-dark.styl","hash":"c74d7aed425d20f2fa096f386a9521b67b9ab269","modified":1676890783014},{"_id":"themes/hexo-theme-fluid-master/source/css/highlight.styl","hash":"57ce8b8f95ab1f40612a9dce1793de5ab9b4bbfc","modified":1676890783014},{"_id":"themes/hexo-theme-fluid-master/source/css/main.styl","hash":"9e9171325bb7148c11ceee283d00c137c8a1c5c5","modified":1676890783014},{"_id":"themes/hexo-theme-fluid-master/source/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1660531045000},{"_id":"themes/hexo-theme-fluid-master/source/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1660531045000},{"_id":"themes/hexo-theme-fluid-master/source/img/fluid01.ico","hash":"38bcaf31991e070f66463ec42796b1f5d518c10c","modified":1661462047737},{"_id":"themes/hexo-theme-fluid-master/source/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1660531045000},{"_id":"themes/hexo-theme-fluid-master/source/img/fluid02.jpg","hash":"d1d45220db821066a37503a959a6da61100c9a54","modified":1661462008599},{"_id":"themes/hexo-theme-fluid-master/source/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1660531045000},{"_id":"themes/hexo-theme-fluid-master/source/js/boot.js","hash":"3f92a93cb12e01f5ce54bc941fa6626b3ee2571a","modified":1676890783128},{"_id":"themes/hexo-theme-fluid-master/source/js/leancloud.js","hash":"e9ad1b5659f0af867174687daa0ecf4375e40b75","modified":1676890783129},{"_id":"themes/hexo-theme-fluid-master/source/js/img-lazyload.js","hash":"67f6250f98b36a6599ea982d11cbb060c5ffb92a","modified":1676890783129},{"_id":"themes/hexo-theme-fluid-master/source/js/color-schema.js","hash":"31d35fe044ad01dda7975d47c99d636eaa81bfc8","modified":1676890783128},{"_id":"themes/hexo-theme-fluid-master/source/js/local-search.js","hash":"1ab61ed47ec88c876e447872342fed9be560b0f0","modified":1676890783129},{"_id":"themes/hexo-theme-fluid-master/source/js/events.js","hash":"7d70feed0a19e3d9f5886416ae99a72e21e2f10c","modified":1676890783128},{"_id":"themes/hexo-theme-fluid-master/source/js/plugins.js","hash":"5f33939016d0a7bb72d4376af46ebb28fbf85c04","modified":1676890783130},{"_id":"themes/hexo-theme-fluid-master/source/xml/local-search.xml","hash":"85fcc23b4db654a7f91fc55b6fb0442bb3ed3a9a","modified":1676890783130},{"_id":"themes/hexo-theme-fluid-master/source/js/utils.js","hash":"61e8108fe16fbf19ce13ea89b3120c1191bb4665","modified":1676890783130},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/comments/cusdis.ejs","hash":"1e93ca89777e4beb0f0e5cb70e03aab48e958542","modified":1676890782974},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/comments/changyan.ejs","hash":"0c410ef79785897c8de3da333b057a2936fd569b","modified":1676890782973},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/comments/disqus.ejs","hash":"79ec17eec6e15076c685688e740230e92c66efa9","modified":1676890782974},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/comments/giscus.ejs","hash":"66995ec9dab10ed35c2a775010c447113c6848d4","modified":1676890782974},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/comments/gitalk.ejs","hash":"7f04e5c22821bb94da791973d9c6692b03bac81d","modified":1676890782974},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/comments/livere.ejs","hash":"bcceafab01fe695c59951d939f7cef502f3d7b48","modified":1676890782975},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/comments/utterances.ejs","hash":"d7bcc183fc31af643e7835b13da10fe2ab8614ce","modified":1676890782976},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/comments/twikoo.ejs","hash":"1568d377cd1d214be50a6560197c185ead0f7740","modified":1676890782975},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/comments/remark42.ejs","hash":"45c879768b40ba56af62e18ad54bffbf73a6f3a1","modified":1676890782975},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/comments/waline.ejs","hash":"99fe072ec17e83332325b3c59464bd39ea1f5a96","modified":1676890782977},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/comments/valine.ejs","hash":"ef04d4fc3f26588ae9d8712938d648304fc05455","modified":1676890782976},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/footer/beian.ejs","hash":"77d0c9df31a22ed8a3e341637bde4165a11a7ce9","modified":1676890782978},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/footer/statistics.ejs","hash":"ed2348bd9f56d19836b508c52ce9cc9122471f51","modified":1676890782978},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/header/banner.ejs","hash":"a84d8dcb44f5f6289ef09db4d02ab14de72c2c87","modified":1676890782979},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/header/navigation.ejs","hash":"1560b1ca7f1f40fe1e18047ab68a3576f6613619","modified":1676890782979},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/plugins/analytics.ejs","hash":"ea10caef2e655200e275b70d40d464e34123d10b","modified":1676890782980},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/plugins/anchorjs.ejs","hash":"3b31e068f394c3f63a98843711e64ac4af463fef","modified":1676890782980},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/plugins/code-widget.ejs","hash":"03c7c69fbb1754fdccfa18671aac23b8637b869e","modified":1676890782981},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/plugins/fancybox.ejs","hash":"3900e54ade140e0e49c571a1955f0b1f3a59b281","modified":1676890782981},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/plugins/encrypt.ejs","hash":"76a224723775388d3fbb0433b32dfb5dcbc75a4c","modified":1676890782981},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/plugins/highlight.ejs","hash":"502b99e19e496825df7032ca2b0b1a95ebb2b357","modified":1676890782982},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/plugins/math.ejs","hash":"887292388acb8e90c1a7a415a82d128d881f8c9d","modified":1676890782982},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/plugins/mermaid.ejs","hash":"fedcfb5de65c0828f6925d60a758e0c79a45396f","modified":1676890782982},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/plugins/nprogress.ejs","hash":"47c1df255aa552ad71ef3e57deca46530a8f2802","modified":1676890782982},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/plugins/typed.ejs","hash":"7bf29bd9faf12030e19993576299936a999c0e46","modified":1676890782983},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/post/category-bar.ejs","hash":"eac44cfb6b0843304b2da35b32b0fa24afd9d7f9","modified":1676890782983},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/post/copyright.ejs","hash":"77cda31b5434b75ff7ac600f60a97918bc389616","modified":1676890782983},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/post/meta-bottom.ejs","hash":"f9c0f25eee37cc6e72a5fbefb2cd7284a9fd16d7","modified":1676890782984},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/post/meta-top.ejs","hash":"cef058fd6f33651118b5bdaa3c814757f5c82154","modified":1676890782984},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/post/sidebar-left.ejs","hash":"db4ecdcc762bb1b1bae5060f0baa6115174779ff","modified":1676890782984},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/post/sidebar-right.ejs","hash":"2507cdad08f61cf8c1d9b0ca7f4f1dc8c4e5841b","modified":1676890782985},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/post/toc.ejs","hash":"ac544baecc05df96c6558d42b57af219e1d59e52","modified":1676890782985},{"_id":"themes/hexo-theme-fluid-master/scripts/events/lib/compatible-configs.js","hash":"31208a0db986ba864f756a8ec806b7d254440f9b","modified":1676890782991},{"_id":"themes/hexo-theme-fluid-master/scripts/events/lib/footnote.js","hash":"235dc1c2f7086dcdb9a2091cd219ef2a37aebfa4","modified":1676890782991},{"_id":"themes/hexo-theme-fluid-master/scripts/events/lib/hello.js","hash":"c9efdd41b8606969e5b55f49a2f6df596641b995","modified":1676890782991},{"_id":"themes/hexo-theme-fluid-master/scripts/events/lib/highlight.js","hash":"3f06fd3a865a703eed67aac30692d2c4b348d3a6","modified":1676890782991},{"_id":"themes/hexo-theme-fluid-master/scripts/events/lib/injects.js","hash":"92123b7280695b4ac6650f5e1d7fa0d772c71f5b","modified":1676890782991},{"_id":"themes/hexo-theme-fluid-master/scripts/events/lib/lazyload.js","hash":"c9696633f77dd8055e900497469f9e64eca4d97f","modified":1676890782992},{"_id":"themes/hexo-theme-fluid-master/scripts/events/lib/merge-configs.js","hash":"ec6bf395ccad3dd41f29dc0080aeabf413e30fd9","modified":1676890782992},{"_id":"themes/hexo-theme-fluid-master/source/css/_functions/base.styl","hash":"171697018fd384fce0834875ca94b91f16564cac","modified":1676890783001},{"_id":"themes/hexo-theme-fluid-master/source/css/_mixins/base.styl","hash":"046979dbd8cdabd21d89f9c1d8f1bb3f2fd06d6f","modified":1676890783001},{"_id":"themes/hexo-theme-fluid-master/source/css/_variables/base.styl","hash":"9ea66cf79f1e4356b6b402bc3dc5fb55c9862f1f","modified":1676890783013},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/pages.styl","hash":"92c062cf55457b6549497244d09ec34e9c0c95c2","modified":1676890783013},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_about/about.styl","hash":"8ba5fb6a8ced1de6f7893184bf12f4021fe22595","modified":1676890783002},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_category/category-bar.styl","hash":"7f95c49025a347605c726b0874fe074d888e1cc2","modified":1676890783009},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_archive/archive.styl","hash":"e3846fb429f6732bd15fde40f7c28b3492d786c8","modified":1676890783002},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_category/category-chain.styl","hash":"4263f7b930e6b57e13295d17fd3745a9e5c52494","modified":1676890783009},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_category/category-list.styl","hash":"d3aeb7bf22d52d7dde59b292090ef8b46943718a","modified":1676890783009},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_base/base.styl","hash":"cd255079553985722ee80fb1833f6507dde52194","modified":1676890783008},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_base/color-schema.styl","hash":"577f3289d7f3851d4eeb867db3d92f1313a431da","modified":1676890783008},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_base/inline.styl","hash":"96c3bb95dea4b3d3ecd20b810a674bfcef04870c","modified":1676890783008},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_base/keyframes.styl","hash":"58a7f8f2baea2d58cf5f7edfc91314ee5d7156ca","modified":1676890783008},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_index/index.styl","hash":"7d50d2ae4b8b736a764fcce21ec456fa6b72518c","modified":1676890783010},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_post/comment.styl","hash":"1fc96d09d52d9502e84e4e2a8d482ea45e8b81ea","modified":1676890783011},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_post/highlight.styl","hash":"4bd2449fb8a3620229f0862a3b499faf1eedf2fd","modified":1676890783011},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_post/markdown.styl","hash":"2d12f23b46d0ce07ae810bc4f5635c490a098fa4","modified":1676890783011},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_post/post-page.styl","hash":"2e44047b9fecf662696b9cfce5c77ac3376cda85","modified":1676890783012},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_post/post-tag.styl","hash":"e8fe053ef8734e54fae12e46acd0087bcd67f8a2","modified":1676890783012},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_tag/tags.styl","hash":"29e9b72cfda2f2baf9cf2597fcd7f9e66303a9bd","modified":1676890783012},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_links/links.styl","hash":"d3ef491fd449d89a1b95801dee788a5d9bec4320","modified":1676890783010},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_base/_widget/anchorjs.styl","hash":"26d65475b1c52a61115044db8883df6739c3a473","modified":1676890783003},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_base/_widget/board.styl","hash":"1068d71721baeed76bf0176f9b964d36b5764c9f","modified":1676890783003},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_base/_widget/banner.styl","hash":"80301db38e448e40e88bb34d0128628b0809b243","modified":1676890783003},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_base/_widget/code-widget.styl","hash":"417a7388b39c0203178b0032e151febd66a0e9f3","modified":1676890783003},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_base/_widget/copyright.styl","hash":"3ac1eb36e124adef607775aa505386d5680960e2","modified":1676890783004},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_base/_widget/footer.styl","hash":"e6f5921ff9009c1853e7db30c482bc1682433ed9","modified":1676890783004},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_base/_widget/header.styl","hash":"30f50446609d49c896e92a89225591b606adc863","modified":1676890783005},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_base/_widget/footnote.styl","hash":"41935973a66c14ab2bea0539d4b1f15c62534fa4","modified":1676890783004},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_base/_widget/modal.styl","hash":"0ca6171ce262339e0e36cfea0978b554d87ae7fc","modified":1676890783005},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_base/_widget/ngrogress.styl","hash":"48799d3148ef6493be0e05897c635124e9b05d03","modified":1676890783005},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_base/_widget/noscript.styl","hash":"8fad325e411bc83c8ebdc4115015477eed5f60da","modified":1676890783005},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_base/_widget/pagination.styl","hash":"f4ae7cbf2f10f459de7864f8e642553b587df889","modified":1676890783006},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_base/_widget/qrcode.styl","hash":"04447d3b673be84a1af1dc57933a3c41dd7c0cfe","modified":1676890783006},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_base/_widget/scroll-btn.styl","hash":"e4dbbbb1a2508a72bc04680552d7ebbea0eed0fe","modified":1676890783006},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_base/_widget/search.styl","hash":"1f4e678d7219815ab62de1b92ec75e021247f90b","modified":1676890783006},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_base/_widget/toc.styl","hash":"5defef321e3e933fe84f3f2ca481c88f55381fb0","modified":1676890783007},{"_id":"themes/hexo-theme-fluid-master/source/img/default3.jpeg","hash":"4d4c1051627395b2d08f16d476c39b8c4b2cc885","modified":1661462804588},{"_id":"themes/hexo-theme-fluid-master/source/img/tx01.jpg","hash":"1919e8b3880af15daa48dc5682d1ae65c929266e","modified":1661449348027},{"_id":"themes/hexo-theme-fluid-master/source/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1660531045000},{"_id":"themes/hexo-theme-fluid-master/source/img/default03.jpg","hash":"8ec94a4c67150ef2ede2f5ff60f79a5c3214fd4c","modified":1661462596026},{"_id":"themes/hexo-theme-fluid-master/source/img/default01.jpg","hash":"4956297b0bf854d1e3817567282e218a02c20a81","modified":1649247709026},{"_id":"public/atom.xml","hash":"618b4f599c09993a2c3bc89ebc8995f8f0ae464f","modified":1676694776256},{"_id":"public/sitemap.xml","hash":"45dbfc0e26acfa50ecaead8de6f187fe64f0c493","modified":1676694776256},{"_id":"public/sitemap.txt","hash":"316a3389b10d1bc6dcd09a12c400d8f4fbff5ced","modified":1676694776256},{"_id":"public/local-search.xml","hash":"c66e1b598db4b1f2c5568089248fed25c4680355","modified":1676694776256},{"_id":"public/tags/index.html","hash":"8981abefe6efd4bd31bb962f9b68688b5975fe6b","modified":1676696793634},{"_id":"public/categories/index.html","hash":"35bedb71b1da7c91e7414fc0106f53c6b2bd5c6e","modified":1676696793634},{"_id":"public/link/index.html","hash":"eef94f77653e6eb4be52010cb1bcd3deabc7c4dd","modified":1676696793634},{"_id":"public/about/index.html","hash":"f19b6c4662adc4f5ac55fff6495651519f7bce17","modified":1676696793634},{"_id":"public/archives/index.html","hash":"db8ab947736633a903988e854b8957bbcfc8d1e6","modified":1676696793634},{"_id":"public/archives/2022/index.html","hash":"94e1b78041205624aea273f7a6b91c3bf4a7ef81","modified":1676696793634},{"_id":"public/archives/2022/08/index.html","hash":"2a0bb00b03a473337944a02010a132ae1c241c7b","modified":1676696793634},{"_id":"public/index.html","hash":"4966c8c8131cd5f389c36e2015673cd56c58fcd7","modified":1676696793634},{"_id":"public/404.html","hash":"98b9bc89416eada032a5b44257077d4d76668f95","modified":1676696793634},{"_id":"public/2022/08/26/htttp协议/index.html","hash":"e59465a6aa152765db2d4a6984ec7b8b707a4050","modified":1676696793634},{"_id":"public/2022/08/26/Hexo主题更换/index.html","hash":"0a443b425d1236195e8706b47074d6d83efbbdad","modified":1676685457440},{"_id":"public/2022/08/24/使用node创建博客/index.html","hash":"b312fbb5ee48bb9f53e86ed551e404524b9d013e","modified":1676685457440},{"_id":"public/2022/08/24/hello-hexo/index.html","hash":"9ef628242b1a18a415e96aa3234ad99b7b040924","modified":1676696793634},{"_id":"public/links/index.html","hash":"5355835c160024e5235f2ed08f24d342ab78127f","modified":1676696793634},{"_id":"public/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1661463378843},{"_id":"public/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1661463378843},{"_id":"public/img/fluid01.ico","hash":"38bcaf31991e070f66463ec42796b1f5d518c10c","modified":1661463378843},{"_id":"public/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1661463378843},{"_id":"public/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1661463378843},{"_id":"public/img/fluid02.jpg","hash":"d1d45220db821066a37503a959a6da61100c9a54","modified":1661463378843},{"_id":"public/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1661463378843},{"_id":"public/img/default3.jpeg","hash":"4d4c1051627395b2d08f16d476c39b8c4b2cc885","modified":1661463378843},{"_id":"public/img/tx01.jpg","hash":"1919e8b3880af15daa48dc5682d1ae65c929266e","modified":1661463378843},{"_id":"public/css/highlight.css","hash":"0f9a477d33d3b15ebe7e163e756fb7c54c7ded6b","modified":1661463378843},{"_id":"public/css/highlight-dark.css","hash":"2b0daa6e5343da9dbb26d617d224b8397e48556b","modified":1661463378843},{"_id":"public/js/boot.js","hash":"2848f8eb5081a7f0550fbd76dc06d3ff877f1913","modified":1661463378843},{"_id":"public/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1661463378843},{"_id":"public/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1661463378843},{"_id":"public/js/leancloud.js","hash":"eff77c7a5c399fcaefda48884980571e15243fc9","modified":1661463378843},{"_id":"public/js/color-schema.js","hash":"ba63f7c3324bc1fdd050a90add9d8faaffc27e07","modified":1661463378843},{"_id":"public/js/local-search.js","hash":"cebcda5991b6a9ab9307c69542389ce9013f04f7","modified":1661463378843},{"_id":"public/js/events.js","hash":"f05a569a9fd6da2fda69a2cf8e276ba81580faf3","modified":1661463378843},{"_id":"public/js/plugins.js","hash":"2333494add51e5e1374602a4e81f0be36a05d4c2","modified":1661463378843},{"_id":"public/js/utils.js","hash":"45cc86f099db0a2c36ad49711ce66c2d598a2ab1","modified":1661463378843},{"_id":"public/css/main.css","hash":"f7ce6ed5308c621930136e91fe5e47d1ad91130b","modified":1661463378843},{"_id":"public/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1661463378843},{"_id":"public/img/default03.jpg","hash":"8ec94a4c67150ef2ede2f5ff60f79a5c3214fd4c","modified":1661463378843},{"_id":"public/img/default01.jpg","hash":"4956297b0bf854d1e3817567282e218a02c20a81","modified":1661463378843},{"_id":"source/_posts/宝塔部署前后端分离Vue项目.md","hash":"660c74dd755a46224fb9ff1611480d28085315db","modified":1676890782897},{"_id":"source/_posts/vue 的生命周期.md","hash":"cd27cae537060303c248691a2225a93fb339bdf9","modified":1676890782895},{"_id":"source/_posts/三次握手和四次挥手.md","hash":"7143eb4ef190386cc6f56274499983a75ab08b26","modified":1676890782895},{"_id":"source/_posts/从输入URL到浏览器显示页面发生过程.md","hash":"b9c4c4f943da406a0e1b43fadfc7bd7f2e293e38","modified":1676890782896},{"_id":"public/archives/2022/09/index.html","hash":"423aee4f4463b048214c049353335d0259c5dbb5","modified":1676696793634},{"_id":"public/2022/09/02/从输入URL到浏览器显示页面发生过程/index.html","hash":"e28ebc9ecd79786f07b3d9eb03ae7fb9716d60dc","modified":1676696793634},{"_id":"public/2022/08/30/三次握手和四次挥手/index.html","hash":"070dce8d2aae080bf2ef98bc248f11045baf28bd","modified":1676685457440},{"_id":"public/2022/08/30/vue 的生命周期/index.html","hash":"f436b03d19d68923e89dc70f58d6dd1c361e8cb1","modified":1676696793634},{"_id":"public/2022/08/30/宝塔部署前后端分离Vue项目/index.html","hash":"bc344320058274fd71eaf857fe26f26188c5002f","modified":1676685457440},{"_id":"source/_posts/ajax.md","hash":"9655903253516ab12ccab177ca5db54896702988","modified":1662244385808},{"_id":"source/_posts/Ajax请求的五个步骤.md","hash":"3e869d85355bdd11810966fba88f846c39da944e","modified":1676890782893},{"_id":"public/2022/09/04/ajax/index.html","hash":"59f0ddc06453206a85daee61fabf4aba1cff2df0","modified":1662244872883},{"_id":"public/2022/09/04/Ajax请求的五个步骤/index.html","hash":"9bb2d5ea370b7604fd9d74703adbf43a0209348c","modified":1676685457440},{"_id":"source/_posts/防抖节流案列.md","hash":"bcd647517abe1e09f04b3b3c80564c1cd5c7f935","modified":1676890782897},{"_id":"source/_posts/电影票选座案例.md","hash":"206da3e7466a64ae855b9fedbf2eb2ab8faad815","modified":1676890782897},{"_id":"source/_posts/10s支付跳转案例.md","hash":"f1cf86b7b5562ed239732b3aa705c9ef0fd651c1","modified":1676890782893},{"_id":"source/_posts/百度搜索数据展示.md","hash":"1f9c20884abf6549909446cb2358206a55606667","modified":1676890782897},{"_id":"source/image/Tab栏切换html部分.png","hash":"58abc94452c7a6a46013adfbcbe65e6dd9abac5b","modified":1668886310908},{"_id":"source/image/敏感词过滤-1.17.png","hash":"d8768e2376826160bd7fc3db14119dc58630a22e","modified":1673895923936},{"_id":"source/image/点击页面.png","hash":"8e1b5b46626a266edd3f02e9c6669a42c5590d66","modified":1671781607177},{"_id":"source/image/跳转页面.png","hash":"46e3981f3bc695842ab73052758003c88a181a43","modified":1671781630578},{"_id":"source/image/全选 全不选 反选-1.15.png","hash":"39bc665a9554ba3be91330613c8477755d50b698","modified":1673759916544},{"_id":"source/image/相册选择-1.1.png","hash":"bd59ca022b4e7329bf35a06048b333fda3b86321","modified":1672604184159},{"_id":"source/image/返回首屏功能-1.20.png","hash":"5aa1c17e0b09f2290f4fc8d3952a1ea439f530e0","modified":1674168040869},{"_id":"source/image/移动盒子-1.29.png","hash":"714bb66d1edf719f07e98d644d8f2e91ace940d8","modified":1674995711626},{"_id":"source/image/进度条功能-1.18.png","hash":"d14b71d95a99a585344f30ce3b746777b45cf2ab","modified":1673986598940},{"_id":"source/image/Tab选项卡-1.15.png","hash":"8ebb131f4283b30650d8d66028f31afd1c5318ff","modified":1673723165657},{"_id":"source/image/百度搜索框数据展示-1.11.png","hash":"f364f6b1a2b734d57699dc2f08798550850e2e70","modified":1673466599007},{"_id":"source/image/电影票选座-1.20.png","hash":"af71596cc4b0fe89fe8df43dbfcd0505686e5cff","modified":1674728264899},{"_id":"source/image/验证码生成及校验-1.2.png","hash":"4deee1c6ac8375320d303ca843891239f152e500","modified":1672689542058},{"_id":"source/image/商品查询案例.png","hash":"fdc5e260aaabe20b3821873c2d169d759d56a0ec","modified":1667931063881},{"_id":"source/image/Tab栏切换js部分.png","hash":"0ccd8b047655d24aa20af8c0723b7b778926036d","modified":1668981926652},{"_id":"public/archives/2022/12/index.html","hash":"436f75a06ec83973e4519b2fdc59599c1bc799f4","modified":1676696793634},{"_id":"public/2022/12/24/10s支付跳转案例/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1676418810753},{"_id":"public/image/敏感词过滤-1.17.png","hash":"d8768e2376826160bd7fc3db14119dc58630a22e","modified":1676134424086},{"_id":"public/image/Tab栏切换html部分.png","hash":"58abc94452c7a6a46013adfbcbe65e6dd9abac5b","modified":1676134424086},{"_id":"public/image/点击页面.png","hash":"8e1b5b46626a266edd3f02e9c6669a42c5590d66","modified":1676134424086},{"_id":"public/image/跳转页面.png","hash":"46e3981f3bc695842ab73052758003c88a181a43","modified":1676134424086},{"_id":"public/image/全选 全不选 反选-1.15.png","hash":"39bc665a9554ba3be91330613c8477755d50b698","modified":1676134424086},{"_id":"public/image/相册选择-1.1.png","hash":"bd59ca022b4e7329bf35a06048b333fda3b86321","modified":1676134424086},{"_id":"public/image/返回首屏功能-1.20.png","hash":"5aa1c17e0b09f2290f4fc8d3952a1ea439f530e0","modified":1676134424086},{"_id":"public/image/移动盒子-1.29.png","hash":"714bb66d1edf719f07e98d644d8f2e91ace940d8","modified":1676134424086},{"_id":"public/image/进度条功能-1.18.png","hash":"d14b71d95a99a585344f30ce3b746777b45cf2ab","modified":1676134424086},{"_id":"public/image/Tab选项卡-1.15.png","hash":"8ebb131f4283b30650d8d66028f31afd1c5318ff","modified":1676134424086},{"_id":"public/image/百度搜索框数据展示-1.11.png","hash":"f364f6b1a2b734d57699dc2f08798550850e2e70","modified":1676134424086},{"_id":"public/image/电影票选座-1.20.png","hash":"af71596cc4b0fe89fe8df43dbfcd0505686e5cff","modified":1676134424086},{"_id":"public/image/验证码生成及校验-1.2.png","hash":"4deee1c6ac8375320d303ca843891239f152e500","modified":1676134424086},{"_id":"public/image/商品查询案例.png","hash":"fdc5e260aaabe20b3821873c2d169d759d56a0ec","modified":1676134424086},{"_id":"public/image/Tab栏切换js部分.png","hash":"0ccd8b047655d24aa20af8c0723b7b778926036d","modified":1676134424086},{"_id":"source/_posts/article-title.md","hash":"7b52d7fc960602fefe44c36d43a7c7abebab679e","modified":1676142890215},{"_id":"public/2023/02/12/article-title/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1676418810753},{"_id":"public/archives/page/2/index.html","hash":"4cad6492a2194980d7c769b7384e8cb8d859881a","modified":1676696793634},{"_id":"public/archives/2023/index.html","hash":"124572d975720c8778c183eb8dabfaf9c08c9f48","modified":1676696793634},{"_id":"public/archives/2023/02/index.html","hash":"229bb7e9ba4c0e90bcb9f6e5b55c6f90bb11846a","modified":1676696793634},{"_id":"public/page/2/index.html","hash":"f27154701552bd700992548961251e32c3ee5e80","modified":1676696793634},{"_id":"themes/hexo-theme-fluid-master/source/img/wx.jpg","hash":"64521543175076daa8999377decc0f8bd0264561","modified":1676399881815},{"_id":"themes/hexo-theme-fluid-master/source/img/fluid03.png","hash":"bb8fb54d2cbad6f0438cbd450ccb2fcdfb4ffe75","modified":1676398884259},{"_id":"themes/hexo-theme-fluid-master/source/img/tx.jpg","hash":"752651f772eff4a15a7b45a9d46f26bcc68b3dde","modified":1676400176337},{"_id":"themes/hexo-theme-fluid-master/source/img/fluid05.png","hash":"f797493c86b0cd9a3d1dc94838d266a881cefc1d","modified":1676398602117},{"_id":"themes/hexo-theme-fluid-master/source/img/fluid04.png","hash":"b6c81e74264f4b9bc8a6b2a834c792080e97a84a","modified":1676398560527},{"_id":"themes/hexo-theme-fluid-master/source/img/gd.png","hash":"36727b170f1ec4ff8670866b0ffa2320a9722631","modified":1676401269139},{"_id":"themes/hexo-theme-fluid-master/source/img/gd2.png","hash":"cd1407a48ca06b287ed62b6a2b1d6525190b6054","modified":1676401300141},{"_id":"public/img/wx.jpg","hash":"64521543175076daa8999377decc0f8bd0264561","modified":1676404424059},{"_id":"public/img/fluid03.png","hash":"bb8fb54d2cbad6f0438cbd450ccb2fcdfb4ffe75","modified":1676404424059},{"_id":"public/img/tx.jpg","hash":"752651f772eff4a15a7b45a9d46f26bcc68b3dde","modified":1676404424059},{"_id":"public/img/gd.png","hash":"36727b170f1ec4ff8670866b0ffa2320a9722631","modified":1676404424059},{"_id":"public/img/gd2.png","hash":"cd1407a48ca06b287ed62b6a2b1d6525190b6054","modified":1676404424059},{"_id":"public/img/fluid05.png","hash":"f797493c86b0cd9a3d1dc94838d266a881cefc1d","modified":1676404424059},{"_id":"public/img/fluid04.png","hash":"b6c81e74264f4b9bc8a6b2a834c792080e97a84a","modified":1676404424059},{"_id":"themes/hexo-theme-fluid-master/source/img/bitbug_favicon(1).ico","hash":"ebb42cfedfeabc9f35ab89104b0190c651471497","modified":1676408673498},{"_id":"source/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1661463380174},{"_id":"themes/hexo-theme-fluid-master/source/img/10001.jpg","hash":"7ef63afd8aed5f6734b497a2fa85daa5bbe435c0","modified":1676416325621},{"_id":"themes/hexo-theme-fluid-master/source/img/10002.jpg","hash":"86b9878ac5e3127c46432cb5999232447d147bee","modified":1676416333047},{"_id":"themes/hexo-theme-fluid-master/source/img/10003.jpg","hash":"272be36b4617782c4c6b8799568dca3ad5be590b","modified":1676416337169},{"_id":"themes/hexo-theme-fluid-master/source/img/dn.jpg","hash":"7a83ac7ea600669b37ddc47b441f4c1f2eee1403","modified":1676416494908},{"_id":"themes/hexo-theme-fluid-master/source/img/zw.png","hash":"a7c55dfbad21bd95b857c28f9f7eff61a66f5e51","modified":1676415901277},{"_id":"public/search.xml","hash":"117cee76187ec550f5941d9dcdcc0c5e47daf464","modified":1676694776256},{"_id":"public/img/bitbug_favicon(1).ico","hash":"ebb42cfedfeabc9f35ab89104b0190c651471497","modified":1676418810753},{"_id":"public/img/10002.jpg","hash":"86b9878ac5e3127c46432cb5999232447d147bee","modified":1676418810753},{"_id":"public/img/10001.jpg","hash":"7ef63afd8aed5f6734b497a2fa85daa5bbe435c0","modified":1676418810753},{"_id":"public/img/10003.jpg","hash":"272be36b4617782c4c6b8799568dca3ad5be590b","modified":1676418810753},{"_id":"public/img/dn.jpg","hash":"7a83ac7ea600669b37ddc47b441f4c1f2eee1403","modified":1676418810753},{"_id":"public/img/zw.png","hash":"62262b0f750d8dd84bcb830b0ac40f34a770f68a","modified":1676680238581},{"_id":"source/_posts/fliter+indexOf 数组去重.md","hash":"4a4ba9a27d25560dd642f622a4eb44a31eec60cc","modified":1676474856657},{"_id":"source/_posts/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1661463380174},{"_id":"source/_posts/使用node创建博客 - 副本.md","hash":"9c21a4f4237fbafee7c1dbde00a60afb6bc82ec4","modified":1661457920065},{"_id":"source/_posts/数组去重.md","hash":"006aaa5e4bb26e28be9e02477d6d9dc5e9226561","modified":1676679299252},{"_id":"source/_posts/回调地狱与promise.md","hash":"6452f48d1decee2234f73594b0c7fbddb55d24bf","modified":1676679853050},{"_id":"source/img/10001.jpg","hash":"7ef63afd8aed5f6734b497a2fa85daa5bbe435c0","modified":1676474534998},{"_id":"source/img/10003.jpg","hash":"272be36b4617782c4c6b8799568dca3ad5be590b","modified":1676474535002},{"_id":"source/img/10002.jpg","hash":"86b9878ac5e3127c46432cb5999232447d147bee","modified":1676474535000},{"_id":"source/img/fluid02.jpg","hash":"d1d45220db821066a37503a959a6da61100c9a54","modified":1676417760193},{"_id":"source/img/dn.jpg","hash":"7a83ac7ea600669b37ddc47b441f4c1f2eee1403","modified":1676474535003},{"_id":"source/img/jl.png","hash":"32c9933de790f886dd551d818d035e5a24da481f","modified":1676672295696},{"_id":"source/img/default3.jpeg","hash":"4d4c1051627395b2d08f16d476c39b8c4b2cc885","modified":1676417760192},{"_id":"source/img/zw.png","hash":"62262b0f750d8dd84bcb830b0ac40f34a770f68a","modified":1676674888946},{"_id":"source/img/default03.jpg","hash":"8ec94a4c67150ef2ede2f5ff60f79a5c3214fd4c","modified":1676417760191},{"_id":"source/img/fluid03.png","hash":"bb8fb54d2cbad6f0438cbd450ccb2fcdfb4ffe75","modified":1676417760198},{"_id":"source/img/default01.jpg","hash":"4956297b0bf854d1e3817567282e218a02c20a81","modified":1676417760187},{"_id":"themes/hexo-theme-fluid-master/source/img/index.jpg","hash":"4a54068cdda5bd39cef570939319ffe8d6ada96c","modified":1676678733917},{"_id":"public/tags/telescope/index.html","hash":"6de85f0e0b99235cc81ee516f5047ea0a6753db5","modified":1676696793634},{"_id":"public/2023/02/18/回调地狱与promise/index.html","hash":"89dec63fa4baad00037a2a124f476c812e50ac24","modified":1676696793634},{"_id":"public/2023/02/17/防抖节流案列/index.html","hash":"23ac422d17264065cca6b1968e77f2e66a7f1ab2","modified":1676696793634},{"_id":"public/2023/02/17/数组去重/index.html","hash":"f101eb214613d6c4be87b1d5d63673ee9db57ecf","modified":1676696793634},{"_id":"public/2023/02/15/10s支付跳转案例/index.html","hash":"891e4dba2489e428289c31f0a14fbed37a3a17b0","modified":1676696793634},{"_id":"public/img/jl.png","hash":"32c9933de790f886dd551d818d035e5a24da481f","modified":1676680238581},{"_id":"public/img/index.jpg","hash":"4a54068cdda5bd39cef570939319ffe8d6ada96c","modified":1676680238581},{"_id":"themes/hexo-theme-fluid-master/source/img/beij.png","hash":"76de8a7553542452178ce5310b8047199436a320","modified":1676683493367},{"_id":"themes/hexo-theme-fluid-master/source/img/liul.png","hash":"741af4bf2a658233cc89054fd945f06f9bf0d833","modified":1676683557812},{"_id":"themes/hexo-theme-fluid-master/source/img/wallhaven-1ppyk9_2560x1080.png","hash":"d3741af0fa5966c54f876431f17b50ee865175a9","modified":1676683512942},{"_id":"public/img/beij.png","hash":"76de8a7553542452178ce5310b8047199436a320","modified":1676685457440},{"_id":"public/img/liul.png","hash":"741af4bf2a658233cc89054fd945f06f9bf0d833","modified":1676685457440},{"_id":"public/img/wallhaven-1ppyk9_2560x1080.png","hash":"d3741af0fa5966c54f876431f17b50ee865175a9","modified":1676685457440},{"_id":"source/img/10004.jpg","hash":"59530f23967e74cbf952a56a32d0fe71d2ad163d","modified":1676690141943},{"_id":"source/img/10005.jpg","hash":"47afe51152cd1d0731dd631db756966da60cbd03","modified":1676690141949},{"_id":"source/img/10006.jpg","hash":"9e3fd4d3d23e9d8f3ef5e2d9196a7f9c57240c68","modified":1676690141952},{"_id":"source/img/10007.jpg","hash":"6359aa0b943ef41d7fafb919e67a062d5beff7bb","modified":1676690141976},{"_id":"source/img/10009.jpg","hash":"98bd6d4fdafe2ef937d415ab3158eb3dc9dc338f","modified":1676690556777},{"_id":"source/img/10010.jpg","hash":"71cdb20bb460edbe88275dbbac4791f2673cb21b","modified":1676690556779},{"_id":"source/img/bt.png","hash":"d122d23733e1ac88f4b482b11976ea46cae2cd72","modified":1676694407247},{"_id":"source/img/dn1.jpg","hash":"f5b33ff49f1f3b00c973614a17423161f7756e0c","modified":1676690141910},{"_id":"source/img/dn2.jpg","hash":"df62d4c1ed20cf56c8f9bb19afc59313c8775c25","modified":1676690141923},{"_id":"source/img/dn3.jpg","hash":"51bf1a8efdaafdb8a268e90e1ca4d0405315d088","modified":1676690141918},{"_id":"source/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1670937168000},{"_id":"source/img/mao1.jpg","hash":"eba5f47ce43c754781a8bbc59c380667a27a075b","modified":1676692267429},{"_id":"source/img/sm.png","hash":"53345be1363e09b3e43e34d27c030c4f376b060a","modified":1676692266603},{"_id":"source/img/mao2.jpg","hash":"21822ccfc3f091983044f2cd3cc18bd0eea40d1b","modified":1676692266600},{"_id":"source/img/10008.jpg","hash":"4fa38bc9c0fa872e128b2d54adb704a71bea7247","modified":1676690556758},{"_id":"source/img/dy.jpg","hash":"8fea00f29150c7e2900145bb4449394a48cb7b4f","modified":1676689808602},{"_id":"public/archives/2022/10/index.html","hash":"14e9f9a6514643c2c04659fc9bfce158690f417c","modified":1676696793634},{"_id":"public/archives/2023/01/index.html","hash":"45117fc149362f0b531b83971ef2f40d446876bd","modified":1676696793634},{"_id":"public/tags/Telescope/index.html","hash":"335fed40012013b24669c4c1ef144e3358d90afe","modified":1676696793634},{"_id":"public/tags/telescope/page/2/index.html","hash":"3981130d80a6207d5cad1d5ab8ab532e8192a57d","modified":1676696793634},{"_id":"public/2023/01/15/百度搜索数据展示/index.html","hash":"4a7925df39b6e4d746e1228d4bbb8ebbaf601b9d","modified":1676696793634},{"_id":"public/2022/12/18/使用node创建博客/index.html","hash":"5a26c9e5f053dd4cd50a4df3e57b2b723b964584","modified":1676696793634},{"_id":"public/2022/12/10/电影票选座案例/index.html","hash":"6696cb01512ae52ef7e0500b3b3faae1c94d1ff5","modified":1676696793634},{"_id":"public/2022/10/10/Ajax请求的五个步骤/index.html","hash":"99ec2c3e43548ac2ebbbb7ca2851f2e294cbf161","modified":1676696793634},{"_id":"public/2022/09/05/三次握手和四次挥手/index.html","hash":"ba3f5d043bffb311f9c41b60590394c28996fee4","modified":1676696793634},{"_id":"public/2022/08/30/Hexo主题更换/index.html","hash":"a08c9910fd5c86c604b9ae25c5edd5b78ae1e9e4","modified":1676696793634},{"_id":"public/2022/08/25/宝塔部署前后端分离Vue项目/index.html","hash":"399ea1356c10904a61ccda07aa044f83110b3f74","modified":1676696793634},{"_id":"public/img/10004.jpg","hash":"59530f23967e74cbf952a56a32d0fe71d2ad163d","modified":1676694776256},{"_id":"public/img/10007.jpg","hash":"6359aa0b943ef41d7fafb919e67a062d5beff7bb","modified":1676694776256},{"_id":"public/img/10005.jpg","hash":"47afe51152cd1d0731dd631db756966da60cbd03","modified":1676694776256},{"_id":"public/img/10006.jpg","hash":"9e3fd4d3d23e9d8f3ef5e2d9196a7f9c57240c68","modified":1676694776256},{"_id":"public/img/dn3.jpg","hash":"51bf1a8efdaafdb8a268e90e1ca4d0405315d088","modified":1676694776256},{"_id":"public/img/dn2.jpg","hash":"df62d4c1ed20cf56c8f9bb19afc59313c8775c25","modified":1676694776256},{"_id":"public/img/dn1.jpg","hash":"f5b33ff49f1f3b00c973614a17423161f7756e0c","modified":1676694776256},{"_id":"public/img/10009.jpg","hash":"98bd6d4fdafe2ef937d415ab3158eb3dc9dc338f","modified":1676694776256},{"_id":"public/img/10010.jpg","hash":"71cdb20bb460edbe88275dbbac4791f2673cb21b","modified":1676694776256},{"_id":"public/img/mao1.jpg","hash":"eba5f47ce43c754781a8bbc59c380667a27a075b","modified":1676694776256},{"_id":"public/img/sm.png","hash":"53345be1363e09b3e43e34d27c030c4f376b060a","modified":1676694776256},{"_id":"public/img/mao2.jpg","hash":"21822ccfc3f091983044f2cd3cc18bd0eea40d1b","modified":1676694776256},{"_id":"public/img/bt.png","hash":"d122d23733e1ac88f4b482b11976ea46cae2cd72","modified":1676694776256},{"_id":"public/img/10008.jpg","hash":"4fa38bc9c0fa872e128b2d54adb704a71bea7247","modified":1676694776256},{"_id":"public/img/dy.jpg","hash":"8fea00f29150c7e2900145bb4449394a48cb7b4f","modified":1676694776256},{"_id":"public/css/prism.css","hash":"f1f64f4a26b715edbd65391def53322611df75cf","modified":1676696793634}],"Category":[],"Data":[],"Page":[{"title":"tags","date":"2022-08-25T08:34:49.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2022-08-25 16:34:49\ntype: \"tags\"\n---\n","updated":"2022-08-25T08:36:49.802Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cl79keci70000bwsv21gqb16d","content":"","site":{"data":{}},"wordcount":0,"excerpt":"","more":""},{"title":"categories","date":"2022-08-25T08:37:05.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2022-08-25 16:37:05\ntype: \"categories\"\n---\n","updated":"2022-08-25T08:37:53.123Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cl79kecid0002bwsv7j4rc9al","content":"","site":{"data":{}},"wordcount":0,"excerpt":"","more":""},{"title":"link","date":"2022-08-25T08:38:05.000Z","type":"link","_content":"","source":"link/index.md","raw":"---\ntitle: link\ndate: 2022-08-25 16:38:05\ntype: \"link\"\n---\n","updated":"2022-08-25T08:38:28.074Z","path":"link/index.html","comments":1,"layout":"page","_id":"cl79kecig0004bwsv5bifcztm","content":"","site":{"data":{}},"wordcount":0,"excerpt":"","more":""},{"title":"Telescope","layout":"about","_content":"<div class=\"container\">\n   <div class=\"section-title center\">\n     <h2>基本 <strong>资料</strong></h2>\n     <hr>\n     </div>\n   <div class=\"space\"></div>\n   <div class=\"row\">\n     <div class=\"col-md-3 col-sm-6 service\"> <i class=\"fa fa-laptop\"></i>\n       <h4><strong>个人信息</strong></h4>\n       <p>\n\t英文名: Telescope &nbsp; <br />\n\t籍贯：中国\n\t</p>\n     </div>\n     <div class=\"col-md-3 col-sm-6 service\"> <i class=\"fa fa-code\"></i>\n       <h4><strong>专业学历</strong></h4>\n  <p>\n\t    专业：室内设计<br />\n\t     学历：专科<br />\n\t\n</p>\n     </div>\n     <div class=\"col-md-3 col-sm-6 service\"> <i class=\"fa fa-rocket\"></i>\n       <h4><strong>毕业学校</strong></h4>\n  <p>\n\t  学习技能：#css/html  #js  #vue  \n\t</p>\n     </div>\n    <div class=\"col-md-3 col-sm-6 service\"> <i class=\"fa fa-bullseye\"></i>\n       <h4><strong>联系方式</strong></h4>\n       <p>邮箱：168866@163.com</p><br/>\n     </div>\n   </div>\n </div>\n","source":"about/index.md","raw":"---\ntitle: Telescope\nlayout: about\n---\n<div class=\"container\">\n   <div class=\"section-title center\">\n     <h2>基本 <strong>资料</strong></h2>\n     <hr>\n     </div>\n   <div class=\"space\"></div>\n   <div class=\"row\">\n     <div class=\"col-md-3 col-sm-6 service\"> <i class=\"fa fa-laptop\"></i>\n       <h4><strong>个人信息</strong></h4>\n       <p>\n\t英文名: Telescope &nbsp; <br />\n\t籍贯：中国\n\t</p>\n     </div>\n     <div class=\"col-md-3 col-sm-6 service\"> <i class=\"fa fa-code\"></i>\n       <h4><strong>专业学历</strong></h4>\n  <p>\n\t    专业：室内设计<br />\n\t     学历：专科<br />\n\t\n</p>\n     </div>\n     <div class=\"col-md-3 col-sm-6 service\"> <i class=\"fa fa-rocket\"></i>\n       <h4><strong>毕业学校</strong></h4>\n  <p>\n\t  学习技能：#css/html  #js  #vue  \n\t</p>\n     </div>\n    <div class=\"col-md-3 col-sm-6 service\"> <i class=\"fa fa-bullseye\"></i>\n       <h4><strong>联系方式</strong></h4>\n       <p>邮箱：168866@163.com</p><br/>\n     </div>\n   </div>\n </div>\n","date":"2022-08-25T18:49:34.740Z","updated":"2022-08-25T18:49:34.740Z","path":"about/index.html","comments":1,"_id":"cl79kecii0006bwsvhtsw8l3s","content":"<div class=\"container\">\n   <div class=\"section-title center\">\n     <h2>基本 <strong>资料</strong></h2>\n     <hr>\n     </div>\n   <div class=\"space\"></div>\n   <div class=\"row\">\n     <div class=\"col-md-3 col-sm-6 service\"> <i class=\"fa fa-laptop\"></i>\n       <h4><strong>个人信息</strong></h4>\n       <p>\n    英文名: Telescope &nbsp; <br />\n    籍贯：中国\n    </p>\n     </div>\n     <div class=\"col-md-3 col-sm-6 service\"> <i class=\"fa fa-code\"></i>\n       <h4><strong>专业学历</strong></h4>\n  <p>\n        专业：室内设计<br />\n         学历：专科<br />\n    \n</p>\n     </div>\n     <div class=\"col-md-3 col-sm-6 service\"> <i class=\"fa fa-rocket\"></i>\n       <h4><strong>毕业学校</strong></h4>\n  <p>\n      学习技能：#css/html  #js  #vue  \n    </p>\n     </div>\n    <div class=\"col-md-3 col-sm-6 service\"> <i class=\"fa fa-bullseye\"></i>\n       <h4><strong>联系方式</strong></h4>\n       <p>邮箱：168866@163.com</p><br/>\n     </div>\n   </div>\n </div>\n","site":{"data":{}},"wordcount":94,"excerpt":"","more":"<div class=\"container\">\n   <div class=\"section-title center\">\n     <h2>基本 <strong>资料</strong></h2>\n     <hr>\n     </div>\n   <div class=\"space\"></div>\n   <div class=\"row\">\n     <div class=\"col-md-3 col-sm-6 service\"> <i class=\"fa fa-laptop\"></i>\n       <h4><strong>个人信息</strong></h4>\n       <p>\n    英文名: Telescope &nbsp; <br />\n    籍贯：中国\n    </p>\n     </div>\n     <div class=\"col-md-3 col-sm-6 service\"> <i class=\"fa fa-code\"></i>\n       <h4><strong>专业学历</strong></h4>\n  <p>\n        专业：室内设计<br />\n         学历：专科<br />\n    \n</p>\n     </div>\n     <div class=\"col-md-3 col-sm-6 service\"> <i class=\"fa fa-rocket\"></i>\n       <h4><strong>毕业学校</strong></h4>\n  <p>\n      学习技能：#css/html  #js  #vue  \n    </p>\n     </div>\n    <div class=\"col-md-3 col-sm-6 service\"> <i class=\"fa fa-bullseye\"></i>\n       <h4><strong>联系方式</strong></h4>\n       <p>邮箱：168866@163.com</p><br/>\n     </div>\n   </div>\n </div>\n"}],"Post":[{"title":"Hexo 说明书","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-hexo.md","raw":"---\ntitle: Hexo 说明书\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-hexo","published":1,"date":"2022-08-23T21:47:33.690Z","updated":"2022-08-25T20:06:29.032Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl79keci90001bwsvh81ohw6b","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo new <span class=\"hljs-string\">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo server<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo generate<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo deploy<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"wordcount":367,"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo new <span class=\"hljs-string\">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo server<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo generate<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo deploy<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"如何更换Hexo主题","index_img":"/img/fluid.png","date":"2022-08-29T16:00:00.000Z","_content":"# 如何更换Hexo主题\n\n## 一，下载存放主题：\n## 一、到hexo官网下载hexo主题包（压缩包一般存储在GitHub上）。\n\n  1. 把压缩包解压到博客系统的文件夹themes。（我的是 E:/blog/themes）\n\n## 二、使用node更换主题\n  1. 使用nond控制栏工具，进入到我们Hexo的安装包下面。我的hexo主题放在E盘的blog中。因此，我输入下述代码\n * 注意：只输入 $ 符后面的命令\n  \n$ E： （先是进入E盘）\n$ cd blog  （再进入blog）\n\n## 三、修改blog文件下_config.yml文件内容。\n1. 在我们hexo安装包中找到_config.yml安装包，用编译器打开（vscode或者sublime）。\n  \n2. command + F 查找 theme将原来默认的主题 landscape 改为 下载的文件夹名称（hexo-theme-nexmoe-master）\n   修改好的代码参考以下：\n\n```\ntheme: hexo-theme-nexmoe-master\n```\n\n## 四、预览效果！\n1. 让我们来看一下，主题更换的效果\n\n$ hexo s  （重启服务器）\n\n2. 复制生成的链接 <a>http://localhost:4000/</a> 浏览器打开就可以看到效果了！\n  \n\n最后，\n总结\n\n纸上得来终觉浅，绝知此事要躬行！\n多敲代码，多动脑子！\n\n","source":"_posts/Hexo主题更换.md","raw":"---\ntitle: 如何更换Hexo主题\ntags: [telescope]\nindex_img: /img/fluid.png\ndate: 2022-08-30 \n---\n# 如何更换Hexo主题\n\n## 一，下载存放主题：\n## 一、到hexo官网下载hexo主题包（压缩包一般存储在GitHub上）。\n\n  1. 把压缩包解压到博客系统的文件夹themes。（我的是 E:/blog/themes）\n\n## 二、使用node更换主题\n  1. 使用nond控制栏工具，进入到我们Hexo的安装包下面。我的hexo主题放在E盘的blog中。因此，我输入下述代码\n * 注意：只输入 $ 符后面的命令\n  \n$ E： （先是进入E盘）\n$ cd blog  （再进入blog）\n\n## 三、修改blog文件下_config.yml文件内容。\n1. 在我们hexo安装包中找到_config.yml安装包，用编译器打开（vscode或者sublime）。\n  \n2. command + F 查找 theme将原来默认的主题 landscape 改为 下载的文件夹名称（hexo-theme-nexmoe-master）\n   修改好的代码参考以下：\n\n```\ntheme: hexo-theme-nexmoe-master\n```\n\n## 四、预览效果！\n1. 让我们来看一下，主题更换的效果\n\n$ hexo s  （重启服务器）\n\n2. 复制生成的链接 <a>http://localhost:4000/</a> 浏览器打开就可以看到效果了！\n  \n\n最后，\n总结\n\n纸上得来终觉浅，绝知此事要躬行！\n多敲代码，多动脑子！\n\n","slug":"Hexo主题更换","published":1,"updated":"2023-02-18T04:16:06.166Z","_id":"cl79kecie0003bwsv5p9j7g3n","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"如何更换Hexo主题\"><a href=\"#如何更换Hexo主题\" class=\"headerlink\" title=\"如何更换Hexo主题\"></a>如何更换Hexo主题</h1><h2 id=\"一，下载存放主题：\"><a href=\"#一，下载存放主题：\" class=\"headerlink\" title=\"一，下载存放主题：\"></a>一，下载存放主题：</h2><h2 id=\"一、到hexo官网下载hexo主题包（压缩包一般存储在GitHub上）。\"><a href=\"#一、到hexo官网下载hexo主题包（压缩包一般存储在GitHub上）。\" class=\"headerlink\" title=\"一、到hexo官网下载hexo主题包（压缩包一般存储在GitHub上）。\"></a>一、到hexo官网下载hexo主题包（压缩包一般存储在GitHub上）。</h2><ol>\n<li>把压缩包解压到博客系统的文件夹themes。（我的是 E:&#x2F;blog&#x2F;themes）</li>\n</ol>\n<h2 id=\"二、使用node更换主题\"><a href=\"#二、使用node更换主题\" class=\"headerlink\" title=\"二、使用node更换主题\"></a>二、使用node更换主题</h2><ol>\n<li>使用nond控制栏工具，进入到我们Hexo的安装包下面。我的hexo主题放在E盘的blog中。因此，我输入下述代码</li>\n</ol>\n<ul>\n<li>注意：只输入 $ 符后面的命令</li>\n</ul>\n<p>$ E： （先是进入E盘）<br>$ cd blog  （再进入blog）</p>\n<h2 id=\"三、修改blog文件下-config-yml文件内容。\"><a href=\"#三、修改blog文件下-config-yml文件内容。\" class=\"headerlink\" title=\"三、修改blog文件下_config.yml文件内容。\"></a>三、修改blog文件下_config.yml文件内容。</h2><ol>\n<li><p>在我们hexo安装包中找到_config.yml安装包，用编译器打开（vscode或者sublime）。</p>\n</li>\n<li><p>command + F 查找 theme将原来默认的主题 landscape 改为 下载的文件夹名称（hexo-theme-nexmoe-master）<br>修改好的代码参考以下：</p>\n</li>\n</ol>\n<figure class=\"highlight xl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xl\"><span class=\"hljs-built_in\">theme</span>: hexo-<span class=\"hljs-built_in\">theme</span>-nexmoe-master<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"四、预览效果！\"><a href=\"#四、预览效果！\" class=\"headerlink\" title=\"四、预览效果！\"></a>四、预览效果！</h2><ol>\n<li>让我们来看一下，主题更换的效果</li>\n</ol>\n<p>$ hexo s  （重启服务器）</p>\n<ol start=\"2\">\n<li>复制生成的链接 <a><a href=\"http://localhost:4000/\">http://localhost:4000/</a></a> 浏览器打开就可以看到效果了！</li>\n</ol>\n<p>最后，<br>总结</p>\n<p>纸上得来终觉浅，绝知此事要躬行！<br>多敲代码，多动脑子！</p>\n","site":{"data":{}},"wordcount":514,"excerpt":"","more":"<h1 id=\"如何更换Hexo主题\"><a href=\"#如何更换Hexo主题\" class=\"headerlink\" title=\"如何更换Hexo主题\"></a>如何更换Hexo主题</h1><h2 id=\"一，下载存放主题：\"><a href=\"#一，下载存放主题：\" class=\"headerlink\" title=\"一，下载存放主题：\"></a>一，下载存放主题：</h2><h2 id=\"一、到hexo官网下载hexo主题包（压缩包一般存储在GitHub上）。\"><a href=\"#一、到hexo官网下载hexo主题包（压缩包一般存储在GitHub上）。\" class=\"headerlink\" title=\"一、到hexo官网下载hexo主题包（压缩包一般存储在GitHub上）。\"></a>一、到hexo官网下载hexo主题包（压缩包一般存储在GitHub上）。</h2><ol>\n<li>把压缩包解压到博客系统的文件夹themes。（我的是 E:&#x2F;blog&#x2F;themes）</li>\n</ol>\n<h2 id=\"二、使用node更换主题\"><a href=\"#二、使用node更换主题\" class=\"headerlink\" title=\"二、使用node更换主题\"></a>二、使用node更换主题</h2><ol>\n<li>使用nond控制栏工具，进入到我们Hexo的安装包下面。我的hexo主题放在E盘的blog中。因此，我输入下述代码</li>\n</ol>\n<ul>\n<li>注意：只输入 $ 符后面的命令</li>\n</ul>\n<p>$ E： （先是进入E盘）<br>$ cd blog  （再进入blog）</p>\n<h2 id=\"三、修改blog文件下-config-yml文件内容。\"><a href=\"#三、修改blog文件下-config-yml文件内容。\" class=\"headerlink\" title=\"三、修改blog文件下_config.yml文件内容。\"></a>三、修改blog文件下_config.yml文件内容。</h2><ol>\n<li><p>在我们hexo安装包中找到_config.yml安装包，用编译器打开（vscode或者sublime）。</p>\n</li>\n<li><p>command + F 查找 theme将原来默认的主题 landscape 改为 下载的文件夹名称（hexo-theme-nexmoe-master）<br>修改好的代码参考以下：</p>\n</li>\n</ol>\n<figure class=\"highlight xl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xl\"><span class=\"hljs-built_in\">theme</span>: hexo-<span class=\"hljs-built_in\">theme</span>-nexmoe-master<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"四、预览效果！\"><a href=\"#四、预览效果！\" class=\"headerlink\" title=\"四、预览效果！\"></a>四、预览效果！</h2><ol>\n<li>让我们来看一下，主题更换的效果</li>\n</ol>\n<p>$ hexo s  （重启服务器）</p>\n<ol start=\"2\">\n<li>复制生成的链接 <a><a href=\"http://localhost:4000/\">http://localhost:4000/</a></a> 浏览器打开就可以看到效果了！</li>\n</ol>\n<p>最后，<br>总结</p>\n<p>纸上得来终觉浅，绝知此事要躬行！<br>多敲代码，多动脑子！</p>\n"},{"title":"小白也能一键创建博客（安装node.js）","index_img":"/img/10001.jpg","date":"2022-12-17T16:00:00.000Z","_content":"## 一.安装 hexo 框架\n\n1. 百度 <a>http://nodejs.cn/download/</a> 直接下载安装node.js \n2. 电脑启动命令行 CTRL+R 输入 node-v 查看node版本，看到显示版本号就说明安装成功了。\n3. npm -v  #查看npm版本 \n4. npm install -g cnpm --registry=https://registry.npm.taobao.org  #安装淘宝的cnpm 管理器\n5. cnpm -v  #查看cnpm版本\n6. cnpm install -g hexo-cli  #安装hexo框架\n7.  hexo -v  #查看hexo版本\n8.  mkdir blog  #创建blog目录\n9.  cd blog  #进入blog目录   \n## 二.初始化博客，本地访问\n\n1.  hexo init  #生成博客 初始化博客（如果windows系统创建失败，可以现用管理员身份在C:\\Windows\\System32中创建文件夹，之后再转移到别的文件夹中）\n2.  hexo s  #启动本地博客服务\n3.  <a>http://localhost:4000/</a>  #本地访问地址 (因为是本地服务器所以只能本机访问)\n4.  hexo new “我的第一篇文章的名字” #创建新的文章\n5.  hexo clean  #清理blog文件夹缓存\n6.  hexo g  #生成\n7.  hexo s  #生成本地服务器，复制生成的 <a>http://localhost:4000/</a> 链接可以在本电脑浏览博客啦 ~\n \n## 三.上传 Github 部署博客 \n\n8.  在Github创建一个新的仓库 TelescopeX.github.io (前缀名必须是你用户名，后缀必须是.github.io)\n9.  cnpm install --save hexo-deployer-git  #在blog目录下安装git部署插件\n10. hexo c #清理一下\n11. hexo g #生成\n12. hexo d #部署到远程Github仓库\n13. 上面创建的仓库名 <a>(https://telescopex.github.io/)</a> 就是网址\n","source":"_posts/使用node创建博客.md","raw":"---\ntitle: 小白也能一键创建博客（安装node.js）\ntags: [Telescope]\nindex_img: /img/10001.jpg\ndate: 2022-12-18\n---\n## 一.安装 hexo 框架\n\n1. 百度 <a>http://nodejs.cn/download/</a> 直接下载安装node.js \n2. 电脑启动命令行 CTRL+R 输入 node-v 查看node版本，看到显示版本号就说明安装成功了。\n3. npm -v  #查看npm版本 \n4. npm install -g cnpm --registry=https://registry.npm.taobao.org  #安装淘宝的cnpm 管理器\n5. cnpm -v  #查看cnpm版本\n6. cnpm install -g hexo-cli  #安装hexo框架\n7.  hexo -v  #查看hexo版本\n8.  mkdir blog  #创建blog目录\n9.  cd blog  #进入blog目录   \n## 二.初始化博客，本地访问\n\n1.  hexo init  #生成博客 初始化博客（如果windows系统创建失败，可以现用管理员身份在C:\\Windows\\System32中创建文件夹，之后再转移到别的文件夹中）\n2.  hexo s  #启动本地博客服务\n3.  <a>http://localhost:4000/</a>  #本地访问地址 (因为是本地服务器所以只能本机访问)\n4.  hexo new “我的第一篇文章的名字” #创建新的文章\n5.  hexo clean  #清理blog文件夹缓存\n6.  hexo g  #生成\n7.  hexo s  #生成本地服务器，复制生成的 <a>http://localhost:4000/</a> 链接可以在本电脑浏览博客啦 ~\n \n## 三.上传 Github 部署博客 \n\n8.  在Github创建一个新的仓库 TelescopeX.github.io (前缀名必须是你用户名，后缀必须是.github.io)\n9.  cnpm install --save hexo-deployer-git  #在blog目录下安装git部署插件\n10. hexo c #清理一下\n11. hexo g #生成\n12. hexo d #部署到远程Github仓库\n13. 上面创建的仓库名 <a>(https://telescopex.github.io/)</a> 就是网址\n","slug":"使用node创建博客","published":1,"updated":"2023-02-18T02:55:25.154Z","_id":"cl79kecih0005bwsv08mz1yui","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"一-安装-hexo-框架\"><a href=\"#一-安装-hexo-框架\" class=\"headerlink\" title=\"一.安装 hexo 框架\"></a>一.安装 hexo 框架</h2><ol>\n<li>百度 <a><a href=\"http://nodejs.cn/download/\">http://nodejs.cn/download/</a></a> 直接下载安装node.js </li>\n<li>电脑启动命令行 CTRL+R 输入 node-v 查看node版本，看到显示版本号就说明安装成功了。</li>\n<li>npm -v  #查看npm版本 </li>\n<li>npm install -g cnpm –registry&#x3D;<a href=\"https://registry.npm.taobao.org/\">https://registry.npm.taobao.org</a>  #安装淘宝的cnpm 管理器</li>\n<li>cnpm -v  #查看cnpm版本</li>\n<li>cnpm install -g hexo-cli  #安装hexo框架</li>\n<li>hexo -v  #查看hexo版本</li>\n<li>mkdir blog  #创建blog目录</li>\n<li>cd blog  #进入blog目录</li>\n</ol>\n<h2 id=\"二-初始化博客，本地访问\"><a href=\"#二-初始化博客，本地访问\" class=\"headerlink\" title=\"二.初始化博客，本地访问\"></a>二.初始化博客，本地访问</h2><ol>\n<li>hexo init  #生成博客 初始化博客（如果windows系统创建失败，可以现用管理员身份在C:\\Windows\\System32中创建文件夹，之后再转移到别的文件夹中）</li>\n<li>hexo s  #启动本地博客服务</li>\n<li><a><a href=\"http://localhost:4000/\">http://localhost:4000/</a></a>  #本地访问地址 (因为是本地服务器所以只能本机访问)</li>\n<li>hexo new “我的第一篇文章的名字” #创建新的文章</li>\n<li>hexo clean  #清理blog文件夹缓存</li>\n<li>hexo g  #生成</li>\n<li>hexo s  #生成本地服务器，复制生成的 <a><a href=\"http://localhost:4000/\">http://localhost:4000/</a></a> 链接可以在本电脑浏览博客啦 ~</li>\n</ol>\n<h2 id=\"三-上传-Github-部署博客\"><a href=\"#三-上传-Github-部署博客\" class=\"headerlink\" title=\"三.上传 Github 部署博客\"></a>三.上传 Github 部署博客</h2><ol start=\"8\">\n<li>在Github创建一个新的仓库 TelescopeX.github.io (前缀名必须是你用户名，后缀必须是.github.io)</li>\n<li>cnpm install –save hexo-deployer-git  #在blog目录下安装git部署插件</li>\n<li>hexo c #清理一下</li>\n<li>hexo g #生成</li>\n<li>hexo d #部署到远程Github仓库</li>\n<li>上面创建的仓库名 <a>(<a href=\"https://telescopex.github.io/\">https://telescopex.github.io/</a>)</a> 就是网址</li>\n</ol>\n","site":{"data":{}},"wordcount":753,"excerpt":"","more":"<h2 id=\"一-安装-hexo-框架\"><a href=\"#一-安装-hexo-框架\" class=\"headerlink\" title=\"一.安装 hexo 框架\"></a>一.安装 hexo 框架</h2><ol>\n<li>百度 <a><a href=\"http://nodejs.cn/download/\">http://nodejs.cn/download/</a></a> 直接下载安装node.js </li>\n<li>电脑启动命令行 CTRL+R 输入 node-v 查看node版本，看到显示版本号就说明安装成功了。</li>\n<li>npm -v  #查看npm版本 </li>\n<li>npm install -g cnpm –registry&#x3D;<a href=\"https://registry.npm.taobao.org/\">https://registry.npm.taobao.org</a>  #安装淘宝的cnpm 管理器</li>\n<li>cnpm -v  #查看cnpm版本</li>\n<li>cnpm install -g hexo-cli  #安装hexo框架</li>\n<li>hexo -v  #查看hexo版本</li>\n<li>mkdir blog  #创建blog目录</li>\n<li>cd blog  #进入blog目录</li>\n</ol>\n<h2 id=\"二-初始化博客，本地访问\"><a href=\"#二-初始化博客，本地访问\" class=\"headerlink\" title=\"二.初始化博客，本地访问\"></a>二.初始化博客，本地访问</h2><ol>\n<li>hexo init  #生成博客 初始化博客（如果windows系统创建失败，可以现用管理员身份在C:\\Windows\\System32中创建文件夹，之后再转移到别的文件夹中）</li>\n<li>hexo s  #启动本地博客服务</li>\n<li><a><a href=\"http://localhost:4000/\">http://localhost:4000/</a></a>  #本地访问地址 (因为是本地服务器所以只能本机访问)</li>\n<li>hexo new “我的第一篇文章的名字” #创建新的文章</li>\n<li>hexo clean  #清理blog文件夹缓存</li>\n<li>hexo g  #生成</li>\n<li>hexo s  #生成本地服务器，复制生成的 <a><a href=\"http://localhost:4000/\">http://localhost:4000/</a></a> 链接可以在本电脑浏览博客啦 ~</li>\n</ol>\n<h2 id=\"三-上传-Github-部署博客\"><a href=\"#三-上传-Github-部署博客\" class=\"headerlink\" title=\"三.上传 Github 部署博客\"></a>三.上传 Github 部署博客</h2><ol start=\"8\">\n<li>在Github创建一个新的仓库 TelescopeX.github.io (前缀名必须是你用户名，后缀必须是.github.io)</li>\n<li>cnpm install –save hexo-deployer-git  #在blog目录下安装git部署插件</li>\n<li>hexo c #清理一下</li>\n<li>hexo g #生成</li>\n<li>hexo d #部署到远程Github仓库</li>\n<li>上面创建的仓库名 <a>(<a href=\"https://telescopex.github.io/\">https://telescopex.github.io/</a>)</a> 就是网址</li>\n</ol>\n"},{"title":"HTTP和HTTPS的基本概念和区别","index_img":"/img/10009.jpg","date":"2022-08-25T16:00:00.000Z","_content":"# HTTP和HTTPS的基本概念和区别\n\n## 一、HTTP和HTTPS的基本概念\n\n1. HTTP（HyperText Transfer Protocol）：超文本（文本、图片、视频、音频、css、js....）传输协议 ，它是基于请求/响应模式、应用层（TCP/IP协议）、无状态（没有记忆功能）的协议。HTTP 协议是以明文方式发送信息的，如果黑客截取了 Web 浏览器和服务器之间的传输报文，就可以直接获得其中的信息。\n\n  HTTP协议的通信过程(工作原理)？\n\n  第一步：客户端与服务器创建连接；\n\n  第二步：客户端发送请求给服务器；\n\n  第三步：服务接收处理请求并返回响应给客户端；\n\n  第四步：客户端与服务器自动断开连接；\n\n2. HTTPS（Hyper Text Transfer Protocol over SecureSocket Layer）：是以安全为目标的 HTTP 通道，是 HTTP 的安全版。HTTPS 的安全基础是 SSL。SSL 协议位于 TCP/IP 协议与各种应用层协议之间，为数据通讯提供安全支持。SSL 协议可分为两层：SSL 记录协议（SSL Record Protocol），它建立在可靠的传输协议（如TCP）之上，为高层协议提供数据封装、压缩、加密等基本功能的支持。SSL 握手协议（SSL Handshake Protocol），它建立在 SSL 记录协议之上，用于在实际的数据传输开始前，通讯双方进行身份认证、协商加密算法、交换加密密钥等。\n\n## 二、HTTPS协议的通信过程(工作原理)？​​​​​​​​​​​​\n1. 首先客户端向服务端发起一个随机值，以及一个加密算法，\n   服务端收到后返回一个协商好的加密算法，以及另一个随机值。\n\n2. 服务端在发送一个公钥CA。\n\n3. 客户端收到以后先验证CA是否有效，如果无效则报错弹窗，有过有效则进行下一步操作。\n\n4. 客户端使用之前的两个随机值和一个预主密钥组成一个会话密钥，在通过服务端传来的公钥加密把会话密钥发送给服务端。\n\n5. 服务端收到后使用私钥解密，得到两个随机值和预主密钥，然后组装成会话密钥。\n\n6. 客户端在向服务端发起一条信息，这条信息使用会话秘钥加密，用来验证服务端时候能收到加密的信息。\n\n7. 服务端收到信息后返回一个会话秘钥加密的信息。\n\n8. 都收到以后SSL层连接建立成功。\n\n   \n## 三、既然有了HTTP又为什么要有HTTPS？（HTTPS的设计目标）\n\n1. 数据保密性：保证数据内容在传输的过程中不会被第三方查看。就像快递员传递包裹一样，都进行了封装，别人无法获知里面装了什么  。\n\n2. 数据完整性：及时发现被第三方篡改的传输内容。就像快递员虽然不知道包裹里装了什么东西，但他有可能中途掉包，数据完整性就是指如果被掉包，我们能轻松发现并拒收 。\n\n3. 身份校验安全性：保证数据到达用户期望的目的地。就像我们邮寄包裹时，虽然是一个封装好的未掉包的包裹，但必须确定这个包裹不会送错地方，通过身份校验来确保送对了地方  。\n\n## 四、HTTP 与 HTTPS  的区别\n\n1. HTTPS  协议需要到 CA （Certificate Authority，证书颁发机构）申请证书，一般免费证书较少，因而需要一定费用。(以前的网易官网是http，而网易邮箱是 https 。)\n\n2. HTTP 是超文本传输协议，信息是明文传输，HTTPS 则是具有安全性的 SSL 加密传输协议。\n\n3. HTTP 和 HTTPS 使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。\n\n4. HTTP 的连接很简单，是无状态的。HTTPS 协议是由 SSL+HTTP 协议构建的可进行加密传输、身份认证的网络协议，比 HTTP 协议安\n","source":"_posts/htttp协议.md","raw":"\n---\ntitle: HTTP和HTTPS的基本概念和区别\ntags: [telescope]\nindex_img: /img/10009.jpg\ndate: 2022-08-26\n----\n# HTTP和HTTPS的基本概念和区别\n\n## 一、HTTP和HTTPS的基本概念\n\n1. HTTP（HyperText Transfer Protocol）：超文本（文本、图片、视频、音频、css、js....）传输协议 ，它是基于请求/响应模式、应用层（TCP/IP协议）、无状态（没有记忆功能）的协议。HTTP 协议是以明文方式发送信息的，如果黑客截取了 Web 浏览器和服务器之间的传输报文，就可以直接获得其中的信息。\n\n  HTTP协议的通信过程(工作原理)？\n\n  第一步：客户端与服务器创建连接；\n\n  第二步：客户端发送请求给服务器；\n\n  第三步：服务接收处理请求并返回响应给客户端；\n\n  第四步：客户端与服务器自动断开连接；\n\n2. HTTPS（Hyper Text Transfer Protocol over SecureSocket Layer）：是以安全为目标的 HTTP 通道，是 HTTP 的安全版。HTTPS 的安全基础是 SSL。SSL 协议位于 TCP/IP 协议与各种应用层协议之间，为数据通讯提供安全支持。SSL 协议可分为两层：SSL 记录协议（SSL Record Protocol），它建立在可靠的传输协议（如TCP）之上，为高层协议提供数据封装、压缩、加密等基本功能的支持。SSL 握手协议（SSL Handshake Protocol），它建立在 SSL 记录协议之上，用于在实际的数据传输开始前，通讯双方进行身份认证、协商加密算法、交换加密密钥等。\n\n## 二、HTTPS协议的通信过程(工作原理)？​​​​​​​​​​​​\n1. 首先客户端向服务端发起一个随机值，以及一个加密算法，\n   服务端收到后返回一个协商好的加密算法，以及另一个随机值。\n\n2. 服务端在发送一个公钥CA。\n\n3. 客户端收到以后先验证CA是否有效，如果无效则报错弹窗，有过有效则进行下一步操作。\n\n4. 客户端使用之前的两个随机值和一个预主密钥组成一个会话密钥，在通过服务端传来的公钥加密把会话密钥发送给服务端。\n\n5. 服务端收到后使用私钥解密，得到两个随机值和预主密钥，然后组装成会话密钥。\n\n6. 客户端在向服务端发起一条信息，这条信息使用会话秘钥加密，用来验证服务端时候能收到加密的信息。\n\n7. 服务端收到信息后返回一个会话秘钥加密的信息。\n\n8. 都收到以后SSL层连接建立成功。\n\n   \n## 三、既然有了HTTP又为什么要有HTTPS？（HTTPS的设计目标）\n\n1. 数据保密性：保证数据内容在传输的过程中不会被第三方查看。就像快递员传递包裹一样，都进行了封装，别人无法获知里面装了什么  。\n\n2. 数据完整性：及时发现被第三方篡改的传输内容。就像快递员虽然不知道包裹里装了什么东西，但他有可能中途掉包，数据完整性就是指如果被掉包，我们能轻松发现并拒收 。\n\n3. 身份校验安全性：保证数据到达用户期望的目的地。就像我们邮寄包裹时，虽然是一个封装好的未掉包的包裹，但必须确定这个包裹不会送错地方，通过身份校验来确保送对了地方  。\n\n## 四、HTTP 与 HTTPS  的区别\n\n1. HTTPS  协议需要到 CA （Certificate Authority，证书颁发机构）申请证书，一般免费证书较少，因而需要一定费用。(以前的网易官网是http，而网易邮箱是 https 。)\n\n2. HTTP 是超文本传输协议，信息是明文传输，HTTPS 则是具有安全性的 SSL 加密传输协议。\n\n3. HTTP 和 HTTPS 使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。\n\n4. HTTP 的连接很简单，是无状态的。HTTPS 协议是由 SSL+HTTP 协议构建的可进行加密传输、身份认证的网络协议，比 HTTP 协议安\n","slug":"htttp协议","published":1,"updated":"2023-02-18T03:50:12.651Z","_id":"cl79kecij0007bwsv582f6byt","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"HTTP和HTTPS的基本概念和区别\"><a href=\"#HTTP和HTTPS的基本概念和区别\" class=\"headerlink\" title=\"HTTP和HTTPS的基本概念和区别\"></a>HTTP和HTTPS的基本概念和区别</h1><h2 id=\"一、HTTP和HTTPS的基本概念\"><a href=\"#一、HTTP和HTTPS的基本概念\" class=\"headerlink\" title=\"一、HTTP和HTTPS的基本概念\"></a>一、HTTP和HTTPS的基本概念</h2><ol>\n<li>HTTP（HyperText Transfer Protocol）：超文本（文本、图片、视频、音频、css、js….）传输协议 ，它是基于请求&#x2F;响应模式、应用层（TCP&#x2F;IP协议）、无状态（没有记忆功能）的协议。HTTP 协议是以明文方式发送信息的，如果黑客截取了 Web 浏览器和服务器之间的传输报文，就可以直接获得其中的信息。</li>\n</ol>\n<p>  HTTP协议的通信过程(工作原理)？</p>\n<p>  第一步：客户端与服务器创建连接；</p>\n<p>  第二步：客户端发送请求给服务器；</p>\n<p>  第三步：服务接收处理请求并返回响应给客户端；</p>\n<p>  第四步：客户端与服务器自动断开连接；</p>\n<ol start=\"2\">\n<li>HTTPS（Hyper Text Transfer Protocol over SecureSocket Layer）：是以安全为目标的 HTTP 通道，是 HTTP 的安全版。HTTPS 的安全基础是 SSL。SSL 协议位于 TCP&#x2F;IP 协议与各种应用层协议之间，为数据通讯提供安全支持。SSL 协议可分为两层：SSL 记录协议（SSL Record Protocol），它建立在可靠的传输协议（如TCP）之上，为高层协议提供数据封装、压缩、加密等基本功能的支持。SSL 握手协议（SSL Handshake Protocol），它建立在 SSL 记录协议之上，用于在实际的数据传输开始前，通讯双方进行身份认证、协商加密算法、交换加密密钥等。</li>\n</ol>\n<h2 id=\"二、HTTPS协议的通信过程-工作原理-？​​​​​​​​​​​​\"><a href=\"#二、HTTPS协议的通信过程-工作原理-？​​​​​​​​​​​​\" class=\"headerlink\" title=\"二、HTTPS协议的通信过程(工作原理)？​​​​​​​​​​​​\"></a>二、HTTPS协议的通信过程(工作原理)？​​​​​​​​​​​​</h2><ol>\n<li><p>首先客户端向服务端发起一个随机值，以及一个加密算法，<br>服务端收到后返回一个协商好的加密算法，以及另一个随机值。</p>\n</li>\n<li><p>服务端在发送一个公钥CA。</p>\n</li>\n<li><p>客户端收到以后先验证CA是否有效，如果无效则报错弹窗，有过有效则进行下一步操作。</p>\n</li>\n<li><p>客户端使用之前的两个随机值和一个预主密钥组成一个会话密钥，在通过服务端传来的公钥加密把会话密钥发送给服务端。</p>\n</li>\n<li><p>服务端收到后使用私钥解密，得到两个随机值和预主密钥，然后组装成会话密钥。</p>\n</li>\n<li><p>客户端在向服务端发起一条信息，这条信息使用会话秘钥加密，用来验证服务端时候能收到加密的信息。</p>\n</li>\n<li><p>服务端收到信息后返回一个会话秘钥加密的信息。</p>\n</li>\n<li><p>都收到以后SSL层连接建立成功。</p>\n</li>\n</ol>\n<h2 id=\"三、既然有了HTTP又为什么要有HTTPS？（HTTPS的设计目标）\"><a href=\"#三、既然有了HTTP又为什么要有HTTPS？（HTTPS的设计目标）\" class=\"headerlink\" title=\"三、既然有了HTTP又为什么要有HTTPS？（HTTPS的设计目标）\"></a>三、既然有了HTTP又为什么要有HTTPS？（HTTPS的设计目标）</h2><ol>\n<li><p>数据保密性：保证数据内容在传输的过程中不会被第三方查看。就像快递员传递包裹一样，都进行了封装，别人无法获知里面装了什么  。</p>\n</li>\n<li><p>数据完整性：及时发现被第三方篡改的传输内容。就像快递员虽然不知道包裹里装了什么东西，但他有可能中途掉包，数据完整性就是指如果被掉包，我们能轻松发现并拒收 。</p>\n</li>\n<li><p>身份校验安全性：保证数据到达用户期望的目的地。就像我们邮寄包裹时，虽然是一个封装好的未掉包的包裹，但必须确定这个包裹不会送错地方，通过身份校验来确保送对了地方  。</p>\n</li>\n</ol>\n<h2 id=\"四、HTTP-与-HTTPS-的区别\"><a href=\"#四、HTTP-与-HTTPS-的区别\" class=\"headerlink\" title=\"四、HTTP 与 HTTPS  的区别\"></a>四、HTTP 与 HTTPS  的区别</h2><ol>\n<li><p>HTTPS  协议需要到 CA （Certificate Authority，证书颁发机构）申请证书，一般免费证书较少，因而需要一定费用。(以前的网易官网是http，而网易邮箱是 https 。)</p>\n</li>\n<li><p>HTTP 是超文本传输协议，信息是明文传输，HTTPS 则是具有安全性的 SSL 加密传输协议。</p>\n</li>\n<li><p>HTTP 和 HTTPS 使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。</p>\n</li>\n<li><p>HTTP 的连接很简单，是无状态的。HTTPS 协议是由 SSL+HTTP 协议构建的可进行加密传输、身份认证的网络协议，比 HTTP 协议安</p>\n</li>\n</ol>\n","site":{"data":{}},"wordcount":1425,"excerpt":"","more":"<h1 id=\"HTTP和HTTPS的基本概念和区别\"><a href=\"#HTTP和HTTPS的基本概念和区别\" class=\"headerlink\" title=\"HTTP和HTTPS的基本概念和区别\"></a>HTTP和HTTPS的基本概念和区别</h1><h2 id=\"一、HTTP和HTTPS的基本概念\"><a href=\"#一、HTTP和HTTPS的基本概念\" class=\"headerlink\" title=\"一、HTTP和HTTPS的基本概念\"></a>一、HTTP和HTTPS的基本概念</h2><ol>\n<li>HTTP（HyperText Transfer Protocol）：超文本（文本、图片、视频、音频、css、js….）传输协议 ，它是基于请求&#x2F;响应模式、应用层（TCP&#x2F;IP协议）、无状态（没有记忆功能）的协议。HTTP 协议是以明文方式发送信息的，如果黑客截取了 Web 浏览器和服务器之间的传输报文，就可以直接获得其中的信息。</li>\n</ol>\n<p>  HTTP协议的通信过程(工作原理)？</p>\n<p>  第一步：客户端与服务器创建连接；</p>\n<p>  第二步：客户端发送请求给服务器；</p>\n<p>  第三步：服务接收处理请求并返回响应给客户端；</p>\n<p>  第四步：客户端与服务器自动断开连接；</p>\n<ol start=\"2\">\n<li>HTTPS（Hyper Text Transfer Protocol over SecureSocket Layer）：是以安全为目标的 HTTP 通道，是 HTTP 的安全版。HTTPS 的安全基础是 SSL。SSL 协议位于 TCP&#x2F;IP 协议与各种应用层协议之间，为数据通讯提供安全支持。SSL 协议可分为两层：SSL 记录协议（SSL Record Protocol），它建立在可靠的传输协议（如TCP）之上，为高层协议提供数据封装、压缩、加密等基本功能的支持。SSL 握手协议（SSL Handshake Protocol），它建立在 SSL 记录协议之上，用于在实际的数据传输开始前，通讯双方进行身份认证、协商加密算法、交换加密密钥等。</li>\n</ol>\n<h2 id=\"二、HTTPS协议的通信过程-工作原理-？​​​​​​​​​​​​\"><a href=\"#二、HTTPS协议的通信过程-工作原理-？​​​​​​​​​​​​\" class=\"headerlink\" title=\"二、HTTPS协议的通信过程(工作原理)？​​​​​​​​​​​​\"></a>二、HTTPS协议的通信过程(工作原理)？​​​​​​​​​​​​</h2><ol>\n<li><p>首先客户端向服务端发起一个随机值，以及一个加密算法，<br>服务端收到后返回一个协商好的加密算法，以及另一个随机值。</p>\n</li>\n<li><p>服务端在发送一个公钥CA。</p>\n</li>\n<li><p>客户端收到以后先验证CA是否有效，如果无效则报错弹窗，有过有效则进行下一步操作。</p>\n</li>\n<li><p>客户端使用之前的两个随机值和一个预主密钥组成一个会话密钥，在通过服务端传来的公钥加密把会话密钥发送给服务端。</p>\n</li>\n<li><p>服务端收到后使用私钥解密，得到两个随机值和预主密钥，然后组装成会话密钥。</p>\n</li>\n<li><p>客户端在向服务端发起一条信息，这条信息使用会话秘钥加密，用来验证服务端时候能收到加密的信息。</p>\n</li>\n<li><p>服务端收到信息后返回一个会话秘钥加密的信息。</p>\n</li>\n<li><p>都收到以后SSL层连接建立成功。</p>\n</li>\n</ol>\n<h2 id=\"三、既然有了HTTP又为什么要有HTTPS？（HTTPS的设计目标）\"><a href=\"#三、既然有了HTTP又为什么要有HTTPS？（HTTPS的设计目标）\" class=\"headerlink\" title=\"三、既然有了HTTP又为什么要有HTTPS？（HTTPS的设计目标）\"></a>三、既然有了HTTP又为什么要有HTTPS？（HTTPS的设计目标）</h2><ol>\n<li><p>数据保密性：保证数据内容在传输的过程中不会被第三方查看。就像快递员传递包裹一样，都进行了封装，别人无法获知里面装了什么  。</p>\n</li>\n<li><p>数据完整性：及时发现被第三方篡改的传输内容。就像快递员虽然不知道包裹里装了什么东西，但他有可能中途掉包，数据完整性就是指如果被掉包，我们能轻松发现并拒收 。</p>\n</li>\n<li><p>身份校验安全性：保证数据到达用户期望的目的地。就像我们邮寄包裹时，虽然是一个封装好的未掉包的包裹，但必须确定这个包裹不会送错地方，通过身份校验来确保送对了地方  。</p>\n</li>\n</ol>\n<h2 id=\"四、HTTP-与-HTTPS-的区别\"><a href=\"#四、HTTP-与-HTTPS-的区别\" class=\"headerlink\" title=\"四、HTTP 与 HTTPS  的区别\"></a>四、HTTP 与 HTTPS  的区别</h2><ol>\n<li><p>HTTPS  协议需要到 CA （Certificate Authority，证书颁发机构）申请证书，一般免费证书较少，因而需要一定费用。(以前的网易官网是http，而网易邮箱是 https 。)</p>\n</li>\n<li><p>HTTP 是超文本传输协议，信息是明文传输，HTTPS 则是具有安全性的 SSL 加密传输协议。</p>\n</li>\n<li><p>HTTP 和 HTTPS 使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。</p>\n</li>\n<li><p>HTTP 的连接很简单，是无状态的。HTTPS 协议是由 SSL+HTTP 协议构建的可进行加密传输、身份认证的网络协议，比 HTTP 协议安</p>\n</li>\n</ol>\n"},{"title":"宝塔部署前后端分离Vue项目","index_img":"/img/bt.png","date":"2022-08-24T16:00:00.000Z","_content":"# 宝塔部署前后端Vue项目\n---\n## 一、准备工作\n\n1. 在云服务器控制台，远程连接实例，在shell命令行中输入:\n\n/etc/init.d/bt default （默认连接）\n\n2. 进入宝塔面板网站，输入账号密码，进入宝塔控制台。https://www.bt.cn/new/download.html\n\n3. 在软件商店中下载PM2管理器，安装好之后再设置中选择合适的Node.js版本。\n\n4. 在宝塔面板 --> 安全 -->放行端口，放行前端和后端的端口号。\n\n## 二、导入文件\n\n5. 通过宝塔面板的文件栏，找到 /www/wwwroot 目录下，将后端项目压缩包，解压到该目录下。再进入到 /www/wwwroot/http 目录下，将前端项目的dist包，解压到该目录下，即可。\n\n6. 温馨提示：dist包可以通过前端项目 npm run build 自动打包生成哦。\n\n7. SQL数据库文件导入，在面版 --> 数据库 -->下载phpMYAdmin（管理MySQL数据库的），点击添加数据库，将自己的数据库文件导入即可。\n\n## 三、启动后端项目 \n\n8. 在面板 --> 终端中输入 cd /www/wwwroot/后端项目 ，进入后端文件夹，输入：\n\n9. npm start  （运行后端项目）\n\n  就这样，前后端分离Vue项目部署完成了。\n\n\n## 可能遇到的问题：\n\n* 比如端口号占用，可以通过在终端中输入以下命令。\n\nnetstat -nap | grep 3000 （可以查看3000端口的占用情况）。\n\n kill -9 2048482 （可杀掉占用端口号的进程），其中2048482为占用端口的PID号。\n\n * 再进行启动后端项目的npm start,就可以正常启动后端项目了。\n\n\n\n","source":"_posts/宝塔部署前后端分离Vue项目.md","raw":"\n---\ntitle: 宝塔部署前后端分离Vue项目\ntags: [telescope]\nindex_img: /img/bt.png\ndate: 2022-08-25 \n---\n# 宝塔部署前后端Vue项目\n---\n## 一、准备工作\n\n1. 在云服务器控制台，远程连接实例，在shell命令行中输入:\n\n/etc/init.d/bt default （默认连接）\n\n2. 进入宝塔面板网站，输入账号密码，进入宝塔控制台。https://www.bt.cn/new/download.html\n\n3. 在软件商店中下载PM2管理器，安装好之后再设置中选择合适的Node.js版本。\n\n4. 在宝塔面板 --> 安全 -->放行端口，放行前端和后端的端口号。\n\n## 二、导入文件\n\n5. 通过宝塔面板的文件栏，找到 /www/wwwroot 目录下，将后端项目压缩包，解压到该目录下。再进入到 /www/wwwroot/http 目录下，将前端项目的dist包，解压到该目录下，即可。\n\n6. 温馨提示：dist包可以通过前端项目 npm run build 自动打包生成哦。\n\n7. SQL数据库文件导入，在面版 --> 数据库 -->下载phpMYAdmin（管理MySQL数据库的），点击添加数据库，将自己的数据库文件导入即可。\n\n## 三、启动后端项目 \n\n8. 在面板 --> 终端中输入 cd /www/wwwroot/后端项目 ，进入后端文件夹，输入：\n\n9. npm start  （运行后端项目）\n\n  就这样，前后端分离Vue项目部署完成了。\n\n\n## 可能遇到的问题：\n\n* 比如端口号占用，可以通过在终端中输入以下命令。\n\nnetstat -nap | grep 3000 （可以查看3000端口的占用情况）。\n\n kill -9 2048482 （可杀掉占用端口号的进程），其中2048482为占用端口的PID号。\n\n * 再进行启动后端项目的npm start,就可以正常启动后端项目了。\n\n\n\n","slug":"宝塔部署前后端分离Vue项目","published":1,"updated":"2023-02-18T04:30:06.895Z","_id":"cl7fial9i0000y4svfz85bd4k","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"宝塔部署前后端Vue项目\"><a href=\"#宝塔部署前后端Vue项目\" class=\"headerlink\" title=\"宝塔部署前后端Vue项目\"></a>宝塔部署前后端Vue项目</h1><hr>\n<h2 id=\"一、准备工作\"><a href=\"#一、准备工作\" class=\"headerlink\" title=\"一、准备工作\"></a>一、准备工作</h2><ol>\n<li>在云服务器控制台，远程连接实例，在shell命令行中输入:</li>\n</ol>\n<p>&#x2F;etc&#x2F;init.d&#x2F;bt default （默认连接）</p>\n<ol start=\"2\">\n<li><p>进入宝塔面板网站，输入账号密码，进入宝塔控制台。<a href=\"https://www.bt.cn/new/download.html\">https://www.bt.cn/new/download.html</a></p>\n</li>\n<li><p>在软件商店中下载PM2管理器，安装好之后再设置中选择合适的Node.js版本。</p>\n</li>\n<li><p>在宝塔面板 –&gt; 安全 –&gt;放行端口，放行前端和后端的端口号。</p>\n</li>\n</ol>\n<h2 id=\"二、导入文件\"><a href=\"#二、导入文件\" class=\"headerlink\" title=\"二、导入文件\"></a>二、导入文件</h2><ol start=\"5\">\n<li><p>通过宝塔面板的文件栏，找到 &#x2F;www&#x2F;wwwroot 目录下，将后端项目压缩包，解压到该目录下。再进入到 &#x2F;www&#x2F;wwwroot&#x2F;http 目录下，将前端项目的dist包，解压到该目录下，即可。</p>\n</li>\n<li><p>温馨提示：dist包可以通过前端项目 npm run build 自动打包生成哦。</p>\n</li>\n<li><p>SQL数据库文件导入，在面版 –&gt; 数据库 –&gt;下载phpMYAdmin（管理MySQL数据库的），点击添加数据库，将自己的数据库文件导入即可。</p>\n</li>\n</ol>\n<h2 id=\"三、启动后端项目\"><a href=\"#三、启动后端项目\" class=\"headerlink\" title=\"三、启动后端项目\"></a>三、启动后端项目</h2><ol start=\"8\">\n<li><p>在面板 –&gt; 终端中输入 cd &#x2F;www&#x2F;wwwroot&#x2F;后端项目 ，进入后端文件夹，输入：</p>\n</li>\n<li><p>npm start  （运行后端项目）</p>\n</li>\n</ol>\n<p>  就这样，前后端分离Vue项目部署完成了。</p>\n<h2 id=\"可能遇到的问题：\"><a href=\"#可能遇到的问题：\" class=\"headerlink\" title=\"可能遇到的问题：\"></a>可能遇到的问题：</h2><ul>\n<li>比如端口号占用，可以通过在终端中输入以下命令。</li>\n</ul>\n<p>netstat -nap | grep 3000 （可以查看3000端口的占用情况）。</p>\n<p> kill -9 2048482 （可杀掉占用端口号的进程），其中2048482为占用端口的PID号。</p>\n<ul>\n<li>再进行启动后端项目的npm start,就可以正常启动后端项目了。</li>\n</ul>\n","site":{"data":{}},"wordcount":709,"excerpt":"","more":"<h1 id=\"宝塔部署前后端Vue项目\"><a href=\"#宝塔部署前后端Vue项目\" class=\"headerlink\" title=\"宝塔部署前后端Vue项目\"></a>宝塔部署前后端Vue项目</h1><hr>\n<h2 id=\"一、准备工作\"><a href=\"#一、准备工作\" class=\"headerlink\" title=\"一、准备工作\"></a>一、准备工作</h2><ol>\n<li>在云服务器控制台，远程连接实例，在shell命令行中输入:</li>\n</ol>\n<p>&#x2F;etc&#x2F;init.d&#x2F;bt default （默认连接）</p>\n<ol start=\"2\">\n<li><p>进入宝塔面板网站，输入账号密码，进入宝塔控制台。<a href=\"https://www.bt.cn/new/download.html\">https://www.bt.cn/new/download.html</a></p>\n</li>\n<li><p>在软件商店中下载PM2管理器，安装好之后再设置中选择合适的Node.js版本。</p>\n</li>\n<li><p>在宝塔面板 –&gt; 安全 –&gt;放行端口，放行前端和后端的端口号。</p>\n</li>\n</ol>\n<h2 id=\"二、导入文件\"><a href=\"#二、导入文件\" class=\"headerlink\" title=\"二、导入文件\"></a>二、导入文件</h2><ol start=\"5\">\n<li><p>通过宝塔面板的文件栏，找到 &#x2F;www&#x2F;wwwroot 目录下，将后端项目压缩包，解压到该目录下。再进入到 &#x2F;www&#x2F;wwwroot&#x2F;http 目录下，将前端项目的dist包，解压到该目录下，即可。</p>\n</li>\n<li><p>温馨提示：dist包可以通过前端项目 npm run build 自动打包生成哦。</p>\n</li>\n<li><p>SQL数据库文件导入，在面版 –&gt; 数据库 –&gt;下载phpMYAdmin（管理MySQL数据库的），点击添加数据库，将自己的数据库文件导入即可。</p>\n</li>\n</ol>\n<h2 id=\"三、启动后端项目\"><a href=\"#三、启动后端项目\" class=\"headerlink\" title=\"三、启动后端项目\"></a>三、启动后端项目</h2><ol start=\"8\">\n<li><p>在面板 –&gt; 终端中输入 cd &#x2F;www&#x2F;wwwroot&#x2F;后端项目 ，进入后端文件夹，输入：</p>\n</li>\n<li><p>npm start  （运行后端项目）</p>\n</li>\n</ol>\n<p>  就这样，前后端分离Vue项目部署完成了。</p>\n<h2 id=\"可能遇到的问题：\"><a href=\"#可能遇到的问题：\" class=\"headerlink\" title=\"可能遇到的问题：\"></a>可能遇到的问题：</h2><ul>\n<li>比如端口号占用，可以通过在终端中输入以下命令。</li>\n</ul>\n<p>netstat -nap | grep 3000 （可以查看3000端口的占用情况）。</p>\n<p> kill -9 2048482 （可杀掉占用端口号的进程），其中2048482为占用端口的PID号。</p>\n<ul>\n<li>再进行启动后端项目的npm start,就可以正常启动后端项目了。</li>\n</ul>\n"},{"title":"vue 的生命周期","index_img":"/img/sm.png","date":"2022-08-29T16:00:00.000Z","_content":"# vue 的生命周期\n\n  * 生命周期是指 vue 实例对象从创建之初到销毁的过程，vue 的所有功能都是围绕生命周期进行的，在生命周期的不同阶段调用不同的钩子函数来实现组建的数据管理和DOM渲染。\n\n## 一、创建前（beforeCreate）\n\n1. 此阶段为实例化初始后，此时数据观察和事件机制都没有形成，不能获取 DOM 节点。\n\n## 二、 创建后（created）\n\n1. 在这一步，实例已完成以下配置：数据观测、属性和方法的运算，watch/event事件回调，完成了data 数据的初始化，$el还没有。\n2. 然而，挂载阶段还没有开始, $el属性目前不可见，这是一个常用的生命周期，因为你可以调用methods中的方法，改变data中的数据，并且修改可以通过vue的响应式绑定体现在页面上，，获取    computed中的计算属性等等。\n3. 通常我们可以在这里对实例进行预处理，也有一些人喜欢在这里发ajax请求，值得注意的是，这个周期中是没有什么方法来对实例化过程进行拦截的，因此假如有某些数据必须获取才允许进入页面的话，并不适合在这个方法发请求，建议在组件路由钩子beforeRouteEnter中完成比较好。\n\n## 三、载入前（beforeMount）\n1. 挂载开始之前被调用，相关的render函数首次被调用（虚拟DOM），实例已完成以下的配置： 编译模板，把data里面的数据和模板生成html，完成了el和data 初始化，注意的是此时还没有挂在html到页面上。\n\n## 四、载入后（mounted） \n\n1. 挂载完成，也就是模板中的HTML渲染到页面中，此时一般可以做一些ajax操作，mounted只会执行一次。\n\n## 五、更新前（beforeUpdate）\n\n1. 在数据更新之前被调用，发生在虚拟DOM重新渲染和打补丁之前，可以在该钩子函数中进一步地更改状态，不会触发附加的重复渲染过程。\n\n## 六、更新后（updated）\n\n1. 当data中定义的数据有变化时就会加载updated方法。\n\n## 七、销毁前（beforeDestroy）\n\n1. 这一步还可以用this来获取实例，一般在这一步做一些重置的操作，比如清除掉组件中的定时器 和 监听的dom事件等。\n\n## 八、销毁后(destroyed)\n\n1. 在实例销毁之后调用，调用后，所有的事件监听器均会被移除，所有的子实例也会被销毁，该钩子在服务器端渲染期间不被调用。\n\n* 总结：vue的生命周期的思想贯穿在组件开发的始终，通过熟悉其生命周期调用不同的钩子函数，我们可以准确的控制数据流和其对DOM的影响；vue生命周期的思想是Vnode和MVVM的生动体现和继承。\n\n\n \n\n\n\n","source":"_posts/vue 的生命周期.md","raw":"\n---\ntitle:  vue 的生命周期\ntags: [telescope]\nindex_img: /img/sm.png\ndate: 2022-08-30\n---\n# vue 的生命周期\n\n  * 生命周期是指 vue 实例对象从创建之初到销毁的过程，vue 的所有功能都是围绕生命周期进行的，在生命周期的不同阶段调用不同的钩子函数来实现组建的数据管理和DOM渲染。\n\n## 一、创建前（beforeCreate）\n\n1. 此阶段为实例化初始后，此时数据观察和事件机制都没有形成，不能获取 DOM 节点。\n\n## 二、 创建后（created）\n\n1. 在这一步，实例已完成以下配置：数据观测、属性和方法的运算，watch/event事件回调，完成了data 数据的初始化，$el还没有。\n2. 然而，挂载阶段还没有开始, $el属性目前不可见，这是一个常用的生命周期，因为你可以调用methods中的方法，改变data中的数据，并且修改可以通过vue的响应式绑定体现在页面上，，获取    computed中的计算属性等等。\n3. 通常我们可以在这里对实例进行预处理，也有一些人喜欢在这里发ajax请求，值得注意的是，这个周期中是没有什么方法来对实例化过程进行拦截的，因此假如有某些数据必须获取才允许进入页面的话，并不适合在这个方法发请求，建议在组件路由钩子beforeRouteEnter中完成比较好。\n\n## 三、载入前（beforeMount）\n1. 挂载开始之前被调用，相关的render函数首次被调用（虚拟DOM），实例已完成以下的配置： 编译模板，把data里面的数据和模板生成html，完成了el和data 初始化，注意的是此时还没有挂在html到页面上。\n\n## 四、载入后（mounted） \n\n1. 挂载完成，也就是模板中的HTML渲染到页面中，此时一般可以做一些ajax操作，mounted只会执行一次。\n\n## 五、更新前（beforeUpdate）\n\n1. 在数据更新之前被调用，发生在虚拟DOM重新渲染和打补丁之前，可以在该钩子函数中进一步地更改状态，不会触发附加的重复渲染过程。\n\n## 六、更新后（updated）\n\n1. 当data中定义的数据有变化时就会加载updated方法。\n\n## 七、销毁前（beforeDestroy）\n\n1. 这一步还可以用this来获取实例，一般在这一步做一些重置的操作，比如清除掉组件中的定时器 和 监听的dom事件等。\n\n## 八、销毁后(destroyed)\n\n1. 在实例销毁之后调用，调用后，所有的事件监听器均会被移除，所有的子实例也会被销毁，该钩子在服务器端渲染期间不被调用。\n\n* 总结：vue的生命周期的思想贯穿在组件开发的始终，通过熟悉其生命周期调用不同的钩子函数，我们可以准确的控制数据流和其对DOM的影响；vue生命周期的思想是Vnode和MVVM的生动体现和继承。\n\n\n \n\n\n\n","slug":"vue 的生命周期","published":1,"updated":"2023-02-18T03:58:14.302Z","_id":"cl7fihwml0002y4sv9h9c04yl","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"vue-的生命周期\"><a href=\"#vue-的生命周期\" class=\"headerlink\" title=\"vue 的生命周期\"></a>vue 的生命周期</h1><ul>\n<li>生命周期是指 vue 实例对象从创建之初到销毁的过程，vue 的所有功能都是围绕生命周期进行的，在生命周期的不同阶段调用不同的钩子函数来实现组建的数据管理和DOM渲染。</li>\n</ul>\n<h2 id=\"一、创建前（beforeCreate）\"><a href=\"#一、创建前（beforeCreate）\" class=\"headerlink\" title=\"一、创建前（beforeCreate）\"></a>一、创建前（beforeCreate）</h2><ol>\n<li>此阶段为实例化初始后，此时数据观察和事件机制都没有形成，不能获取 DOM 节点。</li>\n</ol>\n<h2 id=\"二、-创建后（created）\"><a href=\"#二、-创建后（created）\" class=\"headerlink\" title=\"二、 创建后（created）\"></a>二、 创建后（created）</h2><ol>\n<li>在这一步，实例已完成以下配置：数据观测、属性和方法的运算，watch&#x2F;event事件回调，完成了data 数据的初始化，$el还没有。</li>\n<li>然而，挂载阶段还没有开始, $el属性目前不可见，这是一个常用的生命周期，因为你可以调用methods中的方法，改变data中的数据，并且修改可以通过vue的响应式绑定体现在页面上，，获取    computed中的计算属性等等。</li>\n<li>通常我们可以在这里对实例进行预处理，也有一些人喜欢在这里发ajax请求，值得注意的是，这个周期中是没有什么方法来对实例化过程进行拦截的，因此假如有某些数据必须获取才允许进入页面的话，并不适合在这个方法发请求，建议在组件路由钩子beforeRouteEnter中完成比较好。</li>\n</ol>\n<h2 id=\"三、载入前（beforeMount）\"><a href=\"#三、载入前（beforeMount）\" class=\"headerlink\" title=\"三、载入前（beforeMount）\"></a>三、载入前（beforeMount）</h2><ol>\n<li>挂载开始之前被调用，相关的render函数首次被调用（虚拟DOM），实例已完成以下的配置： 编译模板，把data里面的数据和模板生成html，完成了el和data 初始化，注意的是此时还没有挂在html到页面上。</li>\n</ol>\n<h2 id=\"四、载入后（mounted）\"><a href=\"#四、载入后（mounted）\" class=\"headerlink\" title=\"四、载入后（mounted）\"></a>四、载入后（mounted）</h2><ol>\n<li>挂载完成，也就是模板中的HTML渲染到页面中，此时一般可以做一些ajax操作，mounted只会执行一次。</li>\n</ol>\n<h2 id=\"五、更新前（beforeUpdate）\"><a href=\"#五、更新前（beforeUpdate）\" class=\"headerlink\" title=\"五、更新前（beforeUpdate）\"></a>五、更新前（beforeUpdate）</h2><ol>\n<li>在数据更新之前被调用，发生在虚拟DOM重新渲染和打补丁之前，可以在该钩子函数中进一步地更改状态，不会触发附加的重复渲染过程。</li>\n</ol>\n<h2 id=\"六、更新后（updated）\"><a href=\"#六、更新后（updated）\" class=\"headerlink\" title=\"六、更新后（updated）\"></a>六、更新后（updated）</h2><ol>\n<li>当data中定义的数据有变化时就会加载updated方法。</li>\n</ol>\n<h2 id=\"七、销毁前（beforeDestroy）\"><a href=\"#七、销毁前（beforeDestroy）\" class=\"headerlink\" title=\"七、销毁前（beforeDestroy）\"></a>七、销毁前（beforeDestroy）</h2><ol>\n<li>这一步还可以用this来获取实例，一般在这一步做一些重置的操作，比如清除掉组件中的定时器 和 监听的dom事件等。</li>\n</ol>\n<h2 id=\"八、销毁后-destroyed\"><a href=\"#八、销毁后-destroyed\" class=\"headerlink\" title=\"八、销毁后(destroyed)\"></a>八、销毁后(destroyed)</h2><ol>\n<li>在实例销毁之后调用，调用后，所有的事件监听器均会被移除，所有的子实例也会被销毁，该钩子在服务器端渲染期间不被调用。</li>\n</ol>\n<ul>\n<li>总结：vue的生命周期的思想贯穿在组件开发的始终，通过熟悉其生命周期调用不同的钩子函数，我们可以准确的控制数据流和其对DOM的影响；vue生命周期的思想是Vnode和MVVM的生动体现和继承。</li>\n</ul>\n","site":{"data":{}},"wordcount":1034,"excerpt":"","more":"<h1 id=\"vue-的生命周期\"><a href=\"#vue-的生命周期\" class=\"headerlink\" title=\"vue 的生命周期\"></a>vue 的生命周期</h1><ul>\n<li>生命周期是指 vue 实例对象从创建之初到销毁的过程，vue 的所有功能都是围绕生命周期进行的，在生命周期的不同阶段调用不同的钩子函数来实现组建的数据管理和DOM渲染。</li>\n</ul>\n<h2 id=\"一、创建前（beforeCreate）\"><a href=\"#一、创建前（beforeCreate）\" class=\"headerlink\" title=\"一、创建前（beforeCreate）\"></a>一、创建前（beforeCreate）</h2><ol>\n<li>此阶段为实例化初始后，此时数据观察和事件机制都没有形成，不能获取 DOM 节点。</li>\n</ol>\n<h2 id=\"二、-创建后（created）\"><a href=\"#二、-创建后（created）\" class=\"headerlink\" title=\"二、 创建后（created）\"></a>二、 创建后（created）</h2><ol>\n<li>在这一步，实例已完成以下配置：数据观测、属性和方法的运算，watch&#x2F;event事件回调，完成了data 数据的初始化，$el还没有。</li>\n<li>然而，挂载阶段还没有开始, $el属性目前不可见，这是一个常用的生命周期，因为你可以调用methods中的方法，改变data中的数据，并且修改可以通过vue的响应式绑定体现在页面上，，获取    computed中的计算属性等等。</li>\n<li>通常我们可以在这里对实例进行预处理，也有一些人喜欢在这里发ajax请求，值得注意的是，这个周期中是没有什么方法来对实例化过程进行拦截的，因此假如有某些数据必须获取才允许进入页面的话，并不适合在这个方法发请求，建议在组件路由钩子beforeRouteEnter中完成比较好。</li>\n</ol>\n<h2 id=\"三、载入前（beforeMount）\"><a href=\"#三、载入前（beforeMount）\" class=\"headerlink\" title=\"三、载入前（beforeMount）\"></a>三、载入前（beforeMount）</h2><ol>\n<li>挂载开始之前被调用，相关的render函数首次被调用（虚拟DOM），实例已完成以下的配置： 编译模板，把data里面的数据和模板生成html，完成了el和data 初始化，注意的是此时还没有挂在html到页面上。</li>\n</ol>\n<h2 id=\"四、载入后（mounted）\"><a href=\"#四、载入后（mounted）\" class=\"headerlink\" title=\"四、载入后（mounted）\"></a>四、载入后（mounted）</h2><ol>\n<li>挂载完成，也就是模板中的HTML渲染到页面中，此时一般可以做一些ajax操作，mounted只会执行一次。</li>\n</ol>\n<h2 id=\"五、更新前（beforeUpdate）\"><a href=\"#五、更新前（beforeUpdate）\" class=\"headerlink\" title=\"五、更新前（beforeUpdate）\"></a>五、更新前（beforeUpdate）</h2><ol>\n<li>在数据更新之前被调用，发生在虚拟DOM重新渲染和打补丁之前，可以在该钩子函数中进一步地更改状态，不会触发附加的重复渲染过程。</li>\n</ol>\n<h2 id=\"六、更新后（updated）\"><a href=\"#六、更新后（updated）\" class=\"headerlink\" title=\"六、更新后（updated）\"></a>六、更新后（updated）</h2><ol>\n<li>当data中定义的数据有变化时就会加载updated方法。</li>\n</ol>\n<h2 id=\"七、销毁前（beforeDestroy）\"><a href=\"#七、销毁前（beforeDestroy）\" class=\"headerlink\" title=\"七、销毁前（beforeDestroy）\"></a>七、销毁前（beforeDestroy）</h2><ol>\n<li>这一步还可以用this来获取实例，一般在这一步做一些重置的操作，比如清除掉组件中的定时器 和 监听的dom事件等。</li>\n</ol>\n<h2 id=\"八、销毁后-destroyed\"><a href=\"#八、销毁后-destroyed\" class=\"headerlink\" title=\"八、销毁后(destroyed)\"></a>八、销毁后(destroyed)</h2><ol>\n<li>在实例销毁之后调用，调用后，所有的事件监听器均会被移除，所有的子实例也会被销毁，该钩子在服务器端渲染期间不被调用。</li>\n</ol>\n<ul>\n<li>总结：vue的生命周期的思想贯穿在组件开发的始终，通过熟悉其生命周期调用不同的钩子函数，我们可以准确的控制数据流和其对DOM的影响；vue生命周期的思想是Vnode和MVVM的生动体现和继承。</li>\n</ul>\n"},{"title":"三次握手和四次挥手","index_img":"/img/10010.jpg","date":"2022-09-04T16:00:00.000Z","_content":"# 三次握手和四次挥手\n\n\n# 三次握手\n\n* 三次握手（Three-way Handshake）其实就是指建立一个TCP连接时，需要客户端和服务器总共发送3个包。进行三次握手的主要作用就是为了确认双方的接收能力和发送能力是否正常、指定自己的初始化序列号为后面的可靠性传送做准备。实质上其实就是连接服务器指定端口，建立TCP连接，并同步连接双方的序列号和确认号，交换TCP窗口大小信息。\n\n* 刚开始客户端处于 Closed 的状态，服务端处于 Listen 状态。\n进行三次握手：\n\n### 第一次握手：\n1. 客户端给服务端发一个 SYN 报文，并指明客户端的初始化序列号 ISN。此时客户端处于 SYN_SENT 状态。\n\n    首部的同步位SYN=1，初始序号seq=x，SYN=1的报文段不能携带数据，但要消耗掉一个序号。\n\n### 第二次握手：\n1. 服务器收到客户端的 SYN 报文之后，会以自己的 SYN 报文作为应答，并且也是指定了自己的初始化序列号 ISN(s)。\n\n2. 同时会把客户端的 ISN + 1 作为ACK 的值，表示自己已经收到了客户端的 SYN，此时服务器处于 SYN_RCVD 的状态。\n\n3. 在确认报文段中SYN=1，ACK=1，确认号ack=x+1，初始序号seq=y。\n\n### 第三次握手：\n1. 客户端收到 SYN 报文之后，会发送一个 ACK 报文，当然，也是一样把服务器的 ISN + 1 作为 ACK 的值，表示已经收到了服务端的 SYN 报文，此时客户端处于 ESTABLISHED 状态。\n\n2.  服务器收到 ACK 报文之后，也处于 ESTABLISHED 状态，此时，双方已建立起了连接。\n\n3.  确认报文段ACK=1，确认号ack=y+1，序号seq=x+1（初始为seq=x，第二个报文段所以要+1），ACK报文段可以携带数据，不携带数据则不消耗序号。\n\n4. 发送第一个SYN的一端将执行主动打开（active open），接收这个SYN并发回下一个SYN的另一端执行被动打开（passive open）。\n   在socket编程中，客户端执行connect()时，将触发三次握手。\n\n\n# 四次挥手\n\n* 建立一个连接需要三次握手，而终止一个连接要经过四次挥手（也有将四次挥手叫做四次握手的）。这由TCP的半关闭（half-close）造成的。所谓的半关闭，其实就是TCP提供了连接的一端在结束它的发送后还能接收来自另一端数据的能力。\n\n* TCP 连接的拆除需要发送四个包，因此称为四次挥手(Four-way handshake)，客户端或服务端均可主动发起挥手动作。\n\n* 刚开始双方都处于ESTABLISHED 状态，假如是客户端先发起关闭请求。四次挥手的过程如下：\n\n### 第一次挥手：\n  1. 客户端发送一个 FIN 报文，报文中会指定一个序列号。此时客户端处于 FIN_WAIT1 状态。\n  2. 即发出连接释放报文段（FIN=1，序号seq=u），并停止再发送数据，主动关闭TCP连接，进入FIN_WAIT1（终止等待1）状态，等待服务端的确认。\n### 第二次挥手：\n  1. 服务端收到 FIN 之后，会发送 ACK 报文，且把客户端的序列号值 +1 作为 ACK 报文的序列号值，表明已经收到客户端的报文了，此时服务端处于 CLOSE_WAIT 状态。\n  2. 即服务端收到连接释放报文段后即发出确认报文段（ACK=1，确认号ack=u+1，序号seq=v），服务端进入CLOSE_WAIT（关闭等待）状态，此时的TCP处于半关闭状态，客户端到服务端的连接释放。\n  3. 客户端收到服务端的确认后，进入FIN_WAIT2（终止等待2）状态，等待服务端发出的连接释放报文段。\n### 第三次挥手：\n  1. 如果服务端也想断开连接了，和客户端的第一次挥手一样，发给 FIN 报文，且指定一个序列号。此时服务端处于 LAST_ACK 的状态。\n  2. 即服务端没有要向客户端发出的数据，服务端发出连接释放报文段（FIN=1，ACK=1，序号seq=w，确认号ack=u+1），服务端进入LAST_ACK（最后确认）状态，等待客户端的确认。\n### 第四次挥手：\n  1. 客户端收到 FIN 之后，一样发送一个 ACK 报文作为应答，且把服务端的序列号值 +1 作为自己 ACK 报文的序列号值，此时客户端处于 TIME_WAIT 状态。\n  2. 需要过一阵子以确保服务端收到自己的 ACK 报文之后才会进入 CLOSED 状态，服务端收到 ACK 报文之后，就处于关闭连接了，处于 CLOSED 状态。\n  3. 即客户端收到服务端的连接释放报文段后，对此发出确认报文段（ACK=1，seq=u+1，ack=w+1），客户端进入TIME_WAIT（时间等待）状态。此时TCP未释放掉，需要经过时间等待计时器设置的时间2MSL后，客户端才进入CLOSED状态。\n\n\n\n \n\n\n\n","source":"_posts/三次握手和四次挥手.md","raw":"\n---\ntitle:  三次握手和四次挥手\ntags: [telescope]\nindex_img: /img/10010.jpg\ndate: 2022-09-05 \n---\n# 三次握手和四次挥手\n\n\n# 三次握手\n\n* 三次握手（Three-way Handshake）其实就是指建立一个TCP连接时，需要客户端和服务器总共发送3个包。进行三次握手的主要作用就是为了确认双方的接收能力和发送能力是否正常、指定自己的初始化序列号为后面的可靠性传送做准备。实质上其实就是连接服务器指定端口，建立TCP连接，并同步连接双方的序列号和确认号，交换TCP窗口大小信息。\n\n* 刚开始客户端处于 Closed 的状态，服务端处于 Listen 状态。\n进行三次握手：\n\n### 第一次握手：\n1. 客户端给服务端发一个 SYN 报文，并指明客户端的初始化序列号 ISN。此时客户端处于 SYN_SENT 状态。\n\n    首部的同步位SYN=1，初始序号seq=x，SYN=1的报文段不能携带数据，但要消耗掉一个序号。\n\n### 第二次握手：\n1. 服务器收到客户端的 SYN 报文之后，会以自己的 SYN 报文作为应答，并且也是指定了自己的初始化序列号 ISN(s)。\n\n2. 同时会把客户端的 ISN + 1 作为ACK 的值，表示自己已经收到了客户端的 SYN，此时服务器处于 SYN_RCVD 的状态。\n\n3. 在确认报文段中SYN=1，ACK=1，确认号ack=x+1，初始序号seq=y。\n\n### 第三次握手：\n1. 客户端收到 SYN 报文之后，会发送一个 ACK 报文，当然，也是一样把服务器的 ISN + 1 作为 ACK 的值，表示已经收到了服务端的 SYN 报文，此时客户端处于 ESTABLISHED 状态。\n\n2.  服务器收到 ACK 报文之后，也处于 ESTABLISHED 状态，此时，双方已建立起了连接。\n\n3.  确认报文段ACK=1，确认号ack=y+1，序号seq=x+1（初始为seq=x，第二个报文段所以要+1），ACK报文段可以携带数据，不携带数据则不消耗序号。\n\n4. 发送第一个SYN的一端将执行主动打开（active open），接收这个SYN并发回下一个SYN的另一端执行被动打开（passive open）。\n   在socket编程中，客户端执行connect()时，将触发三次握手。\n\n\n# 四次挥手\n\n* 建立一个连接需要三次握手，而终止一个连接要经过四次挥手（也有将四次挥手叫做四次握手的）。这由TCP的半关闭（half-close）造成的。所谓的半关闭，其实就是TCP提供了连接的一端在结束它的发送后还能接收来自另一端数据的能力。\n\n* TCP 连接的拆除需要发送四个包，因此称为四次挥手(Four-way handshake)，客户端或服务端均可主动发起挥手动作。\n\n* 刚开始双方都处于ESTABLISHED 状态，假如是客户端先发起关闭请求。四次挥手的过程如下：\n\n### 第一次挥手：\n  1. 客户端发送一个 FIN 报文，报文中会指定一个序列号。此时客户端处于 FIN_WAIT1 状态。\n  2. 即发出连接释放报文段（FIN=1，序号seq=u），并停止再发送数据，主动关闭TCP连接，进入FIN_WAIT1（终止等待1）状态，等待服务端的确认。\n### 第二次挥手：\n  1. 服务端收到 FIN 之后，会发送 ACK 报文，且把客户端的序列号值 +1 作为 ACK 报文的序列号值，表明已经收到客户端的报文了，此时服务端处于 CLOSE_WAIT 状态。\n  2. 即服务端收到连接释放报文段后即发出确认报文段（ACK=1，确认号ack=u+1，序号seq=v），服务端进入CLOSE_WAIT（关闭等待）状态，此时的TCP处于半关闭状态，客户端到服务端的连接释放。\n  3. 客户端收到服务端的确认后，进入FIN_WAIT2（终止等待2）状态，等待服务端发出的连接释放报文段。\n### 第三次挥手：\n  1. 如果服务端也想断开连接了，和客户端的第一次挥手一样，发给 FIN 报文，且指定一个序列号。此时服务端处于 LAST_ACK 的状态。\n  2. 即服务端没有要向客户端发出的数据，服务端发出连接释放报文段（FIN=1，ACK=1，序号seq=w，确认号ack=u+1），服务端进入LAST_ACK（最后确认）状态，等待客户端的确认。\n### 第四次挥手：\n  1. 客户端收到 FIN 之后，一样发送一个 ACK 报文作为应答，且把服务端的序列号值 +1 作为自己 ACK 报文的序列号值，此时客户端处于 TIME_WAIT 状态。\n  2. 需要过一阵子以确保服务端收到自己的 ACK 报文之后才会进入 CLOSED 状态，服务端收到 ACK 报文之后，就处于关闭连接了，处于 CLOSED 状态。\n  3. 即客户端收到服务端的连接释放报文段后，对此发出确认报文段（ACK=1，seq=u+1，ack=w+1），客户端进入TIME_WAIT（时间等待）状态。此时TCP未释放掉，需要经过时间等待计时器设置的时间2MSL后，客户端才进入CLOSED状态。\n\n\n\n \n\n\n\n","slug":"三次握手和四次挥手","published":1,"updated":"2023-02-18T03:26:16.408Z","_id":"cl7fj93m800016csvg1md4wrm","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"三次握手和四次挥手\"><a href=\"#三次握手和四次挥手\" class=\"headerlink\" title=\"三次握手和四次挥手\"></a>三次握手和四次挥手</h1><h1 id=\"三次握手\"><a href=\"#三次握手\" class=\"headerlink\" title=\"三次握手\"></a>三次握手</h1><ul>\n<li><p>三次握手（Three-way Handshake）其实就是指建立一个TCP连接时，需要客户端和服务器总共发送3个包。进行三次握手的主要作用就是为了确认双方的接收能力和发送能力是否正常、指定自己的初始化序列号为后面的可靠性传送做准备。实质上其实就是连接服务器指定端口，建立TCP连接，并同步连接双方的序列号和确认号，交换TCP窗口大小信息。</p>\n</li>\n<li><p>刚开始客户端处于 Closed 的状态，服务端处于 Listen 状态。<br>进行三次握手：</p>\n</li>\n</ul>\n<h3 id=\"第一次握手：\"><a href=\"#第一次握手：\" class=\"headerlink\" title=\"第一次握手：\"></a>第一次握手：</h3><ol>\n<li><p>客户端给服务端发一个 SYN 报文，并指明客户端的初始化序列号 ISN。此时客户端处于 SYN_SENT 状态。</p>\n<p> 首部的同步位SYN&#x3D;1，初始序号seq&#x3D;x，SYN&#x3D;1的报文段不能携带数据，但要消耗掉一个序号。</p>\n</li>\n</ol>\n<h3 id=\"第二次握手：\"><a href=\"#第二次握手：\" class=\"headerlink\" title=\"第二次握手：\"></a>第二次握手：</h3><ol>\n<li><p>服务器收到客户端的 SYN 报文之后，会以自己的 SYN 报文作为应答，并且也是指定了自己的初始化序列号 ISN(s)。</p>\n</li>\n<li><p>同时会把客户端的 ISN + 1 作为ACK 的值，表示自己已经收到了客户端的 SYN，此时服务器处于 SYN_RCVD 的状态。</p>\n</li>\n<li><p>在确认报文段中SYN&#x3D;1，ACK&#x3D;1，确认号ack&#x3D;x+1，初始序号seq&#x3D;y。</p>\n</li>\n</ol>\n<h3 id=\"第三次握手：\"><a href=\"#第三次握手：\" class=\"headerlink\" title=\"第三次握手：\"></a>第三次握手：</h3><ol>\n<li><p>客户端收到 SYN 报文之后，会发送一个 ACK 报文，当然，也是一样把服务器的 ISN + 1 作为 ACK 的值，表示已经收到了服务端的 SYN 报文，此时客户端处于 ESTABLISHED 状态。</p>\n</li>\n<li><p>服务器收到 ACK 报文之后，也处于 ESTABLISHED 状态，此时，双方已建立起了连接。</p>\n</li>\n<li><p>确认报文段ACK&#x3D;1，确认号ack&#x3D;y+1，序号seq&#x3D;x+1（初始为seq&#x3D;x，第二个报文段所以要+1），ACK报文段可以携带数据，不携带数据则不消耗序号。</p>\n</li>\n<li><p>发送第一个SYN的一端将执行主动打开（active open），接收这个SYN并发回下一个SYN的另一端执行被动打开（passive open）。<br>在socket编程中，客户端执行connect()时，将触发三次握手。</p>\n</li>\n</ol>\n<h1 id=\"四次挥手\"><a href=\"#四次挥手\" class=\"headerlink\" title=\"四次挥手\"></a>四次挥手</h1><ul>\n<li><p>建立一个连接需要三次握手，而终止一个连接要经过四次挥手（也有将四次挥手叫做四次握手的）。这由TCP的半关闭（half-close）造成的。所谓的半关闭，其实就是TCP提供了连接的一端在结束它的发送后还能接收来自另一端数据的能力。</p>\n</li>\n<li><p>TCP 连接的拆除需要发送四个包，因此称为四次挥手(Four-way handshake)，客户端或服务端均可主动发起挥手动作。</p>\n</li>\n<li><p>刚开始双方都处于ESTABLISHED 状态，假如是客户端先发起关闭请求。四次挥手的过程如下：</p>\n</li>\n</ul>\n<h3 id=\"第一次挥手：\"><a href=\"#第一次挥手：\" class=\"headerlink\" title=\"第一次挥手：\"></a>第一次挥手：</h3><ol>\n<li>客户端发送一个 FIN 报文，报文中会指定一个序列号。此时客户端处于 FIN_WAIT1 状态。</li>\n<li>即发出连接释放报文段（FIN&#x3D;1，序号seq&#x3D;u），并停止再发送数据，主动关闭TCP连接，进入FIN_WAIT1（终止等待1）状态，等待服务端的确认。</li>\n</ol>\n<h3 id=\"第二次挥手：\"><a href=\"#第二次挥手：\" class=\"headerlink\" title=\"第二次挥手：\"></a>第二次挥手：</h3><ol>\n<li>服务端收到 FIN 之后，会发送 ACK 报文，且把客户端的序列号值 +1 作为 ACK 报文的序列号值，表明已经收到客户端的报文了，此时服务端处于 CLOSE_WAIT 状态。</li>\n<li>即服务端收到连接释放报文段后即发出确认报文段（ACK&#x3D;1，确认号ack&#x3D;u+1，序号seq&#x3D;v），服务端进入CLOSE_WAIT（关闭等待）状态，此时的TCP处于半关闭状态，客户端到服务端的连接释放。</li>\n<li>客户端收到服务端的确认后，进入FIN_WAIT2（终止等待2）状态，等待服务端发出的连接释放报文段。</li>\n</ol>\n<h3 id=\"第三次挥手：\"><a href=\"#第三次挥手：\" class=\"headerlink\" title=\"第三次挥手：\"></a>第三次挥手：</h3><ol>\n<li>如果服务端也想断开连接了，和客户端的第一次挥手一样，发给 FIN 报文，且指定一个序列号。此时服务端处于 LAST_ACK 的状态。</li>\n<li>即服务端没有要向客户端发出的数据，服务端发出连接释放报文段（FIN&#x3D;1，ACK&#x3D;1，序号seq&#x3D;w，确认号ack&#x3D;u+1），服务端进入LAST_ACK（最后确认）状态，等待客户端的确认。</li>\n</ol>\n<h3 id=\"第四次挥手：\"><a href=\"#第四次挥手：\" class=\"headerlink\" title=\"第四次挥手：\"></a>第四次挥手：</h3><ol>\n<li>客户端收到 FIN 之后，一样发送一个 ACK 报文作为应答，且把服务端的序列号值 +1 作为自己 ACK 报文的序列号值，此时客户端处于 TIME_WAIT 状态。</li>\n<li>需要过一阵子以确保服务端收到自己的 ACK 报文之后才会进入 CLOSED 状态，服务端收到 ACK 报文之后，就处于关闭连接了，处于 CLOSED 状态。</li>\n<li>即客户端收到服务端的连接释放报文段后，对此发出确认报文段（ACK&#x3D;1，seq&#x3D;u+1，ack&#x3D;w+1），客户端进入TIME_WAIT（时间等待）状态。此时TCP未释放掉，需要经过时间等待计时器设置的时间2MSL后，客户端才进入CLOSED状态。</li>\n</ol>\n","site":{"data":{}},"wordcount":1937,"excerpt":"","more":"<h1 id=\"三次握手和四次挥手\"><a href=\"#三次握手和四次挥手\" class=\"headerlink\" title=\"三次握手和四次挥手\"></a>三次握手和四次挥手</h1><h1 id=\"三次握手\"><a href=\"#三次握手\" class=\"headerlink\" title=\"三次握手\"></a>三次握手</h1><ul>\n<li><p>三次握手（Three-way Handshake）其实就是指建立一个TCP连接时，需要客户端和服务器总共发送3个包。进行三次握手的主要作用就是为了确认双方的接收能力和发送能力是否正常、指定自己的初始化序列号为后面的可靠性传送做准备。实质上其实就是连接服务器指定端口，建立TCP连接，并同步连接双方的序列号和确认号，交换TCP窗口大小信息。</p>\n</li>\n<li><p>刚开始客户端处于 Closed 的状态，服务端处于 Listen 状态。<br>进行三次握手：</p>\n</li>\n</ul>\n<h3 id=\"第一次握手：\"><a href=\"#第一次握手：\" class=\"headerlink\" title=\"第一次握手：\"></a>第一次握手：</h3><ol>\n<li><p>客户端给服务端发一个 SYN 报文，并指明客户端的初始化序列号 ISN。此时客户端处于 SYN_SENT 状态。</p>\n<p> 首部的同步位SYN&#x3D;1，初始序号seq&#x3D;x，SYN&#x3D;1的报文段不能携带数据，但要消耗掉一个序号。</p>\n</li>\n</ol>\n<h3 id=\"第二次握手：\"><a href=\"#第二次握手：\" class=\"headerlink\" title=\"第二次握手：\"></a>第二次握手：</h3><ol>\n<li><p>服务器收到客户端的 SYN 报文之后，会以自己的 SYN 报文作为应答，并且也是指定了自己的初始化序列号 ISN(s)。</p>\n</li>\n<li><p>同时会把客户端的 ISN + 1 作为ACK 的值，表示自己已经收到了客户端的 SYN，此时服务器处于 SYN_RCVD 的状态。</p>\n</li>\n<li><p>在确认报文段中SYN&#x3D;1，ACK&#x3D;1，确认号ack&#x3D;x+1，初始序号seq&#x3D;y。</p>\n</li>\n</ol>\n<h3 id=\"第三次握手：\"><a href=\"#第三次握手：\" class=\"headerlink\" title=\"第三次握手：\"></a>第三次握手：</h3><ol>\n<li><p>客户端收到 SYN 报文之后，会发送一个 ACK 报文，当然，也是一样把服务器的 ISN + 1 作为 ACK 的值，表示已经收到了服务端的 SYN 报文，此时客户端处于 ESTABLISHED 状态。</p>\n</li>\n<li><p>服务器收到 ACK 报文之后，也处于 ESTABLISHED 状态，此时，双方已建立起了连接。</p>\n</li>\n<li><p>确认报文段ACK&#x3D;1，确认号ack&#x3D;y+1，序号seq&#x3D;x+1（初始为seq&#x3D;x，第二个报文段所以要+1），ACK报文段可以携带数据，不携带数据则不消耗序号。</p>\n</li>\n<li><p>发送第一个SYN的一端将执行主动打开（active open），接收这个SYN并发回下一个SYN的另一端执行被动打开（passive open）。<br>在socket编程中，客户端执行connect()时，将触发三次握手。</p>\n</li>\n</ol>\n<h1 id=\"四次挥手\"><a href=\"#四次挥手\" class=\"headerlink\" title=\"四次挥手\"></a>四次挥手</h1><ul>\n<li><p>建立一个连接需要三次握手，而终止一个连接要经过四次挥手（也有将四次挥手叫做四次握手的）。这由TCP的半关闭（half-close）造成的。所谓的半关闭，其实就是TCP提供了连接的一端在结束它的发送后还能接收来自另一端数据的能力。</p>\n</li>\n<li><p>TCP 连接的拆除需要发送四个包，因此称为四次挥手(Four-way handshake)，客户端或服务端均可主动发起挥手动作。</p>\n</li>\n<li><p>刚开始双方都处于ESTABLISHED 状态，假如是客户端先发起关闭请求。四次挥手的过程如下：</p>\n</li>\n</ul>\n<h3 id=\"第一次挥手：\"><a href=\"#第一次挥手：\" class=\"headerlink\" title=\"第一次挥手：\"></a>第一次挥手：</h3><ol>\n<li>客户端发送一个 FIN 报文，报文中会指定一个序列号。此时客户端处于 FIN_WAIT1 状态。</li>\n<li>即发出连接释放报文段（FIN&#x3D;1，序号seq&#x3D;u），并停止再发送数据，主动关闭TCP连接，进入FIN_WAIT1（终止等待1）状态，等待服务端的确认。</li>\n</ol>\n<h3 id=\"第二次挥手：\"><a href=\"#第二次挥手：\" class=\"headerlink\" title=\"第二次挥手：\"></a>第二次挥手：</h3><ol>\n<li>服务端收到 FIN 之后，会发送 ACK 报文，且把客户端的序列号值 +1 作为 ACK 报文的序列号值，表明已经收到客户端的报文了，此时服务端处于 CLOSE_WAIT 状态。</li>\n<li>即服务端收到连接释放报文段后即发出确认报文段（ACK&#x3D;1，确认号ack&#x3D;u+1，序号seq&#x3D;v），服务端进入CLOSE_WAIT（关闭等待）状态，此时的TCP处于半关闭状态，客户端到服务端的连接释放。</li>\n<li>客户端收到服务端的确认后，进入FIN_WAIT2（终止等待2）状态，等待服务端发出的连接释放报文段。</li>\n</ol>\n<h3 id=\"第三次挥手：\"><a href=\"#第三次挥手：\" class=\"headerlink\" title=\"第三次挥手：\"></a>第三次挥手：</h3><ol>\n<li>如果服务端也想断开连接了，和客户端的第一次挥手一样，发给 FIN 报文，且指定一个序列号。此时服务端处于 LAST_ACK 的状态。</li>\n<li>即服务端没有要向客户端发出的数据，服务端发出连接释放报文段（FIN&#x3D;1，ACK&#x3D;1，序号seq&#x3D;w，确认号ack&#x3D;u+1），服务端进入LAST_ACK（最后确认）状态，等待客户端的确认。</li>\n</ol>\n<h3 id=\"第四次挥手：\"><a href=\"#第四次挥手：\" class=\"headerlink\" title=\"第四次挥手：\"></a>第四次挥手：</h3><ol>\n<li>客户端收到 FIN 之后，一样发送一个 ACK 报文作为应答，且把服务端的序列号值 +1 作为自己 ACK 报文的序列号值，此时客户端处于 TIME_WAIT 状态。</li>\n<li>需要过一阵子以确保服务端收到自己的 ACK 报文之后才会进入 CLOSED 状态，服务端收到 ACK 报文之后，就处于关闭连接了，处于 CLOSED 状态。</li>\n<li>即客户端收到服务端的连接释放报文段后，对此发出确认报文段（ACK&#x3D;1，seq&#x3D;u+1，ack&#x3D;w+1），客户端进入TIME_WAIT（时间等待）状态。此时TCP未释放掉，需要经过时间等待计时器设置的时间2MSL后，客户端才进入CLOSED状态。</li>\n</ol>\n"},{"title":"从输入URL到浏览器显示页面发生过程","index_img":"/img/10008.jpg","date":"2022-09-01T16:00:00.000Z","_content":"# 从输入URL到浏览器显示页面发生过程\n\n\n# 网络通信\n\n* 互联网内各网络设备间的通信都遵循TCP/IP协议，利用TCP/IP协议族进行网络通信时，会通过分层顺序与对方进行通信。分层由高到低分别为：应用层、传输层、网络层、数据链路层。发送端从应用层往下走，接收端从数据链路层网上走。·\n## 一、在浏览器中输入url\n\n1. 用户输入url，例如http://www.baidu.com。其中http为协议，www.baidu.com为网络地址，及指出需要的资源在那台计算机上。\n2. 一般网络地址可以称为域名或IP地址，此处为域名。使用域名是为了方便记忆，但是为了让计算机理解这个地址还需要把它解析为IP地址。\n## 二、 应用层DNS解析域名\n1. 客户端先检查本地是否有对应的IP地址，若找到则返回响应的IP地址。若没找到则请求上级DNS服务器，直至找到或到根节点。\n\n## 三、 应用层客户端发送HTTP请求\n1. HTTP请求包括请求报头和请求主体两个部分，其中请求报头包含了至关重要的信息，包括请求的方法（GET / POST）、目标url、遵循的协议（http / https / ftp…），返回的信息是否需要缓存，以及客户端是否发送cookie等。\n\n## 四、 传输层TCP传输报文（三次握手）\n\n1. 位于传输层的TCP协议为传输报文提供可靠的字节流服务。它为了方便传输，将大块的数据分割成以报文段为单位的数据包进行管理，并为它们编号，方便服务器接收时能准确地还原报文信息。TCP协议通过“三次握手”等方法保证传输的安全可靠。\n2. “三次握手”的过程是，发送端先发送一个带有SYN（synchronize）标志的数据包给接收端，在一定的延迟时间内等待接收的回复。接收端收到数据包后，传回一个带有SYN/ACK标志的数据包以示传达确认信息。接收方收到后再发送一个带有ACK标志的数据包给接收端以示握手成功。\n3. 在这个过程中，如果发送端在规定延迟时间内没有收到回复则默认接收方没有收到请求，而再次发送，直到收到回复为止。\n\n## 五、 网络层IP协议查询MAC地址\n\n1. IP协议的作用是把TCP分割好的各种数据包传送给接收方。而要保证确实能传到接收方还需要接收方的MAC地址，也就是物理地址。\n2. IP地址和MAC地址是一一对应的关系，一个网络设备的IP地址可以更换，但是MAC地址一般是固定不变的。ARP协议可以将IP地址解析成对应的MAC地址。\n3. 当通信的双方不在同一个局域网时，需要多次中转才能到达最终的目标，在中转的过程中需要通过下一个中转站的MAC地址来搜索下一个中转目标。\n\n## 六、 数据到达数据链路层\n\n1. 在找到对方的MAC地址后，就将数据发送到数据链路层传输。这时，客户端发送请求的阶段结束。\n\n## 七、 服务器接收数据\n\n1. 接收端的服务器在链路层接收到数据包，再层层向上直到应用层。这过程中包括在运输层通过TCP协议讲分段的数据包重新组成原来的HTTP请求报文。\n\n## 八、 服务器响应请求\n\n1. 服务接收到客户端发送的HTTP请求后，查找客户端请求的资源，并返回响应报文，响应报文中包括一个重要的信息——状态码。\n2. 状态码由三位数字组成，其中比较常见的是200 OK表示请求成功。301表示永久重定向，即请求的资源已经永久转移到新的位置。\n3. 在返回301状态码的同时，响应报文也会附带重定向的url，客户端接收到后将http请求的url做相应的改变再重新发送。404 not found 表示客户端请求的资源找不到。\n\n## 九、 服务器返回相应文件\n\n1. 请求成功后，服务器会返回相应的HTML文件。接下来就到了页面的渲染阶段了。\n\n# 页面渲染\n\n1. 现代浏览器渲染页面的过程是这样的：解析HTML以构建DOM树 –> 构建渲染树 –> 布局渲染树 –> 绘制渲染树。\n2. DOM树是由HTML文件中的标签排列组成，渲染树是在DOM树中加入CSS或HTML中的style样式而形成。渲染树只包含需要显示在页面中的DOM元素，像元素或display属性值为none的元素都不在渲染树中。\n3. 在浏览器还没接收到完整的HTML文件时，它就开始渲染页面了，在遇到外部链入的脚本标签或样式标签或图片时，会再次发送HTTP请求重复上述的步骤。\n4. 在收到CSS文件后会对已经渲染的页面重新渲染，加入它们应有的样式，图片文件加载完立刻显示在相应位置。在这一过程中可能会触发页面的重绘或重排。\n\n* 最后总结一下：\n1. 在浏览器客户端输入url后，url分为http协议和域名，先根据域名在本地查找是否有该域名对应的ip地址记录，如果没有则去DNS服务器上查找，查找到后浏览器正式发送http请求，请求到达传输层后，由于tcp协议，为了方便传输，将大块的数据分割成报文段为单位的数据包进行管理。接着就进行大家耳熟能详的三次握手建立连接的过程了。\n2. 连接建立后数据包就会被传输到网络层，ARP协议可以将IP地址解析成对应的MAC地址，如果在不同网段会经过多次中转才能找到。找到物理地址后就会发送数据包到数据链路层，服务器在数据链路层接收到数据包，请求结束，进入服务器应答阶段。\n3. 服务器将接收的数据包传递至传输层，将小块数据包重新组成原来的http请求报文。将http请求报文传递到服务器后，服务器对报文进行解析，并处理请求。无论成功与否，都会返回对应状态码，如果请求成功，还会返回相应的html文件。层层传递之后，应答被浏览器接收到，浏览器对html文件进行DOM树渲染，渲染后呈现的就是我们看到的页面了。\n","source":"_posts/从输入URL到浏览器显示页面发生过程.md","raw":"\n---\ntitle: 从输入URL到浏览器显示页面发生过程\ntags: [telescope]\nindex_img: /img/10008.jpg\ndate: 2022-09-02 \n------\n# 从输入URL到浏览器显示页面发生过程\n\n\n# 网络通信\n\n* 互联网内各网络设备间的通信都遵循TCP/IP协议，利用TCP/IP协议族进行网络通信时，会通过分层顺序与对方进行通信。分层由高到低分别为：应用层、传输层、网络层、数据链路层。发送端从应用层往下走，接收端从数据链路层网上走。·\n## 一、在浏览器中输入url\n\n1. 用户输入url，例如http://www.baidu.com。其中http为协议，www.baidu.com为网络地址，及指出需要的资源在那台计算机上。\n2. 一般网络地址可以称为域名或IP地址，此处为域名。使用域名是为了方便记忆，但是为了让计算机理解这个地址还需要把它解析为IP地址。\n## 二、 应用层DNS解析域名\n1. 客户端先检查本地是否有对应的IP地址，若找到则返回响应的IP地址。若没找到则请求上级DNS服务器，直至找到或到根节点。\n\n## 三、 应用层客户端发送HTTP请求\n1. HTTP请求包括请求报头和请求主体两个部分，其中请求报头包含了至关重要的信息，包括请求的方法（GET / POST）、目标url、遵循的协议（http / https / ftp…），返回的信息是否需要缓存，以及客户端是否发送cookie等。\n\n## 四、 传输层TCP传输报文（三次握手）\n\n1. 位于传输层的TCP协议为传输报文提供可靠的字节流服务。它为了方便传输，将大块的数据分割成以报文段为单位的数据包进行管理，并为它们编号，方便服务器接收时能准确地还原报文信息。TCP协议通过“三次握手”等方法保证传输的安全可靠。\n2. “三次握手”的过程是，发送端先发送一个带有SYN（synchronize）标志的数据包给接收端，在一定的延迟时间内等待接收的回复。接收端收到数据包后，传回一个带有SYN/ACK标志的数据包以示传达确认信息。接收方收到后再发送一个带有ACK标志的数据包给接收端以示握手成功。\n3. 在这个过程中，如果发送端在规定延迟时间内没有收到回复则默认接收方没有收到请求，而再次发送，直到收到回复为止。\n\n## 五、 网络层IP协议查询MAC地址\n\n1. IP协议的作用是把TCP分割好的各种数据包传送给接收方。而要保证确实能传到接收方还需要接收方的MAC地址，也就是物理地址。\n2. IP地址和MAC地址是一一对应的关系，一个网络设备的IP地址可以更换，但是MAC地址一般是固定不变的。ARP协议可以将IP地址解析成对应的MAC地址。\n3. 当通信的双方不在同一个局域网时，需要多次中转才能到达最终的目标，在中转的过程中需要通过下一个中转站的MAC地址来搜索下一个中转目标。\n\n## 六、 数据到达数据链路层\n\n1. 在找到对方的MAC地址后，就将数据发送到数据链路层传输。这时，客户端发送请求的阶段结束。\n\n## 七、 服务器接收数据\n\n1. 接收端的服务器在链路层接收到数据包，再层层向上直到应用层。这过程中包括在运输层通过TCP协议讲分段的数据包重新组成原来的HTTP请求报文。\n\n## 八、 服务器响应请求\n\n1. 服务接收到客户端发送的HTTP请求后，查找客户端请求的资源，并返回响应报文，响应报文中包括一个重要的信息——状态码。\n2. 状态码由三位数字组成，其中比较常见的是200 OK表示请求成功。301表示永久重定向，即请求的资源已经永久转移到新的位置。\n3. 在返回301状态码的同时，响应报文也会附带重定向的url，客户端接收到后将http请求的url做相应的改变再重新发送。404 not found 表示客户端请求的资源找不到。\n\n## 九、 服务器返回相应文件\n\n1. 请求成功后，服务器会返回相应的HTML文件。接下来就到了页面的渲染阶段了。\n\n# 页面渲染\n\n1. 现代浏览器渲染页面的过程是这样的：解析HTML以构建DOM树 –> 构建渲染树 –> 布局渲染树 –> 绘制渲染树。\n2. DOM树是由HTML文件中的标签排列组成，渲染树是在DOM树中加入CSS或HTML中的style样式而形成。渲染树只包含需要显示在页面中的DOM元素，像元素或display属性值为none的元素都不在渲染树中。\n3. 在浏览器还没接收到完整的HTML文件时，它就开始渲染页面了，在遇到外部链入的脚本标签或样式标签或图片时，会再次发送HTTP请求重复上述的步骤。\n4. 在收到CSS文件后会对已经渲染的页面重新渲染，加入它们应有的样式，图片文件加载完立刻显示在相应位置。在这一过程中可能会触发页面的重绘或重排。\n\n* 最后总结一下：\n1. 在浏览器客户端输入url后，url分为http协议和域名，先根据域名在本地查找是否有该域名对应的ip地址记录，如果没有则去DNS服务器上查找，查找到后浏览器正式发送http请求，请求到达传输层后，由于tcp协议，为了方便传输，将大块的数据分割成报文段为单位的数据包进行管理。接着就进行大家耳熟能详的三次握手建立连接的过程了。\n2. 连接建立后数据包就会被传输到网络层，ARP协议可以将IP地址解析成对应的MAC地址，如果在不同网段会经过多次中转才能找到。找到物理地址后就会发送数据包到数据链路层，服务器在数据链路层接收到数据包，请求结束，进入服务器应答阶段。\n3. 服务器将接收的数据包传递至传输层，将小块数据包重新组成原来的http请求报文。将http请求报文传递到服务器后，服务器对报文进行解析，并处理请求。无论成功与否，都会返回对应状态码，如果请求成功，还会返回相应的html文件。层层传递之后，应答被浏览器接收到，浏览器对html文件进行DOM树渲染，渲染后呈现的就是我们看到的页面了。\n","slug":"从输入URL到浏览器显示页面发生过程","published":1,"updated":"2023-02-18T03:27:02.094Z","_id":"cl7jiues40000dwsveucef0by","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"从输入URL到浏览器显示页面发生过程\"><a href=\"#从输入URL到浏览器显示页面发生过程\" class=\"headerlink\" title=\"从输入URL到浏览器显示页面发生过程\"></a>从输入URL到浏览器显示页面发生过程</h1><h1 id=\"网络通信\"><a href=\"#网络通信\" class=\"headerlink\" title=\"网络通信\"></a>网络通信</h1><ul>\n<li>互联网内各网络设备间的通信都遵循TCP&#x2F;IP协议，利用TCP&#x2F;IP协议族进行网络通信时，会通过分层顺序与对方进行通信。分层由高到低分别为：应用层、传输层、网络层、数据链路层。发送端从应用层往下走，接收端从数据链路层网上走。·</li>\n</ul>\n<h2 id=\"一、在浏览器中输入url\"><a href=\"#一、在浏览器中输入url\" class=\"headerlink\" title=\"一、在浏览器中输入url\"></a>一、在浏览器中输入url</h2><ol>\n<li>用户输入url，例如<a href=\"http://www.baidu.com.其中http为协议,www.baidu.com为网络地址,及指出需要的资源在那台计算机上./\">http://www.baidu.com。其中http为协议，www.baidu.com为网络地址，及指出需要的资源在那台计算机上。</a></li>\n<li>一般网络地址可以称为域名或IP地址，此处为域名。使用域名是为了方便记忆，但是为了让计算机理解这个地址还需要把它解析为IP地址。</li>\n</ol>\n<h2 id=\"二、-应用层DNS解析域名\"><a href=\"#二、-应用层DNS解析域名\" class=\"headerlink\" title=\"二、 应用层DNS解析域名\"></a>二、 应用层DNS解析域名</h2><ol>\n<li>客户端先检查本地是否有对应的IP地址，若找到则返回响应的IP地址。若没找到则请求上级DNS服务器，直至找到或到根节点。</li>\n</ol>\n<h2 id=\"三、-应用层客户端发送HTTP请求\"><a href=\"#三、-应用层客户端发送HTTP请求\" class=\"headerlink\" title=\"三、 应用层客户端发送HTTP请求\"></a>三、 应用层客户端发送HTTP请求</h2><ol>\n<li>HTTP请求包括请求报头和请求主体两个部分，其中请求报头包含了至关重要的信息，包括请求的方法（GET &#x2F; POST）、目标url、遵循的协议（http &#x2F; https &#x2F; ftp…），返回的信息是否需要缓存，以及客户端是否发送cookie等。</li>\n</ol>\n<h2 id=\"四、-传输层TCP传输报文（三次握手）\"><a href=\"#四、-传输层TCP传输报文（三次握手）\" class=\"headerlink\" title=\"四、 传输层TCP传输报文（三次握手）\"></a>四、 传输层TCP传输报文（三次握手）</h2><ol>\n<li>位于传输层的TCP协议为传输报文提供可靠的字节流服务。它为了方便传输，将大块的数据分割成以报文段为单位的数据包进行管理，并为它们编号，方便服务器接收时能准确地还原报文信息。TCP协议通过“三次握手”等方法保证传输的安全可靠。</li>\n<li>“三次握手”的过程是，发送端先发送一个带有SYN（synchronize）标志的数据包给接收端，在一定的延迟时间内等待接收的回复。接收端收到数据包后，传回一个带有SYN&#x2F;ACK标志的数据包以示传达确认信息。接收方收到后再发送一个带有ACK标志的数据包给接收端以示握手成功。</li>\n<li>在这个过程中，如果发送端在规定延迟时间内没有收到回复则默认接收方没有收到请求，而再次发送，直到收到回复为止。</li>\n</ol>\n<h2 id=\"五、-网络层IP协议查询MAC地址\"><a href=\"#五、-网络层IP协议查询MAC地址\" class=\"headerlink\" title=\"五、 网络层IP协议查询MAC地址\"></a>五、 网络层IP协议查询MAC地址</h2><ol>\n<li>IP协议的作用是把TCP分割好的各种数据包传送给接收方。而要保证确实能传到接收方还需要接收方的MAC地址，也就是物理地址。</li>\n<li>IP地址和MAC地址是一一对应的关系，一个网络设备的IP地址可以更换，但是MAC地址一般是固定不变的。ARP协议可以将IP地址解析成对应的MAC地址。</li>\n<li>当通信的双方不在同一个局域网时，需要多次中转才能到达最终的目标，在中转的过程中需要通过下一个中转站的MAC地址来搜索下一个中转目标。</li>\n</ol>\n<h2 id=\"六、-数据到达数据链路层\"><a href=\"#六、-数据到达数据链路层\" class=\"headerlink\" title=\"六、 数据到达数据链路层\"></a>六、 数据到达数据链路层</h2><ol>\n<li>在找到对方的MAC地址后，就将数据发送到数据链路层传输。这时，客户端发送请求的阶段结束。</li>\n</ol>\n<h2 id=\"七、-服务器接收数据\"><a href=\"#七、-服务器接收数据\" class=\"headerlink\" title=\"七、 服务器接收数据\"></a>七、 服务器接收数据</h2><ol>\n<li>接收端的服务器在链路层接收到数据包，再层层向上直到应用层。这过程中包括在运输层通过TCP协议讲分段的数据包重新组成原来的HTTP请求报文。</li>\n</ol>\n<h2 id=\"八、-服务器响应请求\"><a href=\"#八、-服务器响应请求\" class=\"headerlink\" title=\"八、 服务器响应请求\"></a>八、 服务器响应请求</h2><ol>\n<li>服务接收到客户端发送的HTTP请求后，查找客户端请求的资源，并返回响应报文，响应报文中包括一个重要的信息——状态码。</li>\n<li>状态码由三位数字组成，其中比较常见的是200 OK表示请求成功。301表示永久重定向，即请求的资源已经永久转移到新的位置。</li>\n<li>在返回301状态码的同时，响应报文也会附带重定向的url，客户端接收到后将http请求的url做相应的改变再重新发送。404 not found 表示客户端请求的资源找不到。</li>\n</ol>\n<h2 id=\"九、-服务器返回相应文件\"><a href=\"#九、-服务器返回相应文件\" class=\"headerlink\" title=\"九、 服务器返回相应文件\"></a>九、 服务器返回相应文件</h2><ol>\n<li>请求成功后，服务器会返回相应的HTML文件。接下来就到了页面的渲染阶段了。</li>\n</ol>\n<h1 id=\"页面渲染\"><a href=\"#页面渲染\" class=\"headerlink\" title=\"页面渲染\"></a>页面渲染</h1><ol>\n<li>现代浏览器渲染页面的过程是这样的：解析HTML以构建DOM树 –&gt; 构建渲染树 –&gt; 布局渲染树 –&gt; 绘制渲染树。</li>\n<li>DOM树是由HTML文件中的标签排列组成，渲染树是在DOM树中加入CSS或HTML中的style样式而形成。渲染树只包含需要显示在页面中的DOM元素，像元素或display属性值为none的元素都不在渲染树中。</li>\n<li>在浏览器还没接收到完整的HTML文件时，它就开始渲染页面了，在遇到外部链入的脚本标签或样式标签或图片时，会再次发送HTTP请求重复上述的步骤。</li>\n<li>在收到CSS文件后会对已经渲染的页面重新渲染，加入它们应有的样式，图片文件加载完立刻显示在相应位置。在这一过程中可能会触发页面的重绘或重排。</li>\n</ol>\n<ul>\n<li>最后总结一下：</li>\n</ul>\n<ol>\n<li>在浏览器客户端输入url后，url分为http协议和域名，先根据域名在本地查找是否有该域名对应的ip地址记录，如果没有则去DNS服务器上查找，查找到后浏览器正式发送http请求，请求到达传输层后，由于tcp协议，为了方便传输，将大块的数据分割成报文段为单位的数据包进行管理。接着就进行大家耳熟能详的三次握手建立连接的过程了。</li>\n<li>连接建立后数据包就会被传输到网络层，ARP协议可以将IP地址解析成对应的MAC地址，如果在不同网段会经过多次中转才能找到。找到物理地址后就会发送数据包到数据链路层，服务器在数据链路层接收到数据包，请求结束，进入服务器应答阶段。</li>\n<li>服务器将接收的数据包传递至传输层，将小块数据包重新组成原来的http请求报文。将http请求报文传递到服务器后，服务器对报文进行解析，并处理请求。无论成功与否，都会返回对应状态码，如果请求成功，还会返回相应的html文件。层层传递之后，应答被浏览器接收到，浏览器对html文件进行DOM树渲染，渲染后呈现的就是我们看到的页面了。</li>\n</ol>\n","site":{"data":{}},"wordcount":2204,"excerpt":"","more":"<h1 id=\"从输入URL到浏览器显示页面发生过程\"><a href=\"#从输入URL到浏览器显示页面发生过程\" class=\"headerlink\" title=\"从输入URL到浏览器显示页面发生过程\"></a>从输入URL到浏览器显示页面发生过程</h1><h1 id=\"网络通信\"><a href=\"#网络通信\" class=\"headerlink\" title=\"网络通信\"></a>网络通信</h1><ul>\n<li>互联网内各网络设备间的通信都遵循TCP&#x2F;IP协议，利用TCP&#x2F;IP协议族进行网络通信时，会通过分层顺序与对方进行通信。分层由高到低分别为：应用层、传输层、网络层、数据链路层。发送端从应用层往下走，接收端从数据链路层网上走。·</li>\n</ul>\n<h2 id=\"一、在浏览器中输入url\"><a href=\"#一、在浏览器中输入url\" class=\"headerlink\" title=\"一、在浏览器中输入url\"></a>一、在浏览器中输入url</h2><ol>\n<li>用户输入url，例如<a href=\"http://www.baidu.com.其中http为协议,www.baidu.com为网络地址,及指出需要的资源在那台计算机上./\">http://www.baidu.com。其中http为协议，www.baidu.com为网络地址，及指出需要的资源在那台计算机上。</a></li>\n<li>一般网络地址可以称为域名或IP地址，此处为域名。使用域名是为了方便记忆，但是为了让计算机理解这个地址还需要把它解析为IP地址。</li>\n</ol>\n<h2 id=\"二、-应用层DNS解析域名\"><a href=\"#二、-应用层DNS解析域名\" class=\"headerlink\" title=\"二、 应用层DNS解析域名\"></a>二、 应用层DNS解析域名</h2><ol>\n<li>客户端先检查本地是否有对应的IP地址，若找到则返回响应的IP地址。若没找到则请求上级DNS服务器，直至找到或到根节点。</li>\n</ol>\n<h2 id=\"三、-应用层客户端发送HTTP请求\"><a href=\"#三、-应用层客户端发送HTTP请求\" class=\"headerlink\" title=\"三、 应用层客户端发送HTTP请求\"></a>三、 应用层客户端发送HTTP请求</h2><ol>\n<li>HTTP请求包括请求报头和请求主体两个部分，其中请求报头包含了至关重要的信息，包括请求的方法（GET &#x2F; POST）、目标url、遵循的协议（http &#x2F; https &#x2F; ftp…），返回的信息是否需要缓存，以及客户端是否发送cookie等。</li>\n</ol>\n<h2 id=\"四、-传输层TCP传输报文（三次握手）\"><a href=\"#四、-传输层TCP传输报文（三次握手）\" class=\"headerlink\" title=\"四、 传输层TCP传输报文（三次握手）\"></a>四、 传输层TCP传输报文（三次握手）</h2><ol>\n<li>位于传输层的TCP协议为传输报文提供可靠的字节流服务。它为了方便传输，将大块的数据分割成以报文段为单位的数据包进行管理，并为它们编号，方便服务器接收时能准确地还原报文信息。TCP协议通过“三次握手”等方法保证传输的安全可靠。</li>\n<li>“三次握手”的过程是，发送端先发送一个带有SYN（synchronize）标志的数据包给接收端，在一定的延迟时间内等待接收的回复。接收端收到数据包后，传回一个带有SYN&#x2F;ACK标志的数据包以示传达确认信息。接收方收到后再发送一个带有ACK标志的数据包给接收端以示握手成功。</li>\n<li>在这个过程中，如果发送端在规定延迟时间内没有收到回复则默认接收方没有收到请求，而再次发送，直到收到回复为止。</li>\n</ol>\n<h2 id=\"五、-网络层IP协议查询MAC地址\"><a href=\"#五、-网络层IP协议查询MAC地址\" class=\"headerlink\" title=\"五、 网络层IP协议查询MAC地址\"></a>五、 网络层IP协议查询MAC地址</h2><ol>\n<li>IP协议的作用是把TCP分割好的各种数据包传送给接收方。而要保证确实能传到接收方还需要接收方的MAC地址，也就是物理地址。</li>\n<li>IP地址和MAC地址是一一对应的关系，一个网络设备的IP地址可以更换，但是MAC地址一般是固定不变的。ARP协议可以将IP地址解析成对应的MAC地址。</li>\n<li>当通信的双方不在同一个局域网时，需要多次中转才能到达最终的目标，在中转的过程中需要通过下一个中转站的MAC地址来搜索下一个中转目标。</li>\n</ol>\n<h2 id=\"六、-数据到达数据链路层\"><a href=\"#六、-数据到达数据链路层\" class=\"headerlink\" title=\"六、 数据到达数据链路层\"></a>六、 数据到达数据链路层</h2><ol>\n<li>在找到对方的MAC地址后，就将数据发送到数据链路层传输。这时，客户端发送请求的阶段结束。</li>\n</ol>\n<h2 id=\"七、-服务器接收数据\"><a href=\"#七、-服务器接收数据\" class=\"headerlink\" title=\"七、 服务器接收数据\"></a>七、 服务器接收数据</h2><ol>\n<li>接收端的服务器在链路层接收到数据包，再层层向上直到应用层。这过程中包括在运输层通过TCP协议讲分段的数据包重新组成原来的HTTP请求报文。</li>\n</ol>\n<h2 id=\"八、-服务器响应请求\"><a href=\"#八、-服务器响应请求\" class=\"headerlink\" title=\"八、 服务器响应请求\"></a>八、 服务器响应请求</h2><ol>\n<li>服务接收到客户端发送的HTTP请求后，查找客户端请求的资源，并返回响应报文，响应报文中包括一个重要的信息——状态码。</li>\n<li>状态码由三位数字组成，其中比较常见的是200 OK表示请求成功。301表示永久重定向，即请求的资源已经永久转移到新的位置。</li>\n<li>在返回301状态码的同时，响应报文也会附带重定向的url，客户端接收到后将http请求的url做相应的改变再重新发送。404 not found 表示客户端请求的资源找不到。</li>\n</ol>\n<h2 id=\"九、-服务器返回相应文件\"><a href=\"#九、-服务器返回相应文件\" class=\"headerlink\" title=\"九、 服务器返回相应文件\"></a>九、 服务器返回相应文件</h2><ol>\n<li>请求成功后，服务器会返回相应的HTML文件。接下来就到了页面的渲染阶段了。</li>\n</ol>\n<h1 id=\"页面渲染\"><a href=\"#页面渲染\" class=\"headerlink\" title=\"页面渲染\"></a>页面渲染</h1><ol>\n<li>现代浏览器渲染页面的过程是这样的：解析HTML以构建DOM树 –&gt; 构建渲染树 –&gt; 布局渲染树 –&gt; 绘制渲染树。</li>\n<li>DOM树是由HTML文件中的标签排列组成，渲染树是在DOM树中加入CSS或HTML中的style样式而形成。渲染树只包含需要显示在页面中的DOM元素，像元素或display属性值为none的元素都不在渲染树中。</li>\n<li>在浏览器还没接收到完整的HTML文件时，它就开始渲染页面了，在遇到外部链入的脚本标签或样式标签或图片时，会再次发送HTTP请求重复上述的步骤。</li>\n<li>在收到CSS文件后会对已经渲染的页面重新渲染，加入它们应有的样式，图片文件加载完立刻显示在相应位置。在这一过程中可能会触发页面的重绘或重排。</li>\n</ol>\n<ul>\n<li>最后总结一下：</li>\n</ul>\n<ol>\n<li>在浏览器客户端输入url后，url分为http协议和域名，先根据域名在本地查找是否有该域名对应的ip地址记录，如果没有则去DNS服务器上查找，查找到后浏览器正式发送http请求，请求到达传输层后，由于tcp协议，为了方便传输，将大块的数据分割成报文段为单位的数据包进行管理。接着就进行大家耳熟能详的三次握手建立连接的过程了。</li>\n<li>连接建立后数据包就会被传输到网络层，ARP协议可以将IP地址解析成对应的MAC地址，如果在不同网段会经过多次中转才能找到。找到物理地址后就会发送数据包到数据链路层，服务器在数据链路层接收到数据包，请求结束，进入服务器应答阶段。</li>\n<li>服务器将接收的数据包传递至传输层，将小块数据包重新组成原来的http请求报文。将http请求报文传递到服务器后，服务器对报文进行解析，并处理请求。无论成功与否，都会返回对应状态码，如果请求成功，还会返回相应的html文件。层层传递之后，应答被浏览器接收到，浏览器对html文件进行DOM树渲染，渲染后呈现的就是我们看到的页面了。</li>\n</ol>\n"},{"title":"Ajax请求的五个步骤","index_img":"/img/10002.jpg","date":"2022-10-09T16:00:00.000Z","_content":"#  Ajax请求的五个步骤\n\n  * ——Ajax简介——：ajax即异步 JavaScript 和XML。Ajax是一种用于创建快速动态网页的技术。通过在后台与服务器进行少量数据交换，Ajax可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。而传统的网页(不使用 Ajax)如果需要更新内容，必需重载整个网页面。\n  \n  * ajax的工作原理：客户端发送请求，请求交给xhr，xhr把请求提交给服务，服务器进行业务处理，服务器响应数据交给xhr对象，xhr对象接收数据，由javascript把数据写到页面上\n### 实现AJAX的基本步骤：\n\n* 要完整实现一个AJAX异步调用和局部刷新,通常需要以下几个步骤:\n\n1. 创建XMLHttpRequest对象,即创建一个异步调用对象。\n2. 创建一个新的HTTP请求,并指定该HTTP请求的方法、URL及验证信息。\n3. 设置响应HTTP请求状态变化的函数。\n4. 发送HTTP请求。\n5. 获取异步调用返回的数据。\n6. 使用JavaScript和DOM实现局部刷新。\n\n### 一.创建XMLHttpRequest对象\n\n1. 不同浏览器使用的异步调用对象有所不同，在IE浏览器中异步调用使用的是XMLHTTP组件中的XMLHttpRequest对象，而在Netscape、Firefox浏览器中则直接使用XMLHttpRequest组件。因此，在不同浏览器中创建XMLHttpRequest对象的方式都有所不同。\n\n* 在IE浏览器中创建XMLHttpRequest对象的方式为:\n var xmlHttpRequest = new ActiveXObject(\"Microsoft.XMLHTTP\");\n\n* 在Netscape浏览器中创建XMLHttpRequest对象的方式为:\n\nvar xmlHttpRequest = new XMLHttpRequest();\n\n**由于无法确定用户使用的是什么浏览器,所以在创建XMLHttpRequest对象时,最好将以上两种方法都加上.如以下代码所示:**\n\n ```ruby\n var xmlHttpRequest;  //定义一个变量,用于存放XMLHttpRequest对象\n    createXMLHttpRequst();   //调用创建对象的方法\n    //创建XMLHttpRequest对象的方法 \n    function createXMLHttpRequest(){                                                 \n        if(window.ActiveXObject) {//判断是否是IE浏览器\n            xmlHttpRequest = new ActiveXObject(\"Microsoft.XMLHTTP\");//创建IE的XMLHttpRequest对象\n        }else if(window.XMLHttpRequest){//判断是否是Netscape等其他支持XMLHttpRequest组件的浏览器\n            xmlHttpRequest = new XMLHttpRequest();//创建其他浏览器上的XMLHttpRequest对象\n        }\n    } \n ```\n  \n\n1. \"if(window.ActiveXObject)\"用来判断是否使用IE浏览器.其中ActiveXOject并不是Windows对象的标准属性,而是IE浏览器中专有的属性,可以用于判断浏览器是否支持ActiveX控件.通常只有IE浏览器或以IE浏览器为核心的浏览器才能支持Active控件.\n\n2. \"else if(window.XMLHttpRequest)\"是为了防止一些浏览器既不支持ActiveX控件,也不支持XMLHttpRequest组件而进行的判断.其中XMLHttpRequest也不是window对象的标准属性,但可以用来判断浏览器是否支持XMLHttpRequest组件.\n\n3. 如果浏览器既不支持ActiveX控件,也不支持XMLHttpRequest组件,那么就不会对xmlHttpRequest变量赋值.\n### 二.创建HTTP请求\n\n1. 创建了XMLHttpRequest对象之后，必须为XMLHttpRequest对象创建HTTP请求，用于说明XMLHttpRequest对象要从哪里获取数据。通常可以是网站中的数据,也可以是本地中其他文件中的数据。\n__创建HTTP请求可以使用XMLHttpRequest对象的open()方法,其语法代码如下所示:__\n\n* method：该参数用于指定HTTP的请求方法，一共有get、post、head、put、delete五种方法，常用的方法为get和post。\n\n* URL：该参数用于指定HTTP请求的URL地址，可以是绝对URL，也可以是相对URL。\n\n* flag：该参数为可选，参数值为布尔型。该参数用于指定是否使用异步方式。true表示异步、false表示同步，默认为true。\n\n* name：该参数为可选参数，用于输入用户名。如果服务器需要验证，则必须使用该参数。\n\n* password：该参数为可选，用于输入密码。若服务器需要验证，则必须使用该参数。\n\n1. 通常可以使用以下代码来访问一个网站文件的内容。      \n\nxmlHttpRequest.open(\"get\",\"http://www.aspxfans.com/BookSupport/JavaScript/ajax.htm\",true);\n\n3. 或者使用以下代码来访问一个本地文件内容：\n\nxmlHttpRequest.open(\"get\",\"ajax.htm\",true);\n\n* 注意：如果HTML文件放在Web服务器上，在Netscape浏览器中的JavaScript安全机制不允许与本机之外的主机进行通信。也就是说，使用open()方法只能打开与HTML文件在同一个服务器上的文件。而在IE浏览器中则无此限制（虽然可以打开其他服务器上的文件，但也会有警告提示）。\n\n### 三.设置响应HTTP请求状态变化的函数\n\n1. 创建完HTTP请求之后，应该就可以将HTTP请求发送给Web服务器了。然而，发送HTTP请求的目的是为了接收从服务器中返回的数据。从创建XMLHttpRequest对象开始，到发送数据、接收数据、XMLHttpRequest对象一共会经历以下5中状态。\n2. \n* 未初始化状态。在创建完XMLHttpRequest对象时，该对象处于未初始化状态，此时XMLHttpRequest对象的readyState属性值为0。\n* 初始化状态。在创建完XMLHttpRequest对象后使用open()方法创建了HTTP请求时，该对象处于初始化状态。此时XMLHttpRequest对象的readyState属性值为1。\n* 发送数据状态。在初始化XMLHttpRequest对象后，使用send()方法发送数据时，该对象处于发送数据状态，此时XMLHttpRequest对象的readyState属性值为2。\n* 接收数据状态。Web服务器接收完数据并进行处理完毕之后，向客户端传送返回的结果。此时，XMLHttpRequest对象处于接收数据状态，XMLHttpRequest对象的readyState属性值为3。\n* 完成状态。XMLHttpRequest对象接收数据完毕后，进入完成状态，此时XMLHttpRequest对象的readyState属性值为4。此时接收完毕后的数据存入在客户端计算机的内存中，可以使用responseText属性或responseXml属性来获取数据。\n\n3. 只有在XMLHttpRequest对象完成了以上5个步骤之后，才可以获取从服务器端返回的数据。因此，如果要获得从服务器端返回的数据，就必须要先判断XMLHttpRequest对象的状态。\n\n4. XMLHttpRequest对象可以响应readystatechange事件，该事件在XMLHttpRequest对象状态改变时（也就是readyState属性值改变时）激发。因此，可以通过该事件调用一个函数，并在该函数中判断XMLHttpRequest对象的readyState属性值。如果readyState属性值为4则使用responseText属性或responseXml属性来获取数据。具体代码如下所示：\n\n    //设置当XMLHttpRequest对象状态改变时调用的函数，注意函数名后面不要添加小括号\n    xmlHttpRequest.onreadystatechange = getData;\n     \n    //定义函数\n    function getData(){\n        //判断XMLHttpRequest对象的readyState属性值是否为4，如果为4表示异步调用完成\n        if(xmlHttpRequest.readyState == 4) {\n            //设置获取数据的语句\n        }\n    }\n\n### 四.设置获取服务器返回数据的语句\n\n1. 如果XMLHttpRequest对象的readyState属性值等于4，表示异步调用过程完毕，就可以通过XMLHttpRequest对象的responseText属性或responseXml属性来获取数据。\n\n2. 但是，异步调用过程完毕，并不代表异步调用成功了，如果要判断异步调用是否成功，还要判断XMLHttpRequest对象的status属性值，只有该属性值为200，才表示异步调用成功，因此，要获取服务器返回数据的语句，还必须要先判断XMLHttpRequest对象的status属性值是否等于200，\n  __如以下代码所示：__\n```ruby\n     if(xmlHttpRequst.status == 200) {\n        document.write(xmlHttpRequest.responseText);//将返回结果以字符串形式输出\n        //document.write(xmlHttpRequest.responseXML);//或者将返回结果以XML形式输出\n     }\n```\n3. 注意：如果HTML文件不是在Web服务器上运行，而是在本地运行，则xmlHttpRequest.status的返回值为0。因此，如果该文件在本地运行，则应该加上xmlHttpRequest.status == 0的判断。\n\n__通常将以上代码放在响应HTTP请求状态变化的函数体内，如以下代码所示__       \n```ruby\n    //设置当XMLHttpRequest对象状态改变时调用的函数，注意函数名后面不要添加小括号\n    xmlHttpRequest.onreadystatechange = getData;\n     \n    //定义函数\n    function getData(){\n        //判断XMLHttpRequest对象的readyState属性值是否为4，如果为4表示异步调用完成\n        if(xmlHttpRequest.readyState==4){\n            if(xmlHttpRequest.status == 200 || xmlHttpRequest.status == 0){//设置获取数据的语句\n                document.write(xmlHttpRequest.responseText);//将返回结果以字符串形式输出\n                //docunment.write(xmlHttpRequest.responseXML);//或者将返回结果以XML形式输出\n            }\n        }\n    }\n```\n### 五.发送HTTP请求\n\n1. 在经过以上几个步骤的设置之后，就可以将HTTP请求发送到Web服务器上去了。发送HTTP请求可以使用XMLHttpRequest对象的send()方法。\n \n___ 其语法代码如下所示：__\n\nXMLHttpRequest.send(data);\n\n2. 其中data是个可选参数，如果请求的数据不需要参数，即可以使用null来替代。data参数的格式与在URL中传递参数的格式类似，以下代码为一个send()方法中的data参数的示例：\n\nname=myName&value=myValue\n\n3. 只有在使用send()方法之后，XMLHttpRequest对象的readyState属性值才会开始改变，也才会激发readystatechange事件，并调用函数。\n### 六.局部更新\n1. 在通过Ajax的异步调用获得服务器端数据之后，可以使用JavaScript或DOM来将网页中的数据进行局部更新。\n  \n\n\n","source":"_posts/Ajax请求的五个步骤.md","raw":"---\ntitle:  Ajax请求的五个步骤\ntags: [telescope]\nindex_img: /img/10002.jpg\ndate: 2022-10-10\n---\n#  Ajax请求的五个步骤\n\n  * ——Ajax简介——：ajax即异步 JavaScript 和XML。Ajax是一种用于创建快速动态网页的技术。通过在后台与服务器进行少量数据交换，Ajax可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。而传统的网页(不使用 Ajax)如果需要更新内容，必需重载整个网页面。\n  \n  * ajax的工作原理：客户端发送请求，请求交给xhr，xhr把请求提交给服务，服务器进行业务处理，服务器响应数据交给xhr对象，xhr对象接收数据，由javascript把数据写到页面上\n### 实现AJAX的基本步骤：\n\n* 要完整实现一个AJAX异步调用和局部刷新,通常需要以下几个步骤:\n\n1. 创建XMLHttpRequest对象,即创建一个异步调用对象。\n2. 创建一个新的HTTP请求,并指定该HTTP请求的方法、URL及验证信息。\n3. 设置响应HTTP请求状态变化的函数。\n4. 发送HTTP请求。\n5. 获取异步调用返回的数据。\n6. 使用JavaScript和DOM实现局部刷新。\n\n### 一.创建XMLHttpRequest对象\n\n1. 不同浏览器使用的异步调用对象有所不同，在IE浏览器中异步调用使用的是XMLHTTP组件中的XMLHttpRequest对象，而在Netscape、Firefox浏览器中则直接使用XMLHttpRequest组件。因此，在不同浏览器中创建XMLHttpRequest对象的方式都有所不同。\n\n* 在IE浏览器中创建XMLHttpRequest对象的方式为:\n var xmlHttpRequest = new ActiveXObject(\"Microsoft.XMLHTTP\");\n\n* 在Netscape浏览器中创建XMLHttpRequest对象的方式为:\n\nvar xmlHttpRequest = new XMLHttpRequest();\n\n**由于无法确定用户使用的是什么浏览器,所以在创建XMLHttpRequest对象时,最好将以上两种方法都加上.如以下代码所示:**\n\n ```ruby\n var xmlHttpRequest;  //定义一个变量,用于存放XMLHttpRequest对象\n    createXMLHttpRequst();   //调用创建对象的方法\n    //创建XMLHttpRequest对象的方法 \n    function createXMLHttpRequest(){                                                 \n        if(window.ActiveXObject) {//判断是否是IE浏览器\n            xmlHttpRequest = new ActiveXObject(\"Microsoft.XMLHTTP\");//创建IE的XMLHttpRequest对象\n        }else if(window.XMLHttpRequest){//判断是否是Netscape等其他支持XMLHttpRequest组件的浏览器\n            xmlHttpRequest = new XMLHttpRequest();//创建其他浏览器上的XMLHttpRequest对象\n        }\n    } \n ```\n  \n\n1. \"if(window.ActiveXObject)\"用来判断是否使用IE浏览器.其中ActiveXOject并不是Windows对象的标准属性,而是IE浏览器中专有的属性,可以用于判断浏览器是否支持ActiveX控件.通常只有IE浏览器或以IE浏览器为核心的浏览器才能支持Active控件.\n\n2. \"else if(window.XMLHttpRequest)\"是为了防止一些浏览器既不支持ActiveX控件,也不支持XMLHttpRequest组件而进行的判断.其中XMLHttpRequest也不是window对象的标准属性,但可以用来判断浏览器是否支持XMLHttpRequest组件.\n\n3. 如果浏览器既不支持ActiveX控件,也不支持XMLHttpRequest组件,那么就不会对xmlHttpRequest变量赋值.\n### 二.创建HTTP请求\n\n1. 创建了XMLHttpRequest对象之后，必须为XMLHttpRequest对象创建HTTP请求，用于说明XMLHttpRequest对象要从哪里获取数据。通常可以是网站中的数据,也可以是本地中其他文件中的数据。\n__创建HTTP请求可以使用XMLHttpRequest对象的open()方法,其语法代码如下所示:__\n\n* method：该参数用于指定HTTP的请求方法，一共有get、post、head、put、delete五种方法，常用的方法为get和post。\n\n* URL：该参数用于指定HTTP请求的URL地址，可以是绝对URL，也可以是相对URL。\n\n* flag：该参数为可选，参数值为布尔型。该参数用于指定是否使用异步方式。true表示异步、false表示同步，默认为true。\n\n* name：该参数为可选参数，用于输入用户名。如果服务器需要验证，则必须使用该参数。\n\n* password：该参数为可选，用于输入密码。若服务器需要验证，则必须使用该参数。\n\n1. 通常可以使用以下代码来访问一个网站文件的内容。      \n\nxmlHttpRequest.open(\"get\",\"http://www.aspxfans.com/BookSupport/JavaScript/ajax.htm\",true);\n\n3. 或者使用以下代码来访问一个本地文件内容：\n\nxmlHttpRequest.open(\"get\",\"ajax.htm\",true);\n\n* 注意：如果HTML文件放在Web服务器上，在Netscape浏览器中的JavaScript安全机制不允许与本机之外的主机进行通信。也就是说，使用open()方法只能打开与HTML文件在同一个服务器上的文件。而在IE浏览器中则无此限制（虽然可以打开其他服务器上的文件，但也会有警告提示）。\n\n### 三.设置响应HTTP请求状态变化的函数\n\n1. 创建完HTTP请求之后，应该就可以将HTTP请求发送给Web服务器了。然而，发送HTTP请求的目的是为了接收从服务器中返回的数据。从创建XMLHttpRequest对象开始，到发送数据、接收数据、XMLHttpRequest对象一共会经历以下5中状态。\n2. \n* 未初始化状态。在创建完XMLHttpRequest对象时，该对象处于未初始化状态，此时XMLHttpRequest对象的readyState属性值为0。\n* 初始化状态。在创建完XMLHttpRequest对象后使用open()方法创建了HTTP请求时，该对象处于初始化状态。此时XMLHttpRequest对象的readyState属性值为1。\n* 发送数据状态。在初始化XMLHttpRequest对象后，使用send()方法发送数据时，该对象处于发送数据状态，此时XMLHttpRequest对象的readyState属性值为2。\n* 接收数据状态。Web服务器接收完数据并进行处理完毕之后，向客户端传送返回的结果。此时，XMLHttpRequest对象处于接收数据状态，XMLHttpRequest对象的readyState属性值为3。\n* 完成状态。XMLHttpRequest对象接收数据完毕后，进入完成状态，此时XMLHttpRequest对象的readyState属性值为4。此时接收完毕后的数据存入在客户端计算机的内存中，可以使用responseText属性或responseXml属性来获取数据。\n\n3. 只有在XMLHttpRequest对象完成了以上5个步骤之后，才可以获取从服务器端返回的数据。因此，如果要获得从服务器端返回的数据，就必须要先判断XMLHttpRequest对象的状态。\n\n4. XMLHttpRequest对象可以响应readystatechange事件，该事件在XMLHttpRequest对象状态改变时（也就是readyState属性值改变时）激发。因此，可以通过该事件调用一个函数，并在该函数中判断XMLHttpRequest对象的readyState属性值。如果readyState属性值为4则使用responseText属性或responseXml属性来获取数据。具体代码如下所示：\n\n    //设置当XMLHttpRequest对象状态改变时调用的函数，注意函数名后面不要添加小括号\n    xmlHttpRequest.onreadystatechange = getData;\n     \n    //定义函数\n    function getData(){\n        //判断XMLHttpRequest对象的readyState属性值是否为4，如果为4表示异步调用完成\n        if(xmlHttpRequest.readyState == 4) {\n            //设置获取数据的语句\n        }\n    }\n\n### 四.设置获取服务器返回数据的语句\n\n1. 如果XMLHttpRequest对象的readyState属性值等于4，表示异步调用过程完毕，就可以通过XMLHttpRequest对象的responseText属性或responseXml属性来获取数据。\n\n2. 但是，异步调用过程完毕，并不代表异步调用成功了，如果要判断异步调用是否成功，还要判断XMLHttpRequest对象的status属性值，只有该属性值为200，才表示异步调用成功，因此，要获取服务器返回数据的语句，还必须要先判断XMLHttpRequest对象的status属性值是否等于200，\n  __如以下代码所示：__\n```ruby\n     if(xmlHttpRequst.status == 200) {\n        document.write(xmlHttpRequest.responseText);//将返回结果以字符串形式输出\n        //document.write(xmlHttpRequest.responseXML);//或者将返回结果以XML形式输出\n     }\n```\n3. 注意：如果HTML文件不是在Web服务器上运行，而是在本地运行，则xmlHttpRequest.status的返回值为0。因此，如果该文件在本地运行，则应该加上xmlHttpRequest.status == 0的判断。\n\n__通常将以上代码放在响应HTTP请求状态变化的函数体内，如以下代码所示__       \n```ruby\n    //设置当XMLHttpRequest对象状态改变时调用的函数，注意函数名后面不要添加小括号\n    xmlHttpRequest.onreadystatechange = getData;\n     \n    //定义函数\n    function getData(){\n        //判断XMLHttpRequest对象的readyState属性值是否为4，如果为4表示异步调用完成\n        if(xmlHttpRequest.readyState==4){\n            if(xmlHttpRequest.status == 200 || xmlHttpRequest.status == 0){//设置获取数据的语句\n                document.write(xmlHttpRequest.responseText);//将返回结果以字符串形式输出\n                //docunment.write(xmlHttpRequest.responseXML);//或者将返回结果以XML形式输出\n            }\n        }\n    }\n```\n### 五.发送HTTP请求\n\n1. 在经过以上几个步骤的设置之后，就可以将HTTP请求发送到Web服务器上去了。发送HTTP请求可以使用XMLHttpRequest对象的send()方法。\n \n___ 其语法代码如下所示：__\n\nXMLHttpRequest.send(data);\n\n2. 其中data是个可选参数，如果请求的数据不需要参数，即可以使用null来替代。data参数的格式与在URL中传递参数的格式类似，以下代码为一个send()方法中的data参数的示例：\n\nname=myName&value=myValue\n\n3. 只有在使用send()方法之后，XMLHttpRequest对象的readyState属性值才会开始改变，也才会激发readystatechange事件，并调用函数。\n### 六.局部更新\n1. 在通过Ajax的异步调用获得服务器端数据之后，可以使用JavaScript或DOM来将网页中的数据进行局部更新。\n  \n\n\n","slug":"Ajax请求的五个步骤","published":1,"updated":"2023-02-18T03:29:25.566Z","_id":"cl7mhdy9v0001rksv5hyrhw8a","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Ajax请求的五个步骤\"><a href=\"#Ajax请求的五个步骤\" class=\"headerlink\" title=\"Ajax请求的五个步骤\"></a>Ajax请求的五个步骤</h1><ul>\n<li><p>——Ajax简介——：ajax即异步 JavaScript 和XML。Ajax是一种用于创建快速动态网页的技术。通过在后台与服务器进行少量数据交换，Ajax可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。而传统的网页(不使用 Ajax)如果需要更新内容，必需重载整个网页面。</p>\n</li>\n<li><p>ajax的工作原理：客户端发送请求，请求交给xhr，xhr把请求提交给服务，服务器进行业务处理，服务器响应数据交给xhr对象，xhr对象接收数据，由javascript把数据写到页面上</p>\n</li>\n</ul>\n<h3 id=\"实现AJAX的基本步骤：\"><a href=\"#实现AJAX的基本步骤：\" class=\"headerlink\" title=\"实现AJAX的基本步骤：\"></a>实现AJAX的基本步骤：</h3><ul>\n<li>要完整实现一个AJAX异步调用和局部刷新,通常需要以下几个步骤:</li>\n</ul>\n<ol>\n<li>创建XMLHttpRequest对象,即创建一个异步调用对象。</li>\n<li>创建一个新的HTTP请求,并指定该HTTP请求的方法、URL及验证信息。</li>\n<li>设置响应HTTP请求状态变化的函数。</li>\n<li>发送HTTP请求。</li>\n<li>获取异步调用返回的数据。</li>\n<li>使用JavaScript和DOM实现局部刷新。</li>\n</ol>\n<h3 id=\"一-创建XMLHttpRequest对象\"><a href=\"#一-创建XMLHttpRequest对象\" class=\"headerlink\" title=\"一.创建XMLHttpRequest对象\"></a>一.创建XMLHttpRequest对象</h3><ol>\n<li>不同浏览器使用的异步调用对象有所不同，在IE浏览器中异步调用使用的是XMLHTTP组件中的XMLHttpRequest对象，而在Netscape、Firefox浏览器中则直接使用XMLHttpRequest组件。因此，在不同浏览器中创建XMLHttpRequest对象的方式都有所不同。</li>\n</ol>\n<ul>\n<li><p>在IE浏览器中创建XMLHttpRequest对象的方式为:<br> var xmlHttpRequest &#x3D; new ActiveXObject(“Microsoft.XMLHTTP”);</p>\n</li>\n<li><p>在Netscape浏览器中创建XMLHttpRequest对象的方式为:</p>\n</li>\n</ul>\n<p>var xmlHttpRequest &#x3D; new XMLHttpRequest();</p>\n<p><strong>由于无法确定用户使用的是什么浏览器,所以在创建XMLHttpRequest对象时,最好将以上两种方法都加上.如以下代码所示:</strong></p>\n <figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ruby\">var xmlHttpRequest;  <span class=\"hljs-regexp\">//</span>定义一个变量,用于存放XMLHttpRequest对象<br>   createXMLHttpRequst();   <span class=\"hljs-regexp\">//</span>调用创建对象的方法<br>   /<span class=\"hljs-regexp\">/创建XMLHttpRequest对象的方法 </span><br><span class=\"hljs-regexp\">   function createXMLHttpRequest()&#123;                                                 </span><br><span class=\"hljs-regexp\">       if(window.ActiveXObject) &#123;/</span><span class=\"hljs-regexp\">/判断是否是IE浏览器</span><br><span class=\"hljs-regexp\">           xmlHttpRequest = new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;);/</span><span class=\"hljs-regexp\">/创建IE的XMLHttpRequest对象</span><br><span class=\"hljs-regexp\">       &#125;else if(window.XMLHttpRequest)&#123;/</span><span class=\"hljs-regexp\">/判断是否是Netscape等其他支持XMLHttpRequest组件的浏览器</span><br><span class=\"hljs-regexp\">           xmlHttpRequest = new XMLHttpRequest();/</span><span class=\"hljs-regexp\">/创建其他浏览器上的XMLHttpRequest对象</span><br><span class=\"hljs-regexp\">       &#125;</span><br><span class=\"hljs-regexp\">   &#125; </span><br></code></pre></td></tr></table></figure>\n<ol>\n<li><p>“if(window.ActiveXObject)”用来判断是否使用IE浏览器.其中ActiveXOject并不是Windows对象的标准属性,而是IE浏览器中专有的属性,可以用于判断浏览器是否支持ActiveX控件.通常只有IE浏览器或以IE浏览器为核心的浏览器才能支持Active控件.</p>\n</li>\n<li><p>“else if(window.XMLHttpRequest)”是为了防止一些浏览器既不支持ActiveX控件,也不支持XMLHttpRequest组件而进行的判断.其中XMLHttpRequest也不是window对象的标准属性,但可以用来判断浏览器是否支持XMLHttpRequest组件.</p>\n</li>\n<li><p>如果浏览器既不支持ActiveX控件,也不支持XMLHttpRequest组件,那么就不会对xmlHttpRequest变量赋值.</p>\n</li>\n</ol>\n<h3 id=\"二-创建HTTP请求\"><a href=\"#二-创建HTTP请求\" class=\"headerlink\" title=\"二.创建HTTP请求\"></a>二.创建HTTP请求</h3><ol>\n<li>创建了XMLHttpRequest对象之后，必须为XMLHttpRequest对象创建HTTP请求，用于说明XMLHttpRequest对象要从哪里获取数据。通常可以是网站中的数据,也可以是本地中其他文件中的数据。<br><strong>创建HTTP请求可以使用XMLHttpRequest对象的open()方法,其语法代码如下所示:</strong></li>\n</ol>\n<ul>\n<li><p>method：该参数用于指定HTTP的请求方法，一共有get、post、head、put、delete五种方法，常用的方法为get和post。</p>\n</li>\n<li><p>URL：该参数用于指定HTTP请求的URL地址，可以是绝对URL，也可以是相对URL。</p>\n</li>\n<li><p>flag：该参数为可选，参数值为布尔型。该参数用于指定是否使用异步方式。true表示异步、false表示同步，默认为true。</p>\n</li>\n<li><p>name：该参数为可选参数，用于输入用户名。如果服务器需要验证，则必须使用该参数。</p>\n</li>\n<li><p>password：该参数为可选，用于输入密码。若服务器需要验证，则必须使用该参数。</p>\n</li>\n</ul>\n<ol>\n<li>通常可以使用以下代码来访问一个网站文件的内容。</li>\n</ol>\n<p>xmlHttpRequest.open(“get”,”<a href=\"http://www.aspxfans.com/BookSupport/JavaScript/ajax.htm&quot;,true\">http://www.aspxfans.com/BookSupport/JavaScript/ajax.htm&quot;,true</a>);</p>\n<ol start=\"3\">\n<li>或者使用以下代码来访问一个本地文件内容：</li>\n</ol>\n<p>xmlHttpRequest.open(“get”,”ajax.htm”,true);</p>\n<ul>\n<li>注意：如果HTML文件放在Web服务器上，在Netscape浏览器中的JavaScript安全机制不允许与本机之外的主机进行通信。也就是说，使用open()方法只能打开与HTML文件在同一个服务器上的文件。而在IE浏览器中则无此限制（虽然可以打开其他服务器上的文件，但也会有警告提示）。</li>\n</ul>\n<h3 id=\"三-设置响应HTTP请求状态变化的函数\"><a href=\"#三-设置响应HTTP请求状态变化的函数\" class=\"headerlink\" title=\"三.设置响应HTTP请求状态变化的函数\"></a>三.设置响应HTTP请求状态变化的函数</h3><ol>\n<li>创建完HTTP请求之后，应该就可以将HTTP请求发送给Web服务器了。然而，发送HTTP请求的目的是为了接收从服务器中返回的数据。从创建XMLHttpRequest对象开始，到发送数据、接收数据、XMLHttpRequest对象一共会经历以下5中状态。</li>\n<li></li>\n</ol>\n<ul>\n<li>未初始化状态。在创建完XMLHttpRequest对象时，该对象处于未初始化状态，此时XMLHttpRequest对象的readyState属性值为0。</li>\n<li>初始化状态。在创建完XMLHttpRequest对象后使用open()方法创建了HTTP请求时，该对象处于初始化状态。此时XMLHttpRequest对象的readyState属性值为1。</li>\n<li>发送数据状态。在初始化XMLHttpRequest对象后，使用send()方法发送数据时，该对象处于发送数据状态，此时XMLHttpRequest对象的readyState属性值为2。</li>\n<li>接收数据状态。Web服务器接收完数据并进行处理完毕之后，向客户端传送返回的结果。此时，XMLHttpRequest对象处于接收数据状态，XMLHttpRequest对象的readyState属性值为3。</li>\n<li>完成状态。XMLHttpRequest对象接收数据完毕后，进入完成状态，此时XMLHttpRequest对象的readyState属性值为4。此时接收完毕后的数据存入在客户端计算机的内存中，可以使用responseText属性或responseXml属性来获取数据。</li>\n</ul>\n<ol start=\"3\">\n<li><p>只有在XMLHttpRequest对象完成了以上5个步骤之后，才可以获取从服务器端返回的数据。因此，如果要获得从服务器端返回的数据，就必须要先判断XMLHttpRequest对象的状态。</p>\n</li>\n<li><p>XMLHttpRequest对象可以响应readystatechange事件，该事件在XMLHttpRequest对象状态改变时（也就是readyState属性值改变时）激发。因此，可以通过该事件调用一个函数，并在该函数中判断XMLHttpRequest对象的readyState属性值。如果readyState属性值为4则使用responseText属性或responseXml属性来获取数据。具体代码如下所示：</p>\n<p> &#x2F;&#x2F;设置当XMLHttpRequest对象状态改变时调用的函数，注意函数名后面不要添加小括号<br> xmlHttpRequest.onreadystatechange &#x3D; getData;</p>\n<p> &#x2F;&#x2F;定义函数<br> function getData(){<br> &#x2F;&#x2F;判断XMLHttpRequest对象的readyState属性值是否为4，如果为4表示异步调用完成<br> if(xmlHttpRequest.readyState &#x3D;&#x3D; 4) {<br>     &#x2F;&#x2F;设置获取数据的语句<br> }<br> }</p>\n</li>\n</ol>\n<h3 id=\"四-设置获取服务器返回数据的语句\"><a href=\"#四-设置获取服务器返回数据的语句\" class=\"headerlink\" title=\"四.设置获取服务器返回数据的语句\"></a>四.设置获取服务器返回数据的语句</h3><ol>\n<li><p>如果XMLHttpRequest对象的readyState属性值等于4，表示异步调用过程完毕，就可以通过XMLHttpRequest对象的responseText属性或responseXml属性来获取数据。</p>\n</li>\n<li><p>但是，异步调用过程完毕，并不代表异步调用成功了，如果要判断异步调用是否成功，还要判断XMLHttpRequest对象的status属性值，只有该属性值为200，才表示异步调用成功，因此，要获取服务器返回数据的语句，还必须要先判断XMLHttpRequest对象的status属性值是否等于200，<br>  <strong>如以下代码所示：</strong></p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ruby\"><span class=\"hljs-keyword\">if</span>(xmlHttpRequst.status == <span class=\"hljs-number\">200</span>) &#123;<br>   document.write(xmlHttpRequest.responseText);<span class=\"hljs-regexp\">//</span>将返回结果以字符串形式输出<br>   /<span class=\"hljs-regexp\">/document.write(xmlHttpRequest.responseXML);/</span><span class=\"hljs-regexp\">/或者将返回结果以XML形式输出</span><br><span class=\"hljs-regexp\">&#125;</span><br></code></pre></td></tr></table></figure></li>\n<li><p>注意：如果HTML文件不是在Web服务器上运行，而是在本地运行，则xmlHttpRequest.status的返回值为0。因此，如果该文件在本地运行，则应该加上xmlHttpRequest.status &#x3D;&#x3D; 0的判断。</p>\n</li>\n</ol>\n<p><strong>通常将以上代码放在响应HTTP请求状态变化的函数体内，如以下代码所示</strong>       </p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ruby\">/<span class=\"hljs-regexp\">/设置当XMLHttpRequest对象状态改变时调用的函数，注意函数名后面不要添加小括号</span><br><span class=\"hljs-regexp\">xmlHttpRequest.onreadystatechange = getData;</span><br><span class=\"hljs-regexp\"> </span><br><span class=\"hljs-regexp\">/</span><span class=\"hljs-regexp\">/定义函数</span><br><span class=\"hljs-regexp\">function getData()&#123;</span><br><span class=\"hljs-regexp\">    /</span><span class=\"hljs-regexp\">/判断XMLHttpRequest对象的readyState属性值是否为4，如果为4表示异步调用完成</span><br><span class=\"hljs-regexp\">    if(xmlHttpRequest.readyState==4)&#123;</span><br><span class=\"hljs-regexp\">        if(xmlHttpRequest.status == 200 || xmlHttpRequest.status == 0)&#123;/</span><span class=\"hljs-regexp\">/设置获取数据的语句</span><br><span class=\"hljs-regexp\">            document.write(xmlHttpRequest.responseText);/</span><span class=\"hljs-regexp\">/将返回结果以字符串形式输出</span><br><span class=\"hljs-regexp\">            /</span><span class=\"hljs-regexp\">/docunment.write(xmlHttpRequest.responseXML);/</span><span class=\"hljs-regexp\">/或者将返回结果以XML形式输出</span><br><span class=\"hljs-regexp\">        &#125;</span><br><span class=\"hljs-regexp\">    &#125;</span><br><span class=\"hljs-regexp\">&#125;</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"五-发送HTTP请求\"><a href=\"#五-发送HTTP请求\" class=\"headerlink\" title=\"五.发送HTTP请求\"></a>五.发送HTTP请求</h3><ol>\n<li>在经过以上几个步骤的设置之后，就可以将HTTP请求发送到Web服务器上去了。发送HTTP请求可以使用XMLHttpRequest对象的send()方法。</li>\n</ol>\n<p>___ 其语法代码如下所示：__</p>\n<p>XMLHttpRequest.send(data);</p>\n<ol start=\"2\">\n<li>其中data是个可选参数，如果请求的数据不需要参数，即可以使用null来替代。data参数的格式与在URL中传递参数的格式类似，以下代码为一个send()方法中的data参数的示例：</li>\n</ol>\n<p>name&#x3D;myName&amp;value&#x3D;myValue</p>\n<ol start=\"3\">\n<li>只有在使用send()方法之后，XMLHttpRequest对象的readyState属性值才会开始改变，也才会激发readystatechange事件，并调用函数。</li>\n</ol>\n<h3 id=\"六-局部更新\"><a href=\"#六-局部更新\" class=\"headerlink\" title=\"六.局部更新\"></a>六.局部更新</h3><ol>\n<li>在通过Ajax的异步调用获得服务器端数据之后，可以使用JavaScript或DOM来将网页中的数据进行局部更新。</li>\n</ol>\n","site":{"data":{}},"wordcount":4999,"excerpt":"","more":"<h1 id=\"Ajax请求的五个步骤\"><a href=\"#Ajax请求的五个步骤\" class=\"headerlink\" title=\"Ajax请求的五个步骤\"></a>Ajax请求的五个步骤</h1><ul>\n<li><p>——Ajax简介——：ajax即异步 JavaScript 和XML。Ajax是一种用于创建快速动态网页的技术。通过在后台与服务器进行少量数据交换，Ajax可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。而传统的网页(不使用 Ajax)如果需要更新内容，必需重载整个网页面。</p>\n</li>\n<li><p>ajax的工作原理：客户端发送请求，请求交给xhr，xhr把请求提交给服务，服务器进行业务处理，服务器响应数据交给xhr对象，xhr对象接收数据，由javascript把数据写到页面上</p>\n</li>\n</ul>\n<h3 id=\"实现AJAX的基本步骤：\"><a href=\"#实现AJAX的基本步骤：\" class=\"headerlink\" title=\"实现AJAX的基本步骤：\"></a>实现AJAX的基本步骤：</h3><ul>\n<li>要完整实现一个AJAX异步调用和局部刷新,通常需要以下几个步骤:</li>\n</ul>\n<ol>\n<li>创建XMLHttpRequest对象,即创建一个异步调用对象。</li>\n<li>创建一个新的HTTP请求,并指定该HTTP请求的方法、URL及验证信息。</li>\n<li>设置响应HTTP请求状态变化的函数。</li>\n<li>发送HTTP请求。</li>\n<li>获取异步调用返回的数据。</li>\n<li>使用JavaScript和DOM实现局部刷新。</li>\n</ol>\n<h3 id=\"一-创建XMLHttpRequest对象\"><a href=\"#一-创建XMLHttpRequest对象\" class=\"headerlink\" title=\"一.创建XMLHttpRequest对象\"></a>一.创建XMLHttpRequest对象</h3><ol>\n<li>不同浏览器使用的异步调用对象有所不同，在IE浏览器中异步调用使用的是XMLHTTP组件中的XMLHttpRequest对象，而在Netscape、Firefox浏览器中则直接使用XMLHttpRequest组件。因此，在不同浏览器中创建XMLHttpRequest对象的方式都有所不同。</li>\n</ol>\n<ul>\n<li><p>在IE浏览器中创建XMLHttpRequest对象的方式为:<br> var xmlHttpRequest &#x3D; new ActiveXObject(“Microsoft.XMLHTTP”);</p>\n</li>\n<li><p>在Netscape浏览器中创建XMLHttpRequest对象的方式为:</p>\n</li>\n</ul>\n<p>var xmlHttpRequest &#x3D; new XMLHttpRequest();</p>\n<p><strong>由于无法确定用户使用的是什么浏览器,所以在创建XMLHttpRequest对象时,最好将以上两种方法都加上.如以下代码所示:</strong></p>\n <figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ruby\">var xmlHttpRequest;  <span class=\"hljs-regexp\">//</span>定义一个变量,用于存放XMLHttpRequest对象<br>   createXMLHttpRequst();   <span class=\"hljs-regexp\">//</span>调用创建对象的方法<br>   /<span class=\"hljs-regexp\">/创建XMLHttpRequest对象的方法 </span><br><span class=\"hljs-regexp\">   function createXMLHttpRequest()&#123;                                                 </span><br><span class=\"hljs-regexp\">       if(window.ActiveXObject) &#123;/</span><span class=\"hljs-regexp\">/判断是否是IE浏览器</span><br><span class=\"hljs-regexp\">           xmlHttpRequest = new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;);/</span><span class=\"hljs-regexp\">/创建IE的XMLHttpRequest对象</span><br><span class=\"hljs-regexp\">       &#125;else if(window.XMLHttpRequest)&#123;/</span><span class=\"hljs-regexp\">/判断是否是Netscape等其他支持XMLHttpRequest组件的浏览器</span><br><span class=\"hljs-regexp\">           xmlHttpRequest = new XMLHttpRequest();/</span><span class=\"hljs-regexp\">/创建其他浏览器上的XMLHttpRequest对象</span><br><span class=\"hljs-regexp\">       &#125;</span><br><span class=\"hljs-regexp\">   &#125; </span><br></code></pre></td></tr></table></figure>\n<ol>\n<li><p>“if(window.ActiveXObject)”用来判断是否使用IE浏览器.其中ActiveXOject并不是Windows对象的标准属性,而是IE浏览器中专有的属性,可以用于判断浏览器是否支持ActiveX控件.通常只有IE浏览器或以IE浏览器为核心的浏览器才能支持Active控件.</p>\n</li>\n<li><p>“else if(window.XMLHttpRequest)”是为了防止一些浏览器既不支持ActiveX控件,也不支持XMLHttpRequest组件而进行的判断.其中XMLHttpRequest也不是window对象的标准属性,但可以用来判断浏览器是否支持XMLHttpRequest组件.</p>\n</li>\n<li><p>如果浏览器既不支持ActiveX控件,也不支持XMLHttpRequest组件,那么就不会对xmlHttpRequest变量赋值.</p>\n</li>\n</ol>\n<h3 id=\"二-创建HTTP请求\"><a href=\"#二-创建HTTP请求\" class=\"headerlink\" title=\"二.创建HTTP请求\"></a>二.创建HTTP请求</h3><ol>\n<li>创建了XMLHttpRequest对象之后，必须为XMLHttpRequest对象创建HTTP请求，用于说明XMLHttpRequest对象要从哪里获取数据。通常可以是网站中的数据,也可以是本地中其他文件中的数据。<br><strong>创建HTTP请求可以使用XMLHttpRequest对象的open()方法,其语法代码如下所示:</strong></li>\n</ol>\n<ul>\n<li><p>method：该参数用于指定HTTP的请求方法，一共有get、post、head、put、delete五种方法，常用的方法为get和post。</p>\n</li>\n<li><p>URL：该参数用于指定HTTP请求的URL地址，可以是绝对URL，也可以是相对URL。</p>\n</li>\n<li><p>flag：该参数为可选，参数值为布尔型。该参数用于指定是否使用异步方式。true表示异步、false表示同步，默认为true。</p>\n</li>\n<li><p>name：该参数为可选参数，用于输入用户名。如果服务器需要验证，则必须使用该参数。</p>\n</li>\n<li><p>password：该参数为可选，用于输入密码。若服务器需要验证，则必须使用该参数。</p>\n</li>\n</ul>\n<ol>\n<li>通常可以使用以下代码来访问一个网站文件的内容。</li>\n</ol>\n<p>xmlHttpRequest.open(“get”,”<a href=\"http://www.aspxfans.com/BookSupport/JavaScript/ajax.htm&quot;,true\">http://www.aspxfans.com/BookSupport/JavaScript/ajax.htm&quot;,true</a>);</p>\n<ol start=\"3\">\n<li>或者使用以下代码来访问一个本地文件内容：</li>\n</ol>\n<p>xmlHttpRequest.open(“get”,”ajax.htm”,true);</p>\n<ul>\n<li>注意：如果HTML文件放在Web服务器上，在Netscape浏览器中的JavaScript安全机制不允许与本机之外的主机进行通信。也就是说，使用open()方法只能打开与HTML文件在同一个服务器上的文件。而在IE浏览器中则无此限制（虽然可以打开其他服务器上的文件，但也会有警告提示）。</li>\n</ul>\n<h3 id=\"三-设置响应HTTP请求状态变化的函数\"><a href=\"#三-设置响应HTTP请求状态变化的函数\" class=\"headerlink\" title=\"三.设置响应HTTP请求状态变化的函数\"></a>三.设置响应HTTP请求状态变化的函数</h3><ol>\n<li>创建完HTTP请求之后，应该就可以将HTTP请求发送给Web服务器了。然而，发送HTTP请求的目的是为了接收从服务器中返回的数据。从创建XMLHttpRequest对象开始，到发送数据、接收数据、XMLHttpRequest对象一共会经历以下5中状态。</li>\n<li></li>\n</ol>\n<ul>\n<li>未初始化状态。在创建完XMLHttpRequest对象时，该对象处于未初始化状态，此时XMLHttpRequest对象的readyState属性值为0。</li>\n<li>初始化状态。在创建完XMLHttpRequest对象后使用open()方法创建了HTTP请求时，该对象处于初始化状态。此时XMLHttpRequest对象的readyState属性值为1。</li>\n<li>发送数据状态。在初始化XMLHttpRequest对象后，使用send()方法发送数据时，该对象处于发送数据状态，此时XMLHttpRequest对象的readyState属性值为2。</li>\n<li>接收数据状态。Web服务器接收完数据并进行处理完毕之后，向客户端传送返回的结果。此时，XMLHttpRequest对象处于接收数据状态，XMLHttpRequest对象的readyState属性值为3。</li>\n<li>完成状态。XMLHttpRequest对象接收数据完毕后，进入完成状态，此时XMLHttpRequest对象的readyState属性值为4。此时接收完毕后的数据存入在客户端计算机的内存中，可以使用responseText属性或responseXml属性来获取数据。</li>\n</ul>\n<ol start=\"3\">\n<li><p>只有在XMLHttpRequest对象完成了以上5个步骤之后，才可以获取从服务器端返回的数据。因此，如果要获得从服务器端返回的数据，就必须要先判断XMLHttpRequest对象的状态。</p>\n</li>\n<li><p>XMLHttpRequest对象可以响应readystatechange事件，该事件在XMLHttpRequest对象状态改变时（也就是readyState属性值改变时）激发。因此，可以通过该事件调用一个函数，并在该函数中判断XMLHttpRequest对象的readyState属性值。如果readyState属性值为4则使用responseText属性或responseXml属性来获取数据。具体代码如下所示：</p>\n<p> &#x2F;&#x2F;设置当XMLHttpRequest对象状态改变时调用的函数，注意函数名后面不要添加小括号<br> xmlHttpRequest.onreadystatechange &#x3D; getData;</p>\n<p> &#x2F;&#x2F;定义函数<br> function getData(){<br> &#x2F;&#x2F;判断XMLHttpRequest对象的readyState属性值是否为4，如果为4表示异步调用完成<br> if(xmlHttpRequest.readyState &#x3D;&#x3D; 4) {<br>     &#x2F;&#x2F;设置获取数据的语句<br> }<br> }</p>\n</li>\n</ol>\n<h3 id=\"四-设置获取服务器返回数据的语句\"><a href=\"#四-设置获取服务器返回数据的语句\" class=\"headerlink\" title=\"四.设置获取服务器返回数据的语句\"></a>四.设置获取服务器返回数据的语句</h3><ol>\n<li><p>如果XMLHttpRequest对象的readyState属性值等于4，表示异步调用过程完毕，就可以通过XMLHttpRequest对象的responseText属性或responseXml属性来获取数据。</p>\n</li>\n<li><p>但是，异步调用过程完毕，并不代表异步调用成功了，如果要判断异步调用是否成功，还要判断XMLHttpRequest对象的status属性值，只有该属性值为200，才表示异步调用成功，因此，要获取服务器返回数据的语句，还必须要先判断XMLHttpRequest对象的status属性值是否等于200，<br>  <strong>如以下代码所示：</strong></p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ruby\"><span class=\"hljs-keyword\">if</span>(xmlHttpRequst.status == <span class=\"hljs-number\">200</span>) &#123;<br>   document.write(xmlHttpRequest.responseText);<span class=\"hljs-regexp\">//</span>将返回结果以字符串形式输出<br>   /<span class=\"hljs-regexp\">/document.write(xmlHttpRequest.responseXML);/</span><span class=\"hljs-regexp\">/或者将返回结果以XML形式输出</span><br><span class=\"hljs-regexp\">&#125;</span><br></code></pre></td></tr></table></figure></li>\n<li><p>注意：如果HTML文件不是在Web服务器上运行，而是在本地运行，则xmlHttpRequest.status的返回值为0。因此，如果该文件在本地运行，则应该加上xmlHttpRequest.status &#x3D;&#x3D; 0的判断。</p>\n</li>\n</ol>\n<p><strong>通常将以上代码放在响应HTTP请求状态变化的函数体内，如以下代码所示</strong>       </p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ruby\">/<span class=\"hljs-regexp\">/设置当XMLHttpRequest对象状态改变时调用的函数，注意函数名后面不要添加小括号</span><br><span class=\"hljs-regexp\">xmlHttpRequest.onreadystatechange = getData;</span><br><span class=\"hljs-regexp\"> </span><br><span class=\"hljs-regexp\">/</span><span class=\"hljs-regexp\">/定义函数</span><br><span class=\"hljs-regexp\">function getData()&#123;</span><br><span class=\"hljs-regexp\">    /</span><span class=\"hljs-regexp\">/判断XMLHttpRequest对象的readyState属性值是否为4，如果为4表示异步调用完成</span><br><span class=\"hljs-regexp\">    if(xmlHttpRequest.readyState==4)&#123;</span><br><span class=\"hljs-regexp\">        if(xmlHttpRequest.status == 200 || xmlHttpRequest.status == 0)&#123;/</span><span class=\"hljs-regexp\">/设置获取数据的语句</span><br><span class=\"hljs-regexp\">            document.write(xmlHttpRequest.responseText);/</span><span class=\"hljs-regexp\">/将返回结果以字符串形式输出</span><br><span class=\"hljs-regexp\">            /</span><span class=\"hljs-regexp\">/docunment.write(xmlHttpRequest.responseXML);/</span><span class=\"hljs-regexp\">/或者将返回结果以XML形式输出</span><br><span class=\"hljs-regexp\">        &#125;</span><br><span class=\"hljs-regexp\">    &#125;</span><br><span class=\"hljs-regexp\">&#125;</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"五-发送HTTP请求\"><a href=\"#五-发送HTTP请求\" class=\"headerlink\" title=\"五.发送HTTP请求\"></a>五.发送HTTP请求</h3><ol>\n<li>在经过以上几个步骤的设置之后，就可以将HTTP请求发送到Web服务器上去了。发送HTTP请求可以使用XMLHttpRequest对象的send()方法。</li>\n</ol>\n<p>___ 其语法代码如下所示：__</p>\n<p>XMLHttpRequest.send(data);</p>\n<ol start=\"2\">\n<li>其中data是个可选参数，如果请求的数据不需要参数，即可以使用null来替代。data参数的格式与在URL中传递参数的格式类似，以下代码为一个send()方法中的data参数的示例：</li>\n</ol>\n<p>name&#x3D;myName&amp;value&#x3D;myValue</p>\n<ol start=\"3\">\n<li>只有在使用send()方法之后，XMLHttpRequest对象的readyState属性值才会开始改变，也才会激发readystatechange事件，并调用函数。</li>\n</ol>\n<h3 id=\"六-局部更新\"><a href=\"#六-局部更新\" class=\"headerlink\" title=\"六.局部更新\"></a>六.局部更新</h3><ol>\n<li>在通过Ajax的异步调用获得服务器端数据之后，可以使用JavaScript或DOM来将网页中的数据进行局部更新。</li>\n</ol>\n"},{"title":"10s支付跳转案例","index_img":"/img/10003.jpg","date":"2023-02-14T16:00:00.000Z","_content":"## 一.这是点击跳转的页面\n\n### 逻辑：获取支付的 button 按钮，绑定一个 onclick 点击事件，绑定一个跳转页面，如果点击支付就判断为真就跳转到相应页面\n### style 代码\n        div {\n            width: 200px;\n            height: 280px;\n            background-color: #999;\n            padding: 20px;\n            margin: 0 auto;\n            text-align: center;\n        }\n\n        button {\n            margin: 25px 15px;\n        }      \n### div 代码\n      <p>商品： wed前端课程</p>\n        <p>价格： 198元</p>\n        <p>内容： HTML·css ·js</p>\n        <p>地址： 广州白云区</p>\n\n        <p>\n            <button>取消</button>\n            <button>支付</button>\n        </p>\n### //逻辑：点击支付，出现确认  \n### script 代码\n      document.getElementsByTagName('button')[1].onclick = function () {\n            let res = window.confirm('您确定要支付吗？');\n            if (res) {\n                location.href = './跳转页面.html'\n            }\n        }\n## 二.这是跳转页面\n\n### 逻辑：加载页面时，触发定时器倒计时 10s，绑定链接 10s 后自动跳转相应页面。也可以直接点击立即跳转按钮，进行跳转。\n### style部分代码\n        .one {\n            width: 500px;\n            padding: 20px;\n            margin: 0 auto;\n        }\n        .one span {\n            font-size: 30px;\n            color: red;\n        }     \n### div 代码\n    <div class=\"one\">\n        <h1>恭喜您，支付成功</h1>\n        <span>10</span>秒后自动返回首页\n        <p> <button>立即返回</button></p>\n    </div>\n### script 代码\n#### 逻辑：加载页面时，触发定时器 10s\n        window.onload = function () {\n            let timer = 10;\n            setInterval(() => {\n                timer--;\n                document.getElementsByTagName('span')[0].innerHTML = timer;\n                if (timer == 0) {\n                    location.href = 'https://www.runoob.com/w3c/w3c-tutorial.html';\n                }\n            }, 1000)\n        }\n        document.getElementsByTagName('button')[0].onclick = function () {\n            location.href = 'https://www.runoob.com/w3c/w3c-tutorial.html';\n        }\n      \n      \n\n\n","source":"_posts/10s支付跳转案例.md","raw":"---\ntitle: 10s支付跳转案例\ntags: [telescope]\nindex_img: /img/10003.jpg\ndate: 2023-2-15 \n---\n## 一.这是点击跳转的页面\n\n### 逻辑：获取支付的 button 按钮，绑定一个 onclick 点击事件，绑定一个跳转页面，如果点击支付就判断为真就跳转到相应页面\n### style 代码\n        div {\n            width: 200px;\n            height: 280px;\n            background-color: #999;\n            padding: 20px;\n            margin: 0 auto;\n            text-align: center;\n        }\n\n        button {\n            margin: 25px 15px;\n        }      \n### div 代码\n      <p>商品： wed前端课程</p>\n        <p>价格： 198元</p>\n        <p>内容： HTML·css ·js</p>\n        <p>地址： 广州白云区</p>\n\n        <p>\n            <button>取消</button>\n            <button>支付</button>\n        </p>\n### //逻辑：点击支付，出现确认  \n### script 代码\n      document.getElementsByTagName('button')[1].onclick = function () {\n            let res = window.confirm('您确定要支付吗？');\n            if (res) {\n                location.href = './跳转页面.html'\n            }\n        }\n## 二.这是跳转页面\n\n### 逻辑：加载页面时，触发定时器倒计时 10s，绑定链接 10s 后自动跳转相应页面。也可以直接点击立即跳转按钮，进行跳转。\n### style部分代码\n        .one {\n            width: 500px;\n            padding: 20px;\n            margin: 0 auto;\n        }\n        .one span {\n            font-size: 30px;\n            color: red;\n        }     \n### div 代码\n    <div class=\"one\">\n        <h1>恭喜您，支付成功</h1>\n        <span>10</span>秒后自动返回首页\n        <p> <button>立即返回</button></p>\n    </div>\n### script 代码\n#### 逻辑：加载页面时，触发定时器 10s\n        window.onload = function () {\n            let timer = 10;\n            setInterval(() => {\n                timer--;\n                document.getElementsByTagName('span')[0].innerHTML = timer;\n                if (timer == 0) {\n                    location.href = 'https://www.runoob.com/w3c/w3c-tutorial.html';\n                }\n            }, 1000)\n        }\n        document.getElementsByTagName('button')[0].onclick = function () {\n            location.href = 'https://www.runoob.com/w3c/w3c-tutorial.html';\n        }\n      \n      \n\n\n","slug":"10s支付跳转案例","published":1,"updated":"2023-02-18T03:03:19.669Z","_id":"cle073ar5000080sv02higpoz","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"一-这是点击跳转的页面\"><a href=\"#一-这是点击跳转的页面\" class=\"headerlink\" title=\"一.这是点击跳转的页面\"></a>一.这是点击跳转的页面</h2><h3 id=\"逻辑：获取支付的-button-按钮，绑定一个-onclick-点击事件，绑定一个跳转页面，如果点击支付就判断为真就跳转到相应页面\"><a href=\"#逻辑：获取支付的-button-按钮，绑定一个-onclick-点击事件，绑定一个跳转页面，如果点击支付就判断为真就跳转到相应页面\" class=\"headerlink\" title=\"逻辑：获取支付的 button 按钮，绑定一个 onclick 点击事件，绑定一个跳转页面，如果点击支付就判断为真就跳转到相应页面\"></a>逻辑：获取支付的 button 按钮，绑定一个 onclick 点击事件，绑定一个跳转页面，如果点击支付就判断为真就跳转到相应页面</h3><h3 id=\"style-代码\"><a href=\"#style-代码\" class=\"headerlink\" title=\"style 代码\"></a>style 代码</h3><pre><code class=\"hljs\">    div &#123;\n        width: 200px;\n        height: 280px;\n        background-color: #999;\n        padding: 20px;\n        margin: 0 auto;\n        text-align: center;\n    &#125;\n\n    button &#123;\n        margin: 25px 15px;\n    &#125;      \n</code></pre>\n<h3 id=\"div-代码\"><a href=\"#div-代码\" class=\"headerlink\" title=\"div 代码\"></a>div 代码</h3><pre><code class=\"hljs\">  &lt;p&gt;商品： wed前端课程&lt;/p&gt;\n    &lt;p&gt;价格： 198元&lt;/p&gt;\n    &lt;p&gt;内容： HTML·css ·js&lt;/p&gt;\n    &lt;p&gt;地址： 广州白云区&lt;/p&gt;\n\n    &lt;p&gt;\n        &lt;button&gt;取消&lt;/button&gt;\n        &lt;button&gt;支付&lt;/button&gt;\n    &lt;/p&gt;\n</code></pre>\n<h3 id=\"x2F-x2F-逻辑：点击支付，出现确认\"><a href=\"#x2F-x2F-逻辑：点击支付，出现确认\" class=\"headerlink\" title=\"&#x2F;&#x2F;逻辑：点击支付，出现确认\"></a>&#x2F;&#x2F;逻辑：点击支付，出现确认</h3><h3 id=\"script-代码\"><a href=\"#script-代码\" class=\"headerlink\" title=\"script 代码\"></a>script 代码</h3><pre><code class=\"hljs\">  document.getElementsByTagName(&#39;button&#39;)[1].onclick = function () &#123;\n        let res = window.confirm(&#39;您确定要支付吗？&#39;);\n        if (res) &#123;\n            location.href = &#39;./跳转页面.html&#39;\n        &#125;\n    &#125;\n</code></pre>\n<h2 id=\"二-这是跳转页面\"><a href=\"#二-这是跳转页面\" class=\"headerlink\" title=\"二.这是跳转页面\"></a>二.这是跳转页面</h2><h3 id=\"逻辑：加载页面时，触发定时器倒计时-10s，绑定链接-10s-后自动跳转相应页面。也可以直接点击立即跳转按钮，进行跳转。\"><a href=\"#逻辑：加载页面时，触发定时器倒计时-10s，绑定链接-10s-后自动跳转相应页面。也可以直接点击立即跳转按钮，进行跳转。\" class=\"headerlink\" title=\"逻辑：加载页面时，触发定时器倒计时 10s，绑定链接 10s 后自动跳转相应页面。也可以直接点击立即跳转按钮，进行跳转。\"></a>逻辑：加载页面时，触发定时器倒计时 10s，绑定链接 10s 后自动跳转相应页面。也可以直接点击立即跳转按钮，进行跳转。</h3><h3 id=\"style部分代码\"><a href=\"#style部分代码\" class=\"headerlink\" title=\"style部分代码\"></a>style部分代码</h3><pre><code class=\"hljs\">    .one &#123;\n        width: 500px;\n        padding: 20px;\n        margin: 0 auto;\n    &#125;\n    .one span &#123;\n        font-size: 30px;\n        color: red;\n    &#125;     \n</code></pre>\n<h3 id=\"div-代码-1\"><a href=\"#div-代码-1\" class=\"headerlink\" title=\"div 代码\"></a>div 代码</h3><pre><code class=\"hljs\">&lt;div class=&quot;one&quot;&gt;\n    &lt;h1&gt;恭喜您，支付成功&lt;/h1&gt;\n    &lt;span&gt;10&lt;/span&gt;秒后自动返回首页\n    &lt;p&gt; &lt;button&gt;立即返回&lt;/button&gt;&lt;/p&gt;\n&lt;/div&gt;\n</code></pre>\n<h3 id=\"script-代码-1\"><a href=\"#script-代码-1\" class=\"headerlink\" title=\"script 代码\"></a>script 代码</h3><h4 id=\"逻辑：加载页面时，触发定时器-10s\"><a href=\"#逻辑：加载页面时，触发定时器-10s\" class=\"headerlink\" title=\"逻辑：加载页面时，触发定时器 10s\"></a>逻辑：加载页面时，触发定时器 10s</h4><pre><code class=\"hljs\">    window.onload = function () &#123;\n        let timer = 10;\n        setInterval(() =&gt; &#123;\n            timer--;\n            document.getElementsByTagName(&#39;span&#39;)[0].innerHTML = timer;\n            if (timer == 0) &#123;\n                location.href = &#39;https://www.runoob.com/w3c/w3c-tutorial.html&#39;;\n            &#125;\n        &#125;, 1000)\n    &#125;\n    document.getElementsByTagName(&#39;button&#39;)[0].onclick = function () &#123;\n        location.href = &#39;https://www.runoob.com/w3c/w3c-tutorial.html&#39;;\n    &#125;\n  \n  \n</code></pre>\n","site":{"data":{}},"wordcount":1393,"excerpt":"","more":"<h2 id=\"一-这是点击跳转的页面\"><a href=\"#一-这是点击跳转的页面\" class=\"headerlink\" title=\"一.这是点击跳转的页面\"></a>一.这是点击跳转的页面</h2><h3 id=\"逻辑：获取支付的-button-按钮，绑定一个-onclick-点击事件，绑定一个跳转页面，如果点击支付就判断为真就跳转到相应页面\"><a href=\"#逻辑：获取支付的-button-按钮，绑定一个-onclick-点击事件，绑定一个跳转页面，如果点击支付就判断为真就跳转到相应页面\" class=\"headerlink\" title=\"逻辑：获取支付的 button 按钮，绑定一个 onclick 点击事件，绑定一个跳转页面，如果点击支付就判断为真就跳转到相应页面\"></a>逻辑：获取支付的 button 按钮，绑定一个 onclick 点击事件，绑定一个跳转页面，如果点击支付就判断为真就跳转到相应页面</h3><h3 id=\"style-代码\"><a href=\"#style-代码\" class=\"headerlink\" title=\"style 代码\"></a>style 代码</h3><pre><code>    div &#123;\n        width: 200px;\n        height: 280px;\n        background-color: #999;\n        padding: 20px;\n        margin: 0 auto;\n        text-align: center;\n    &#125;\n\n    button &#123;\n        margin: 25px 15px;\n    &#125;      \n</code></pre>\n<h3 id=\"div-代码\"><a href=\"#div-代码\" class=\"headerlink\" title=\"div 代码\"></a>div 代码</h3><pre><code>  &lt;p&gt;商品： wed前端课程&lt;/p&gt;\n    &lt;p&gt;价格： 198元&lt;/p&gt;\n    &lt;p&gt;内容： HTML·css ·js&lt;/p&gt;\n    &lt;p&gt;地址： 广州白云区&lt;/p&gt;\n\n    &lt;p&gt;\n        &lt;button&gt;取消&lt;/button&gt;\n        &lt;button&gt;支付&lt;/button&gt;\n    &lt;/p&gt;\n</code></pre>\n<h3 id=\"x2F-x2F-逻辑：点击支付，出现确认\"><a href=\"#x2F-x2F-逻辑：点击支付，出现确认\" class=\"headerlink\" title=\"&#x2F;&#x2F;逻辑：点击支付，出现确认\"></a>&#x2F;&#x2F;逻辑：点击支付，出现确认</h3><h3 id=\"script-代码\"><a href=\"#script-代码\" class=\"headerlink\" title=\"script 代码\"></a>script 代码</h3><pre><code>  document.getElementsByTagName(&#39;button&#39;)[1].onclick = function () &#123;\n        let res = window.confirm(&#39;您确定要支付吗？&#39;);\n        if (res) &#123;\n            location.href = &#39;./跳转页面.html&#39;\n        &#125;\n    &#125;\n</code></pre>\n<h2 id=\"二-这是跳转页面\"><a href=\"#二-这是跳转页面\" class=\"headerlink\" title=\"二.这是跳转页面\"></a>二.这是跳转页面</h2><h3 id=\"逻辑：加载页面时，触发定时器倒计时-10s，绑定链接-10s-后自动跳转相应页面。也可以直接点击立即跳转按钮，进行跳转。\"><a href=\"#逻辑：加载页面时，触发定时器倒计时-10s，绑定链接-10s-后自动跳转相应页面。也可以直接点击立即跳转按钮，进行跳转。\" class=\"headerlink\" title=\"逻辑：加载页面时，触发定时器倒计时 10s，绑定链接 10s 后自动跳转相应页面。也可以直接点击立即跳转按钮，进行跳转。\"></a>逻辑：加载页面时，触发定时器倒计时 10s，绑定链接 10s 后自动跳转相应页面。也可以直接点击立即跳转按钮，进行跳转。</h3><h3 id=\"style部分代码\"><a href=\"#style部分代码\" class=\"headerlink\" title=\"style部分代码\"></a>style部分代码</h3><pre><code>    .one &#123;\n        width: 500px;\n        padding: 20px;\n        margin: 0 auto;\n    &#125;\n    .one span &#123;\n        font-size: 30px;\n        color: red;\n    &#125;     \n</code></pre>\n<h3 id=\"div-代码-1\"><a href=\"#div-代码-1\" class=\"headerlink\" title=\"div 代码\"></a>div 代码</h3><pre><code>&lt;div class=&quot;one&quot;&gt;\n    &lt;h1&gt;恭喜您，支付成功&lt;/h1&gt;\n    &lt;span&gt;10&lt;/span&gt;秒后自动返回首页\n    &lt;p&gt; &lt;button&gt;立即返回&lt;/button&gt;&lt;/p&gt;\n&lt;/div&gt;\n</code></pre>\n<h3 id=\"script-代码-1\"><a href=\"#script-代码-1\" class=\"headerlink\" title=\"script 代码\"></a>script 代码</h3><h4 id=\"逻辑：加载页面时，触发定时器-10s\"><a href=\"#逻辑：加载页面时，触发定时器-10s\" class=\"headerlink\" title=\"逻辑：加载页面时，触发定时器 10s\"></a>逻辑：加载页面时，触发定时器 10s</h4><pre><code>    window.onload = function () &#123;\n        let timer = 10;\n        setInterval(() =&gt; &#123;\n            timer--;\n            document.getElementsByTagName(&#39;span&#39;)[0].innerHTML = timer;\n            if (timer == 0) &#123;\n                location.href = &#39;https://www.runoob.com/w3c/w3c-tutorial.html&#39;;\n            &#125;\n        &#125;, 1000)\n    &#125;\n    document.getElementsByTagName(&#39;button&#39;)[0].onclick = function () &#123;\n        location.href = &#39;https://www.runoob.com/w3c/w3c-tutorial.html&#39;;\n    &#125;\n  \n  \n</code></pre>\n"},{"title":"节流防抖案例","index_img":"/img/jl.png","date":"2023-02-16T16:00:00.000Z","_content":"\n # 防抖 （多次触发 只执行最后一次）\n ## 逻辑： 高频率触发的事件,在指定的单位时间内，只响应最后一次，如果在指定的时间内再次触发，则重新计算时间\n ## 防抖类似于英雄联盟回城6秒，如果回城中被打断，再次回城需要再等6秒 (如：搜索框搜索输入)\n  ### style 部分代码\n  ```\n    div {\n      width:200px;\n      height:200px;\n      background-color:skyblue;\n    }\n  ```\n\n\n### div 部分代码 \n\n ``` \n <input type=\"text\">\n  <div> </div>\n  ```\n\n ### scrip t部分代码\n```\n    //获取元素\n    let input = document.getElementsByTagName('input')[0]\n    //防抖\n    let timerId = null\n    input.onkeyup =function () {\n\n      if (timerId !== null) {\n        clearTimeout(timerId)\n      }\n      timerId = setTimeout(() => {\n        console.log(\"防抖\");\n      }, 2000)\n    }\n```\n# 2.节流 （规定时间内 只触发一次）\n\n ## 逻辑： 高频率触发的事件,在指定的单位时间内，只响应第一次\n ## 节流类似于英雄联盟里的英雄平A   一定是内点击多次只进行攻击一次 (如：搜索框搜索输入)\n ### script 部分代码\n\n ```\n    //获取元素\n    let div = document.getElementsByTagName('div')[0]\n    //节流\n    let timerout = 0\n    div.onmousemove = function () {\n      if (timerout !== 0) {\n        return\n      }\n      timerout = setTimeout(() => {\n        console.log(\"节流\");\n        timerout = 0\n      }, 2000)\n    }\n```\n\n\n\n","source":"_posts/防抖节流案列.md","raw":"---\ntitle: 节流防抖案例\ntags: [telescope]\nindex_img: /img/jl.png\ndate: 2023-2-17\n---\n\n # 防抖 （多次触发 只执行最后一次）\n ## 逻辑： 高频率触发的事件,在指定的单位时间内，只响应最后一次，如果在指定的时间内再次触发，则重新计算时间\n ## 防抖类似于英雄联盟回城6秒，如果回城中被打断，再次回城需要再等6秒 (如：搜索框搜索输入)\n  ### style 部分代码\n  ```\n    div {\n      width:200px;\n      height:200px;\n      background-color:skyblue;\n    }\n  ```\n\n\n### div 部分代码 \n\n ``` \n <input type=\"text\">\n  <div> </div>\n  ```\n\n ### scrip t部分代码\n```\n    //获取元素\n    let input = document.getElementsByTagName('input')[0]\n    //防抖\n    let timerId = null\n    input.onkeyup =function () {\n\n      if (timerId !== null) {\n        clearTimeout(timerId)\n      }\n      timerId = setTimeout(() => {\n        console.log(\"防抖\");\n      }, 2000)\n    }\n```\n# 2.节流 （规定时间内 只触发一次）\n\n ## 逻辑： 高频率触发的事件,在指定的单位时间内，只响应第一次\n ## 节流类似于英雄联盟里的英雄平A   一定是内点击多次只进行攻击一次 (如：搜索框搜索输入)\n ### script 部分代码\n\n ```\n    //获取元素\n    let div = document.getElementsByTagName('div')[0]\n    //节流\n    let timerout = 0\n    div.onmousemove = function () {\n      if (timerout !== 0) {\n        return\n      }\n      timerout = setTimeout(() => {\n        console.log(\"节流\");\n        timerout = 0\n      }, 2000)\n    }\n```\n\n\n\n","slug":"防抖节流案列","published":1,"updated":"2023-02-18T00:16:31.333Z","_id":"cle92q35n000058svanrx78ki","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"防抖-（多次触发-只执行最后一次）\"><a href=\"#防抖-（多次触发-只执行最后一次）\" class=\"headerlink\" title=\"防抖 （多次触发 只执行最后一次）\"></a>防抖 （多次触发 只执行最后一次）</h1><h2 id=\"逻辑：-高频率触发的事件-在指定的单位时间内，只响应最后一次，如果在指定的时间内再次触发，则重新计算时间\"><a href=\"#逻辑：-高频率触发的事件-在指定的单位时间内，只响应最后一次，如果在指定的时间内再次触发，则重新计算时间\" class=\"headerlink\" title=\"逻辑： 高频率触发的事件,在指定的单位时间内，只响应最后一次，如果在指定的时间内再次触发，则重新计算时间\"></a>逻辑： 高频率触发的事件,在指定的单位时间内，只响应最后一次，如果在指定的时间内再次触发，则重新计算时间</h2><h2 id=\"防抖类似于英雄联盟回城6秒，如果回城中被打断，再次回城需要再等6秒-如：搜索框搜索输入\"><a href=\"#防抖类似于英雄联盟回城6秒，如果回城中被打断，再次回城需要再等6秒-如：搜索框搜索输入\" class=\"headerlink\" title=\"防抖类似于英雄联盟回城6秒，如果回城中被打断，再次回城需要再等6秒 (如：搜索框搜索输入)\"></a>防抖类似于英雄联盟回城6秒，如果回城中被打断，再次回城需要再等6秒 (如：搜索框搜索输入)</h2><h3 id=\"style-部分代码\"><a href=\"#style-部分代码\" class=\"headerlink\" title=\"style 部分代码\"></a>style 部分代码</h3>  <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-tag\">div</span> &#123;<br>  <span class=\"hljs-attribute\">width</span>:<span class=\"hljs-number\">200px</span>;<br>  <span class=\"hljs-attribute\">height</span>:<span class=\"hljs-number\">200px</span>;<br>  <span class=\"hljs-attribute\">background-color</span>:skyblue;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n<h3 id=\"div-部分代码\"><a href=\"#div-部分代码\" class=\"headerlink\" title=\"div 部分代码\"></a>div 部分代码</h3> <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span>&gt;</span><br> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span> <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"scrip-t部分代码\"><a href=\"#scrip-t部分代码\" class=\"headerlink\" title=\"scrip t部分代码\"></a>scrip t部分代码</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//获取元素</span><br><span class=\"hljs-keyword\">let</span> input = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementsByTagName</span>(<span class=\"hljs-string\">&#x27;input&#x27;</span>)[<span class=\"hljs-number\">0</span>]<br><span class=\"hljs-comment\">//防抖</span><br><span class=\"hljs-keyword\">let</span> timerId = <span class=\"hljs-literal\">null</span><br>input.<span class=\"hljs-property\">onkeyup</span> =<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br><br>  <span class=\"hljs-keyword\">if</span> (timerId !== <span class=\"hljs-literal\">null</span>) &#123;<br>    <span class=\"hljs-built_in\">clearTimeout</span>(timerId)<br>  &#125;<br>  timerId = <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> &#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;防抖&quot;</span>);<br>  &#125;, <span class=\"hljs-number\">2000</span>)<br>&#125;<br></code></pre></td></tr></table></figure>\n<h1 id=\"2-节流-（规定时间内-只触发一次）\"><a href=\"#2-节流-（规定时间内-只触发一次）\" class=\"headerlink\" title=\"2.节流 （规定时间内 只触发一次）\"></a>2.节流 （规定时间内 只触发一次）</h1><h2 id=\"逻辑：-高频率触发的事件-在指定的单位时间内，只响应第一次\"><a href=\"#逻辑：-高频率触发的事件-在指定的单位时间内，只响应第一次\" class=\"headerlink\" title=\"逻辑： 高频率触发的事件,在指定的单位时间内，只响应第一次\"></a>逻辑： 高频率触发的事件,在指定的单位时间内，只响应第一次</h2><h2 id=\"节流类似于英雄联盟里的英雄平A-一定是内点击多次只进行攻击一次-如：搜索框搜索输入\"><a href=\"#节流类似于英雄联盟里的英雄平A-一定是内点击多次只进行攻击一次-如：搜索框搜索输入\" class=\"headerlink\" title=\"节流类似于英雄联盟里的英雄平A   一定是内点击多次只进行攻击一次 (如：搜索框搜索输入)\"></a>节流类似于英雄联盟里的英雄平A   一定是内点击多次只进行攻击一次 (如：搜索框搜索输入)</h2><h3 id=\"script-部分代码\"><a href=\"#script-部分代码\" class=\"headerlink\" title=\"script 部分代码\"></a>script 部分代码</h3> <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//获取元素</span><br><span class=\"hljs-keyword\">let</span> div = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementsByTagName</span>(<span class=\"hljs-string\">&#x27;div&#x27;</span>)[<span class=\"hljs-number\">0</span>]<br><span class=\"hljs-comment\">//节流</span><br><span class=\"hljs-keyword\">let</span> timerout = <span class=\"hljs-number\">0</span><br>div.<span class=\"hljs-property\">onmousemove</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>  <span class=\"hljs-keyword\">if</span> (timerout !== <span class=\"hljs-number\">0</span>) &#123;<br>    <span class=\"hljs-keyword\">return</span><br>  &#125;<br>  timerout = <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> &#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;节流&quot;</span>);<br>    timerout = <span class=\"hljs-number\">0</span><br>  &#125;, <span class=\"hljs-number\">2000</span>)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n","site":{"data":{}},"wordcount":872,"excerpt":"","more":"<h1 id=\"防抖-（多次触发-只执行最后一次）\"><a href=\"#防抖-（多次触发-只执行最后一次）\" class=\"headerlink\" title=\"防抖 （多次触发 只执行最后一次）\"></a>防抖 （多次触发 只执行最后一次）</h1><h2 id=\"逻辑：-高频率触发的事件-在指定的单位时间内，只响应最后一次，如果在指定的时间内再次触发，则重新计算时间\"><a href=\"#逻辑：-高频率触发的事件-在指定的单位时间内，只响应最后一次，如果在指定的时间内再次触发，则重新计算时间\" class=\"headerlink\" title=\"逻辑： 高频率触发的事件,在指定的单位时间内，只响应最后一次，如果在指定的时间内再次触发，则重新计算时间\"></a>逻辑： 高频率触发的事件,在指定的单位时间内，只响应最后一次，如果在指定的时间内再次触发，则重新计算时间</h2><h2 id=\"防抖类似于英雄联盟回城6秒，如果回城中被打断，再次回城需要再等6秒-如：搜索框搜索输入\"><a href=\"#防抖类似于英雄联盟回城6秒，如果回城中被打断，再次回城需要再等6秒-如：搜索框搜索输入\" class=\"headerlink\" title=\"防抖类似于英雄联盟回城6秒，如果回城中被打断，再次回城需要再等6秒 (如：搜索框搜索输入)\"></a>防抖类似于英雄联盟回城6秒，如果回城中被打断，再次回城需要再等6秒 (如：搜索框搜索输入)</h2><h3 id=\"style-部分代码\"><a href=\"#style-部分代码\" class=\"headerlink\" title=\"style 部分代码\"></a>style 部分代码</h3>  <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-tag\">div</span> &#123;<br>  <span class=\"hljs-attribute\">width</span>:<span class=\"hljs-number\">200px</span>;<br>  <span class=\"hljs-attribute\">height</span>:<span class=\"hljs-number\">200px</span>;<br>  <span class=\"hljs-attribute\">background-color</span>:skyblue;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n<h3 id=\"div-部分代码\"><a href=\"#div-部分代码\" class=\"headerlink\" title=\"div 部分代码\"></a>div 部分代码</h3> <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span>&gt;</span><br> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span> <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"scrip-t部分代码\"><a href=\"#scrip-t部分代码\" class=\"headerlink\" title=\"scrip t部分代码\"></a>scrip t部分代码</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//获取元素</span><br><span class=\"hljs-keyword\">let</span> input = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementsByTagName</span>(<span class=\"hljs-string\">&#x27;input&#x27;</span>)[<span class=\"hljs-number\">0</span>]<br><span class=\"hljs-comment\">//防抖</span><br><span class=\"hljs-keyword\">let</span> timerId = <span class=\"hljs-literal\">null</span><br>input.<span class=\"hljs-property\">onkeyup</span> =<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br><br>  <span class=\"hljs-keyword\">if</span> (timerId !== <span class=\"hljs-literal\">null</span>) &#123;<br>    <span class=\"hljs-built_in\">clearTimeout</span>(timerId)<br>  &#125;<br>  timerId = <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> &#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;防抖&quot;</span>);<br>  &#125;, <span class=\"hljs-number\">2000</span>)<br>&#125;<br></code></pre></td></tr></table></figure>\n<h1 id=\"2-节流-（规定时间内-只触发一次）\"><a href=\"#2-节流-（规定时间内-只触发一次）\" class=\"headerlink\" title=\"2.节流 （规定时间内 只触发一次）\"></a>2.节流 （规定时间内 只触发一次）</h1><h2 id=\"逻辑：-高频率触发的事件-在指定的单位时间内，只响应第一次\"><a href=\"#逻辑：-高频率触发的事件-在指定的单位时间内，只响应第一次\" class=\"headerlink\" title=\"逻辑： 高频率触发的事件,在指定的单位时间内，只响应第一次\"></a>逻辑： 高频率触发的事件,在指定的单位时间内，只响应第一次</h2><h2 id=\"节流类似于英雄联盟里的英雄平A-一定是内点击多次只进行攻击一次-如：搜索框搜索输入\"><a href=\"#节流类似于英雄联盟里的英雄平A-一定是内点击多次只进行攻击一次-如：搜索框搜索输入\" class=\"headerlink\" title=\"节流类似于英雄联盟里的英雄平A   一定是内点击多次只进行攻击一次 (如：搜索框搜索输入)\"></a>节流类似于英雄联盟里的英雄平A   一定是内点击多次只进行攻击一次 (如：搜索框搜索输入)</h2><h3 id=\"script-部分代码\"><a href=\"#script-部分代码\" class=\"headerlink\" title=\"script 部分代码\"></a>script 部分代码</h3> <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//获取元素</span><br><span class=\"hljs-keyword\">let</span> div = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementsByTagName</span>(<span class=\"hljs-string\">&#x27;div&#x27;</span>)[<span class=\"hljs-number\">0</span>]<br><span class=\"hljs-comment\">//节流</span><br><span class=\"hljs-keyword\">let</span> timerout = <span class=\"hljs-number\">0</span><br>div.<span class=\"hljs-property\">onmousemove</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>  <span class=\"hljs-keyword\">if</span> (timerout !== <span class=\"hljs-number\">0</span>) &#123;<br>    <span class=\"hljs-keyword\">return</span><br>  &#125;<br>  timerout = <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> &#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;节流&quot;</span>);<br>    timerout = <span class=\"hljs-number\">0</span><br>  &#125;, <span class=\"hljs-number\">2000</span>)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n"},{"title":"fliter+indexOf 数组去重","index_img":"/img/fluid03.png","date":"2023-02-16T16:00:00.000Z","_content":"# 一.去掉重复的留下相同的，返回一个新的数组。\n## 逻辑：\n### 1.filter() 过滤数组，会根据条件返回新的数组（两个数组指向同一个内存属于浅拷贝）\n### 2.indexOf() 会返回当前数字 首次 出现的索引\n\n```\n    let arr = [1, 4, 5, 8, 2, 3, 8, 2, 6, 8, ]\n   \n    let arry = arr.filter((item, i) =>\n      \n      arr.indexOf(item) === i\n    )\n    console.log(arry);\n\n    //arry[[1, 4, 5, 8, 2, 3,6]\n``` \n\n\n","source":"_posts/数组去重.md","raw":"---\ntitle: fliter+indexOf 数组去重\ntags: [telescope]\nindex_img: /img/fluid03.png\ndate: 2023-2-17\n---\n# 一.去掉重复的留下相同的，返回一个新的数组。\n## 逻辑：\n### 1.filter() 过滤数组，会根据条件返回新的数组（两个数组指向同一个内存属于浅拷贝）\n### 2.indexOf() 会返回当前数字 首次 出现的索引\n\n```\n    let arr = [1, 4, 5, 8, 2, 3, 8, 2, 6, 8, ]\n   \n    let arry = arr.filter((item, i) =>\n      \n      arr.indexOf(item) === i\n    )\n    console.log(arry);\n\n    //arry[[1, 4, 5, 8, 2, 3,6]\n``` \n\n\n","slug":"数组去重","published":1,"updated":"2023-02-18T00:14:59.252Z","_id":"cle94tbx400015osv8rjk8bxx","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"一-去掉重复的留下相同的，返回一个新的数组。\"><a href=\"#一-去掉重复的留下相同的，返回一个新的数组。\" class=\"headerlink\" title=\"一.去掉重复的留下相同的，返回一个新的数组。\"></a>一.去掉重复的留下相同的，返回一个新的数组。</h1><h2 id=\"逻辑：\"><a href=\"#逻辑：\" class=\"headerlink\" title=\"逻辑：\"></a>逻辑：</h2><h3 id=\"1-filter-过滤数组，会根据条件返回新的数组（两个数组指向同一个内存属于浅拷贝）\"><a href=\"#1-filter-过滤数组，会根据条件返回新的数组（两个数组指向同一个内存属于浅拷贝）\" class=\"headerlink\" title=\"1.filter() 过滤数组，会根据条件返回新的数组（两个数组指向同一个内存属于浅拷贝）\"></a>1.filter() 过滤数组，会根据条件返回新的数组（两个数组指向同一个内存属于浅拷贝）</h3><h3 id=\"2-indexOf-会返回当前数字-首次-出现的索引\"><a href=\"#2-indexOf-会返回当前数字-首次-出现的索引\" class=\"headerlink\" title=\"2.indexOf() 会返回当前数字 首次 出现的索引\"></a>2.indexOf() 会返回当前数字 首次 出现的索引</h3><figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\">let arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">8</span>, ]<br>   <br>let arry = arr.<span class=\"hljs-built_in\">filter</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">item, i</span>) =&gt;</span><br>  <br>  arr.<span class=\"hljs-built_in\">indexOf</span>(item) === i<br>)<br><span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(arry);<br><br><span class=\"hljs-comment\">//arry[[1, 4, 5, 8, 2, 3,6]</span><br></code></pre></td></tr></table></figure>\n\n\n","site":{"data":{}},"wordcount":226,"excerpt":"","more":"<h1 id=\"一-去掉重复的留下相同的，返回一个新的数组。\"><a href=\"#一-去掉重复的留下相同的，返回一个新的数组。\" class=\"headerlink\" title=\"一.去掉重复的留下相同的，返回一个新的数组。\"></a>一.去掉重复的留下相同的，返回一个新的数组。</h1><h2 id=\"逻辑：\"><a href=\"#逻辑：\" class=\"headerlink\" title=\"逻辑：\"></a>逻辑：</h2><h3 id=\"1-filter-过滤数组，会根据条件返回新的数组（两个数组指向同一个内存属于浅拷贝）\"><a href=\"#1-filter-过滤数组，会根据条件返回新的数组（两个数组指向同一个内存属于浅拷贝）\" class=\"headerlink\" title=\"1.filter() 过滤数组，会根据条件返回新的数组（两个数组指向同一个内存属于浅拷贝）\"></a>1.filter() 过滤数组，会根据条件返回新的数组（两个数组指向同一个内存属于浅拷贝）</h3><h3 id=\"2-indexOf-会返回当前数字-首次-出现的索引\"><a href=\"#2-indexOf-会返回当前数字-首次-出现的索引\" class=\"headerlink\" title=\"2.indexOf() 会返回当前数字 首次 出现的索引\"></a>2.indexOf() 会返回当前数字 首次 出现的索引</h3><figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\">let arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">8</span>, ]<br>   <br>let arry = arr.<span class=\"hljs-built_in\">filter</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">item, i</span>) =&gt;</span><br>  <br>  arr.<span class=\"hljs-built_in\">indexOf</span>(item) === i<br>)<br><span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(arry);<br><br><span class=\"hljs-comment\">//arry[[1, 4, 5, 8, 2, 3,6]</span><br></code></pre></td></tr></table></figure>\n\n\n"},{"title":"promise 解决回调地狱的问题","index_img":"/img/default3.jpeg","date":"2023-02-17T16:00:00.000Z","_content":"# promise 解决回调地狱的问题\n ## 一、准备两个事件\n ```\n\n    //获取奶茶的方法\n    function getTea(fn) {\n      setTimeout(() => {\n        fn(\"喝奶茶\")\n      }, 500);\n    }\n\n    //获取火锅的方法\n    function getHotpot(fn) {\n      setTimeout(() => {\n        fn(\"吃火锅\")\n      }, 1000);\n    }\n```\n## 二、用回调地狱的方法按自己想要的顺序获取事件\n### 我们可以看出 因为\"吃火锅\"定时器事件比 \"喝奶茶\"定时器事件要长，\n### 所以\"吃火锅\"函数要将\"喝奶茶\"函数包裹在里面，如果继续增加就要层层嵌套形成了回调地狱，不方便维护。\n\n```\n    //调用获取火锅的方法\n\n    getHotpot(((data) => {\n      console.log(data);\n\n      //调用获取奶茶的方法\n      getTea(((data) => {\n        console.log(data);\n      }))\n    }))  \n ```\n ## 三、用promise的方法按自己想要的顺序获取事件\n```\n   ###先new一个 \"喝奶茶\" 的Promise，\n    function getTea() {\n      return new Promise(function (resolve) {\n        setTimeout(() => {\n          resolve(\"喝奶茶\")\n        }, 500)\n      })\n\n    }\n```\n  ### 再new一个 \"吃火锅\" 的Promise，\n```\n    function getHotpot() {\n      return new Promise(function (resolve) {\n        setTimeout(() => {\n          resolve(\"吃火锅\")\n        }, 1000);\n      })\n    }\n```\n  ### 1.用 .then 的方法获取数据--链式操作\n```\n       getHotpot().then(function (data) {\n         console.log(data); //这是吃火锅的数据\n\n         return getTea()\n       }).then(function (date) {\n         console.log(date); //这是喝奶茶的数据\n    \n       }) */\n```\n### 2.用async 函数调用 更精简，看起来像是同步的。\n```\n    async function getData() {\n\n      //直接获取 resolve 传过来的数据\n      let hotPot = await getHotpot(); //吃火锅\n      console.log(hotPot);\n\n      let Tea = await getTea(); //喝奶茶\n      console.log(Tea);\n    }\n\n    //调用getData函数\n    getData()\n```\n\n","source":"_posts/回调地狱与promise.md","raw":"---\ntitle: promise 解决回调地狱的问题\ntags: [telescope]\nindex_img: /img/default3.jpeg\ndate: 2023-2-18\n---\n# promise 解决回调地狱的问题\n ## 一、准备两个事件\n ```\n\n    //获取奶茶的方法\n    function getTea(fn) {\n      setTimeout(() => {\n        fn(\"喝奶茶\")\n      }, 500);\n    }\n\n    //获取火锅的方法\n    function getHotpot(fn) {\n      setTimeout(() => {\n        fn(\"吃火锅\")\n      }, 1000);\n    }\n```\n## 二、用回调地狱的方法按自己想要的顺序获取事件\n### 我们可以看出 因为\"吃火锅\"定时器事件比 \"喝奶茶\"定时器事件要长，\n### 所以\"吃火锅\"函数要将\"喝奶茶\"函数包裹在里面，如果继续增加就要层层嵌套形成了回调地狱，不方便维护。\n\n```\n    //调用获取火锅的方法\n\n    getHotpot(((data) => {\n      console.log(data);\n\n      //调用获取奶茶的方法\n      getTea(((data) => {\n        console.log(data);\n      }))\n    }))  \n ```\n ## 三、用promise的方法按自己想要的顺序获取事件\n```\n   ###先new一个 \"喝奶茶\" 的Promise，\n    function getTea() {\n      return new Promise(function (resolve) {\n        setTimeout(() => {\n          resolve(\"喝奶茶\")\n        }, 500)\n      })\n\n    }\n```\n  ### 再new一个 \"吃火锅\" 的Promise，\n```\n    function getHotpot() {\n      return new Promise(function (resolve) {\n        setTimeout(() => {\n          resolve(\"吃火锅\")\n        }, 1000);\n      })\n    }\n```\n  ### 1.用 .then 的方法获取数据--链式操作\n```\n       getHotpot().then(function (data) {\n         console.log(data); //这是吃火锅的数据\n\n         return getTea()\n       }).then(function (date) {\n         console.log(date); //这是喝奶茶的数据\n    \n       }) */\n```\n### 2.用async 函数调用 更精简，看起来像是同步的。\n```\n    async function getData() {\n\n      //直接获取 resolve 传过来的数据\n      let hotPot = await getHotpot(); //吃火锅\n      console.log(hotPot);\n\n      let Tea = await getTea(); //喝奶茶\n      console.log(Tea);\n    }\n\n    //调用getData函数\n    getData()\n```\n\n","slug":"回调地狱与promise","published":1,"updated":"2023-02-18T00:24:13.050Z","_id":"cle97fd7z00035osv6wtqdazu","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"promise-解决回调地狱的问题\"><a href=\"#promise-解决回调地狱的问题\" class=\"headerlink\" title=\"promise 解决回调地狱的问题\"></a>promise 解决回调地狱的问题</h1><h2 id=\"一、准备两个事件\"><a href=\"#一、准备两个事件\" class=\"headerlink\" title=\"一、准备两个事件\"></a>一、准备两个事件</h2> <figure class=\"highlight zephir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs zephir\"><br><span class=\"hljs-comment\">//获取奶茶的方法</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getTea</span><span class=\"hljs-params\">(fn)</span> </span>&#123;<br>  setTimeout(() =&gt; &#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span><span class=\"hljs-params\">(<span class=\"hljs-string\">&quot;喝奶茶&quot;</span>)</span></span><br><span class=\"hljs-function\">  &#125;, 500)</span>;<br>&#125;<br><br><span class=\"hljs-comment\">//获取火锅的方法</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getHotpot</span><span class=\"hljs-params\">(fn)</span> </span>&#123;<br>  setTimeout(() =&gt; &#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span><span class=\"hljs-params\">(<span class=\"hljs-string\">&quot;吃火锅&quot;</span>)</span></span><br><span class=\"hljs-function\">  &#125;, 1000)</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h2 id=\"二、用回调地狱的方法按自己想要的顺序获取事件\"><a href=\"#二、用回调地狱的方法按自己想要的顺序获取事件\" class=\"headerlink\" title=\"二、用回调地狱的方法按自己想要的顺序获取事件\"></a>二、用回调地狱的方法按自己想要的顺序获取事件</h2><h3 id=\"我们可以看出-因为”吃火锅”定时器事件比-“喝奶茶”定时器事件要长，\"><a href=\"#我们可以看出-因为”吃火锅”定时器事件比-“喝奶茶”定时器事件要长，\" class=\"headerlink\" title=\"我们可以看出 因为”吃火锅”定时器事件比 “喝奶茶”定时器事件要长，\"></a>我们可以看出 因为”吃火锅”定时器事件比 “喝奶茶”定时器事件要长，</h3><h3 id=\"所以”吃火锅”函数要将”喝奶茶”函数包裹在里面，如果继续增加就要层层嵌套形成了回调地狱，不方便维护。\"><a href=\"#所以”吃火锅”函数要将”喝奶茶”函数包裹在里面，如果继续增加就要层层嵌套形成了回调地狱，不方便维护。\" class=\"headerlink\" title=\"所以”吃火锅”函数要将”喝奶茶”函数包裹在里面，如果继续增加就要层层嵌套形成了回调地狱，不方便维护。\"></a>所以”吃火锅”函数要将”喝奶茶”函数包裹在里面，如果继续增加就要层层嵌套形成了回调地狱，不方便维护。</h3><figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\"><span class=\"hljs-comment\">//调用获取火锅的方法</span><br><br>getHotpot(<span class=\"hljs-function\">(<span class=\"hljs-params\">(data</span>) =&gt;</span> &#123;<br>  <span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(data);<br><br>  <span class=\"hljs-comment\">//调用获取奶茶的方法</span><br>  getTea(<span class=\"hljs-function\">(<span class=\"hljs-params\">(data</span>) =&gt;</span> &#123;<br>    <span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(data);<br>  &#125;))<br>&#125;))  <br></code></pre></td></tr></table></figure>\n<h2 id=\"三、用promise的方法按自己想要的顺序获取事件\"><a href=\"#三、用promise的方法按自己想要的顺序获取事件\" class=\"headerlink\" title=\"三、用promise的方法按自己想要的顺序获取事件\"></a>三、用promise的方法按自己想要的顺序获取事件</h2><figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">###先<span class=\"hljs-keyword\">new</span>一个 <span class=\"hljs-string\">&quot;喝奶茶&quot;</span> 的Promise，<br> <span class=\"hljs-keyword\">function</span> get<span class=\"hljs-constructor\">Tea()</span> &#123;<br>   return <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">Promise(<span class=\"hljs-params\">function</span> (<span class=\"hljs-params\">resolve</span>)</span> &#123;<br>     set<span class=\"hljs-constructor\">Timeout(()</span> =&gt; &#123;<br>       resolve(<span class=\"hljs-string\">&quot;喝奶茶&quot;</span>)<br>     &#125;, <span class=\"hljs-number\">500</span>)<br>   &#125;)<br><br> &#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"再new一个-“吃火锅”-的Promise，\"><a href=\"#再new一个-“吃火锅”-的Promise，\" class=\"headerlink\" title=\"再new一个 “吃火锅” 的Promise，\"></a>再new一个 “吃火锅” 的Promise，</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">getHotpot</span>(<span class=\"hljs-params\"></span>) &#123;<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">resolve</span>) &#123;<br>    <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> &#123;<br>      <span class=\"hljs-title function_\">resolve</span>(<span class=\"hljs-string\">&quot;吃火锅&quot;</span>)<br>    &#125;, <span class=\"hljs-number\">1000</span>);<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"1-用-then-的方法获取数据–链式操作\"><a href=\"#1-用-then-的方法获取数据–链式操作\" class=\"headerlink\" title=\"1.用 .then 的方法获取数据–链式操作\"></a>1.用 .then 的方法获取数据–链式操作</h3><figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\">getHotpot().then(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) &#123;<br>  <span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(data); <span class=\"hljs-comment\">//这是吃火锅的数据</span><br><br>  <span class=\"hljs-keyword\">return</span> getTea()<br>&#125;).then(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">date</span>) &#123;<br>  <span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(<span class=\"hljs-built_in\">date</span>); <span class=\"hljs-comment\">//这是喝奶茶的数据</span><br>    <br>&#125;) */<br></code></pre></td></tr></table></figure>\n<h3 id=\"2-用async-函数调用-更精简，看起来像是同步的。\"><a href=\"#2-用async-函数调用-更精简，看起来像是同步的。\" class=\"headerlink\" title=\"2.用async 函数调用 更精简，看起来像是同步的。\"></a>2.用async 函数调用 更精简，看起来像是同步的。</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">getData</span>(<span class=\"hljs-params\"></span>) &#123;<br><br>  <span class=\"hljs-comment\">//直接获取 resolve 传过来的数据</span><br>  <span class=\"hljs-keyword\">let</span> hotPot = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">getHotpot</span>(); <span class=\"hljs-comment\">//吃火锅</span><br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(hotPot);<br><br>  <span class=\"hljs-keyword\">let</span> <span class=\"hljs-title class_\">Tea</span> = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">getTea</span>(); <span class=\"hljs-comment\">//喝奶茶</span><br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title class_\">Tea</span>);<br>&#125;<br><br><span class=\"hljs-comment\">//调用getData函数</span><br><span class=\"hljs-title function_\">getData</span>()<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"wordcount":1231,"excerpt":"","more":"<h1 id=\"promise-解决回调地狱的问题\"><a href=\"#promise-解决回调地狱的问题\" class=\"headerlink\" title=\"promise 解决回调地狱的问题\"></a>promise 解决回调地狱的问题</h1><h2 id=\"一、准备两个事件\"><a href=\"#一、准备两个事件\" class=\"headerlink\" title=\"一、准备两个事件\"></a>一、准备两个事件</h2> <figure class=\"highlight zephir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs zephir\"><br><span class=\"hljs-comment\">//获取奶茶的方法</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getTea</span><span class=\"hljs-params\">(fn)</span> </span>&#123;<br>  setTimeout(() =&gt; &#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span><span class=\"hljs-params\">(<span class=\"hljs-string\">&quot;喝奶茶&quot;</span>)</span></span><br><span class=\"hljs-function\">  &#125;, 500)</span>;<br>&#125;<br><br><span class=\"hljs-comment\">//获取火锅的方法</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getHotpot</span><span class=\"hljs-params\">(fn)</span> </span>&#123;<br>  setTimeout(() =&gt; &#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span><span class=\"hljs-params\">(<span class=\"hljs-string\">&quot;吃火锅&quot;</span>)</span></span><br><span class=\"hljs-function\">  &#125;, 1000)</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h2 id=\"二、用回调地狱的方法按自己想要的顺序获取事件\"><a href=\"#二、用回调地狱的方法按自己想要的顺序获取事件\" class=\"headerlink\" title=\"二、用回调地狱的方法按自己想要的顺序获取事件\"></a>二、用回调地狱的方法按自己想要的顺序获取事件</h2><h3 id=\"我们可以看出-因为”吃火锅”定时器事件比-“喝奶茶”定时器事件要长，\"><a href=\"#我们可以看出-因为”吃火锅”定时器事件比-“喝奶茶”定时器事件要长，\" class=\"headerlink\" title=\"我们可以看出 因为”吃火锅”定时器事件比 “喝奶茶”定时器事件要长，\"></a>我们可以看出 因为”吃火锅”定时器事件比 “喝奶茶”定时器事件要长，</h3><h3 id=\"所以”吃火锅”函数要将”喝奶茶”函数包裹在里面，如果继续增加就要层层嵌套形成了回调地狱，不方便维护。\"><a href=\"#所以”吃火锅”函数要将”喝奶茶”函数包裹在里面，如果继续增加就要层层嵌套形成了回调地狱，不方便维护。\" class=\"headerlink\" title=\"所以”吃火锅”函数要将”喝奶茶”函数包裹在里面，如果继续增加就要层层嵌套形成了回调地狱，不方便维护。\"></a>所以”吃火锅”函数要将”喝奶茶”函数包裹在里面，如果继续增加就要层层嵌套形成了回调地狱，不方便维护。</h3><figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\"><span class=\"hljs-comment\">//调用获取火锅的方法</span><br><br>getHotpot(<span class=\"hljs-function\">(<span class=\"hljs-params\">(data</span>) =&gt;</span> &#123;<br>  <span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(data);<br><br>  <span class=\"hljs-comment\">//调用获取奶茶的方法</span><br>  getTea(<span class=\"hljs-function\">(<span class=\"hljs-params\">(data</span>) =&gt;</span> &#123;<br>    <span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(data);<br>  &#125;))<br>&#125;))  <br></code></pre></td></tr></table></figure>\n<h2 id=\"三、用promise的方法按自己想要的顺序获取事件\"><a href=\"#三、用promise的方法按自己想要的顺序获取事件\" class=\"headerlink\" title=\"三、用promise的方法按自己想要的顺序获取事件\"></a>三、用promise的方法按自己想要的顺序获取事件</h2><figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">###先<span class=\"hljs-keyword\">new</span>一个 <span class=\"hljs-string\">&quot;喝奶茶&quot;</span> 的Promise，<br> <span class=\"hljs-keyword\">function</span> get<span class=\"hljs-constructor\">Tea()</span> &#123;<br>   return <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">Promise(<span class=\"hljs-params\">function</span> (<span class=\"hljs-params\">resolve</span>)</span> &#123;<br>     set<span class=\"hljs-constructor\">Timeout(()</span> =&gt; &#123;<br>       resolve(<span class=\"hljs-string\">&quot;喝奶茶&quot;</span>)<br>     &#125;, <span class=\"hljs-number\">500</span>)<br>   &#125;)<br><br> &#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"再new一个-“吃火锅”-的Promise，\"><a href=\"#再new一个-“吃火锅”-的Promise，\" class=\"headerlink\" title=\"再new一个 “吃火锅” 的Promise，\"></a>再new一个 “吃火锅” 的Promise，</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">getHotpot</span>(<span class=\"hljs-params\"></span>) &#123;<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">resolve</span>) &#123;<br>    <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> &#123;<br>      <span class=\"hljs-title function_\">resolve</span>(<span class=\"hljs-string\">&quot;吃火锅&quot;</span>)<br>    &#125;, <span class=\"hljs-number\">1000</span>);<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"1-用-then-的方法获取数据–链式操作\"><a href=\"#1-用-then-的方法获取数据–链式操作\" class=\"headerlink\" title=\"1.用 .then 的方法获取数据–链式操作\"></a>1.用 .then 的方法获取数据–链式操作</h3><figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\">getHotpot().then(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) &#123;<br>  <span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(data); <span class=\"hljs-comment\">//这是吃火锅的数据</span><br><br>  <span class=\"hljs-keyword\">return</span> getTea()<br>&#125;).then(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">date</span>) &#123;<br>  <span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(<span class=\"hljs-built_in\">date</span>); <span class=\"hljs-comment\">//这是喝奶茶的数据</span><br>    <br>&#125;) */<br></code></pre></td></tr></table></figure>\n<h3 id=\"2-用async-函数调用-更精简，看起来像是同步的。\"><a href=\"#2-用async-函数调用-更精简，看起来像是同步的。\" class=\"headerlink\" title=\"2.用async 函数调用 更精简，看起来像是同步的。\"></a>2.用async 函数调用 更精简，看起来像是同步的。</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">getData</span>(<span class=\"hljs-params\"></span>) &#123;<br><br>  <span class=\"hljs-comment\">//直接获取 resolve 传过来的数据</span><br>  <span class=\"hljs-keyword\">let</span> hotPot = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">getHotpot</span>(); <span class=\"hljs-comment\">//吃火锅</span><br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(hotPot);<br><br>  <span class=\"hljs-keyword\">let</span> <span class=\"hljs-title class_\">Tea</span> = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">getTea</span>(); <span class=\"hljs-comment\">//喝奶茶</span><br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title class_\">Tea</span>);<br>&#125;<br><br><span class=\"hljs-comment\">//调用getData函数</span><br><span class=\"hljs-title function_\">getData</span>()<br></code></pre></td></tr></table></figure>\n\n"},{"title":"电影票选座","index_img":"/img/dy.jpg","date":"2022-12-09T16:00:00.000Z","_content":"# 电影票选座案例\n\n### css 代码\n```\n    * {\n      margin: 0;\n      padding: 0;\n      list-style: none;\n    }\n\n    h1 {\n      display: flex;\n      justify-content: center;\n      padding-top: 20px;\n\n    }\n\n    li {\n      background-color: #ccc;\n      border: 1px solid #888;\n      cursor: pointer;\n    }\n\n    ul {\n      margin: 10px auto;\n      border: 1px solid #ccc;\n      width: 550px;\n      height: 390px;\n      display: grid;\n      grid-template-columns: 80px 80px 80px 80px 80px 80px;\n      grid-template-rows: 40px 40px 40px 40px 40px 40px;\n      grid-gap: 10px 10px;\n\n    }\n\n    div {\n      margin-left: 40px;\n      text-align: center;\n      line-height: 80px;\n      width: 280px;\n      height: 80px;\n      border: 1px solid #ccc;\n    }\n\n    .click {\n      font-size: 10px;\n      text-align: center;\n      line-height: 40px;\n      font-family: '仿宋';\n      font-weight: bold;\n      color: #333;\n      background-color: orange;\n      border: 1px solid red;\n    }\n``` \n### html 代码\n```\n  <h1>电影票选座</h1>\n  <ul>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <p style=\"clear:both\"></p>\n    <div>屏幕中央</div>\n  </ul>\n```\n\n## 逻辑：没有cilck类的时候，进行添加，同时文本进行赋值；反之清空click类和文本值\n### javascript 代码\n```\n    let lis = document.getElementsByTagName('li');\n    for (let i = 0; i < lis.length; i++) {\n      lis[i].onclick = function () {\n\n        //获取文本节点\n        let res = this.getAttribute('class');\n        if (!res) {\n\n          //如果不存在 class 就赋予click的样式\n          this.setAttribute('class', 'click');\n          this.innerText = '座位已选';\n        } else {\n          \n          //如果存在 class 就设置为空\n          this.setAttribute('class', '');\n          this.innerText = '';\n        }\n\n      }\n    }\n```\n","source":"_posts/电影票选座案例.md","raw":"---\ntitle: 电影票选座\ntags: [telescope]\nindex_img: /img/dy.jpg\ndate: 2022-12-10\n---\n# 电影票选座案例\n\n### css 代码\n```\n    * {\n      margin: 0;\n      padding: 0;\n      list-style: none;\n    }\n\n    h1 {\n      display: flex;\n      justify-content: center;\n      padding-top: 20px;\n\n    }\n\n    li {\n      background-color: #ccc;\n      border: 1px solid #888;\n      cursor: pointer;\n    }\n\n    ul {\n      margin: 10px auto;\n      border: 1px solid #ccc;\n      width: 550px;\n      height: 390px;\n      display: grid;\n      grid-template-columns: 80px 80px 80px 80px 80px 80px;\n      grid-template-rows: 40px 40px 40px 40px 40px 40px;\n      grid-gap: 10px 10px;\n\n    }\n\n    div {\n      margin-left: 40px;\n      text-align: center;\n      line-height: 80px;\n      width: 280px;\n      height: 80px;\n      border: 1px solid #ccc;\n    }\n\n    .click {\n      font-size: 10px;\n      text-align: center;\n      line-height: 40px;\n      font-family: '仿宋';\n      font-weight: bold;\n      color: #333;\n      background-color: orange;\n      border: 1px solid red;\n    }\n``` \n### html 代码\n```\n  <h1>电影票选座</h1>\n  <ul>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <p style=\"clear:both\"></p>\n    <div>屏幕中央</div>\n  </ul>\n```\n\n## 逻辑：没有cilck类的时候，进行添加，同时文本进行赋值；反之清空click类和文本值\n### javascript 代码\n```\n    let lis = document.getElementsByTagName('li');\n    for (let i = 0; i < lis.length; i++) {\n      lis[i].onclick = function () {\n\n        //获取文本节点\n        let res = this.getAttribute('class');\n        if (!res) {\n\n          //如果不存在 class 就赋予click的样式\n          this.setAttribute('class', 'click');\n          this.innerText = '座位已选';\n        } else {\n          \n          //如果存在 class 就设置为空\n          this.setAttribute('class', '');\n          this.innerText = '';\n        }\n\n      }\n    }\n```\n","slug":"电影票选座案例","published":1,"updated":"2023-02-18T03:11:07.201Z","_id":"cle9c9s1f0000fcsvd1cv82zq","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"电影票选座案例\"><a href=\"#电影票选座案例\" class=\"headerlink\" title=\"电影票选座案例\"></a>电影票选座案例</h1><h3 id=\"css-代码\"><a href=\"#css-代码\" class=\"headerlink\" title=\"css 代码\"></a>css 代码</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\">* &#123;<br>  <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">0</span>;<br>  <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">0</span>;<br>  <span class=\"hljs-attribute\">list-style</span>: none;<br>&#125;<br><br><span class=\"hljs-selector-tag\">h1</span> &#123;<br>  <span class=\"hljs-attribute\">display</span>: flex;<br>  <span class=\"hljs-attribute\">justify-content</span>: center;<br>  <span class=\"hljs-attribute\">padding-top</span>: <span class=\"hljs-number\">20px</span>;<br><br>&#125;<br><br><span class=\"hljs-selector-tag\">li</span> &#123;<br>  <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#ccc</span>;<br>  <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">1px</span> solid <span class=\"hljs-number\">#888</span>;<br>  <span class=\"hljs-attribute\">cursor</span>: pointer;<br>&#125;<br><br><span class=\"hljs-selector-tag\">ul</span> &#123;<br>  <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">10px</span> auto;<br>  <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">1px</span> solid <span class=\"hljs-number\">#ccc</span>;<br>  <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">550px</span>;<br>  <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">390px</span>;<br>  <span class=\"hljs-attribute\">display</span>: grid;<br>  <span class=\"hljs-attribute\">grid-template-columns</span>: <span class=\"hljs-number\">80px</span> <span class=\"hljs-number\">80px</span> <span class=\"hljs-number\">80px</span> <span class=\"hljs-number\">80px</span> <span class=\"hljs-number\">80px</span> <span class=\"hljs-number\">80px</span>;<br>  <span class=\"hljs-attribute\">grid-template-rows</span>: <span class=\"hljs-number\">40px</span> <span class=\"hljs-number\">40px</span> <span class=\"hljs-number\">40px</span> <span class=\"hljs-number\">40px</span> <span class=\"hljs-number\">40px</span> <span class=\"hljs-number\">40px</span>;<br>  <span class=\"hljs-attribute\">grid-gap</span>: <span class=\"hljs-number\">10px</span> <span class=\"hljs-number\">10px</span>;<br><br>&#125;<br><br><span class=\"hljs-selector-tag\">div</span> &#123;<br>  <span class=\"hljs-attribute\">margin-left</span>: <span class=\"hljs-number\">40px</span>;<br>  <span class=\"hljs-attribute\">text-align</span>: center;<br>  <span class=\"hljs-attribute\">line-height</span>: <span class=\"hljs-number\">80px</span>;<br>  <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">280px</span>;<br>  <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">80px</span>;<br>  <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">1px</span> solid <span class=\"hljs-number\">#ccc</span>;<br>&#125;<br><br><span class=\"hljs-selector-class\">.click</span> &#123;<br>  <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">10px</span>;<br>  <span class=\"hljs-attribute\">text-align</span>: center;<br>  <span class=\"hljs-attribute\">line-height</span>: <span class=\"hljs-number\">40px</span>;<br>  <span class=\"hljs-attribute\">font-family</span>: <span class=\"hljs-string\">&#x27;仿宋&#x27;</span>;<br>  <span class=\"hljs-attribute\">font-weight</span>: bold;<br>  <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#333</span>;<br>  <span class=\"hljs-attribute\">background-color</span>: orange;<br>  <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">1px</span> solid red;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"html-代码\"><a href=\"#html-代码\" class=\"headerlink\" title=\"html 代码\"></a>html 代码</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>电影票选座<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">&quot;clear:both&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>屏幕中央<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"逻辑：没有cilck类的时候，进行添加，同时文本进行赋值；反之清空click类和文本值\"><a href=\"#逻辑：没有cilck类的时候，进行添加，同时文本进行赋值；反之清空click类和文本值\" class=\"headerlink\" title=\"逻辑：没有cilck类的时候，进行添加，同时文本进行赋值；反之清空click类和文本值\"></a>逻辑：没有cilck类的时候，进行添加，同时文本进行赋值；反之清空click类和文本值</h2><h3 id=\"javascript-代码\"><a href=\"#javascript-代码\" class=\"headerlink\" title=\"javascript 代码\"></a>javascript 代码</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">let</span> lis = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementsByTagName</span>(<span class=\"hljs-string\">&#x27;li&#x27;</span>);<br><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; lis.<span class=\"hljs-property\">length</span>; i++) &#123;<br>  lis[i].<span class=\"hljs-property\">onclick</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br><br>    <span class=\"hljs-comment\">//获取文本节点</span><br>    <span class=\"hljs-keyword\">let</span> res = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">getAttribute</span>(<span class=\"hljs-string\">&#x27;class&#x27;</span>);<br>    <span class=\"hljs-keyword\">if</span> (!res) &#123;<br><br>      <span class=\"hljs-comment\">//如果不存在 class 就赋予click的样式</span><br>      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">setAttribute</span>(<span class=\"hljs-string\">&#x27;class&#x27;</span>, <span class=\"hljs-string\">&#x27;click&#x27;</span>);<br>      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">innerText</span> = <span class=\"hljs-string\">&#x27;座位已选&#x27;</span>;<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>      <br>      <span class=\"hljs-comment\">//如果存在 class 就设置为空</span><br>      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">setAttribute</span>(<span class=\"hljs-string\">&#x27;class&#x27;</span>, <span class=\"hljs-string\">&#x27;&#x27;</span>);<br>      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">innerText</span> = <span class=\"hljs-string\">&#x27;&#x27;</span>;<br>    &#125;<br><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n","site":{"data":{}},"wordcount":2230,"excerpt":"","more":"<h1 id=\"电影票选座案例\"><a href=\"#电影票选座案例\" class=\"headerlink\" title=\"电影票选座案例\"></a>电影票选座案例</h1><h3 id=\"css-代码\"><a href=\"#css-代码\" class=\"headerlink\" title=\"css 代码\"></a>css 代码</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\">* &#123;<br>  <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">0</span>;<br>  <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">0</span>;<br>  <span class=\"hljs-attribute\">list-style</span>: none;<br>&#125;<br><br><span class=\"hljs-selector-tag\">h1</span> &#123;<br>  <span class=\"hljs-attribute\">display</span>: flex;<br>  <span class=\"hljs-attribute\">justify-content</span>: center;<br>  <span class=\"hljs-attribute\">padding-top</span>: <span class=\"hljs-number\">20px</span>;<br><br>&#125;<br><br><span class=\"hljs-selector-tag\">li</span> &#123;<br>  <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#ccc</span>;<br>  <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">1px</span> solid <span class=\"hljs-number\">#888</span>;<br>  <span class=\"hljs-attribute\">cursor</span>: pointer;<br>&#125;<br><br><span class=\"hljs-selector-tag\">ul</span> &#123;<br>  <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">10px</span> auto;<br>  <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">1px</span> solid <span class=\"hljs-number\">#ccc</span>;<br>  <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">550px</span>;<br>  <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">390px</span>;<br>  <span class=\"hljs-attribute\">display</span>: grid;<br>  <span class=\"hljs-attribute\">grid-template-columns</span>: <span class=\"hljs-number\">80px</span> <span class=\"hljs-number\">80px</span> <span class=\"hljs-number\">80px</span> <span class=\"hljs-number\">80px</span> <span class=\"hljs-number\">80px</span> <span class=\"hljs-number\">80px</span>;<br>  <span class=\"hljs-attribute\">grid-template-rows</span>: <span class=\"hljs-number\">40px</span> <span class=\"hljs-number\">40px</span> <span class=\"hljs-number\">40px</span> <span class=\"hljs-number\">40px</span> <span class=\"hljs-number\">40px</span> <span class=\"hljs-number\">40px</span>;<br>  <span class=\"hljs-attribute\">grid-gap</span>: <span class=\"hljs-number\">10px</span> <span class=\"hljs-number\">10px</span>;<br><br>&#125;<br><br><span class=\"hljs-selector-tag\">div</span> &#123;<br>  <span class=\"hljs-attribute\">margin-left</span>: <span class=\"hljs-number\">40px</span>;<br>  <span class=\"hljs-attribute\">text-align</span>: center;<br>  <span class=\"hljs-attribute\">line-height</span>: <span class=\"hljs-number\">80px</span>;<br>  <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">280px</span>;<br>  <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">80px</span>;<br>  <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">1px</span> solid <span class=\"hljs-number\">#ccc</span>;<br>&#125;<br><br><span class=\"hljs-selector-class\">.click</span> &#123;<br>  <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">10px</span>;<br>  <span class=\"hljs-attribute\">text-align</span>: center;<br>  <span class=\"hljs-attribute\">line-height</span>: <span class=\"hljs-number\">40px</span>;<br>  <span class=\"hljs-attribute\">font-family</span>: <span class=\"hljs-string\">&#x27;仿宋&#x27;</span>;<br>  <span class=\"hljs-attribute\">font-weight</span>: bold;<br>  <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#333</span>;<br>  <span class=\"hljs-attribute\">background-color</span>: orange;<br>  <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">1px</span> solid red;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"html-代码\"><a href=\"#html-代码\" class=\"headerlink\" title=\"html 代码\"></a>html 代码</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>电影票选座<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">&quot;clear:both&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>屏幕中央<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"逻辑：没有cilck类的时候，进行添加，同时文本进行赋值；反之清空click类和文本值\"><a href=\"#逻辑：没有cilck类的时候，进行添加，同时文本进行赋值；反之清空click类和文本值\" class=\"headerlink\" title=\"逻辑：没有cilck类的时候，进行添加，同时文本进行赋值；反之清空click类和文本值\"></a>逻辑：没有cilck类的时候，进行添加，同时文本进行赋值；反之清空click类和文本值</h2><h3 id=\"javascript-代码\"><a href=\"#javascript-代码\" class=\"headerlink\" title=\"javascript 代码\"></a>javascript 代码</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">let</span> lis = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementsByTagName</span>(<span class=\"hljs-string\">&#x27;li&#x27;</span>);<br><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; lis.<span class=\"hljs-property\">length</span>; i++) &#123;<br>  lis[i].<span class=\"hljs-property\">onclick</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br><br>    <span class=\"hljs-comment\">//获取文本节点</span><br>    <span class=\"hljs-keyword\">let</span> res = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">getAttribute</span>(<span class=\"hljs-string\">&#x27;class&#x27;</span>);<br>    <span class=\"hljs-keyword\">if</span> (!res) &#123;<br><br>      <span class=\"hljs-comment\">//如果不存在 class 就赋予click的样式</span><br>      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">setAttribute</span>(<span class=\"hljs-string\">&#x27;class&#x27;</span>, <span class=\"hljs-string\">&#x27;click&#x27;</span>);<br>      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">innerText</span> = <span class=\"hljs-string\">&#x27;座位已选&#x27;</span>;<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>      <br>      <span class=\"hljs-comment\">//如果存在 class 就设置为空</span><br>      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">setAttribute</span>(<span class=\"hljs-string\">&#x27;class&#x27;</span>, <span class=\"hljs-string\">&#x27;&#x27;</span>);<br>      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">innerText</span> = <span class=\"hljs-string\">&#x27;&#x27;</span>;<br>    &#125;<br><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n"},{"title":"百度搜索数据展示","index_img":"/img/dn.jpg","date":"2023-01-14T16:00:00.000Z","_content":"# 百度搜索数据展示案例\n## css 代码\n```\n    * {\n      margin: 0;\n      padding: 0;\n    }\n\n    #val {\n      width: 200px;\n      height: 22px;\n      color: #888;\n      font-size: 13px;\n      font-weight: 400;\n    }\n\n    .show {\n      width: 200px;\n      height: 200px;\n      border: 1px solid #ccc;.\n      display: none;\n      position: absolute;\n    }\n\n    .search {\n      width: 500px;\n      height: 600px;\n      position: relative;\n      margin: 100px auto;\n    }\n```\n## html 代码\n```\n  <div class=\"content\">\n    <div class=\"search\">\n      <input type=\"text\" id=\"val\" placeholder=\"请输入课程\">\n      <input type=\"submit\" value=\"搜索\" id=\"sub\">\n      <div class=\"show\" id=\"show\"></div>\n    </div>\n  </div>\n ```\n## JavaScript 代码\n\n ```\n    let arr = [\n      'web前端精英特训班 980元',\n      'HTML核心技术 299元',\n      'Vue核心技术 599元',\n      'CSS+HTNL核心技术 299元',\n      'web前端在线商城 99元',\n      'JavaScript高级技术 899元'\n    ];\n    //逻辑：1.先完成 展示区域的显示和隐藏\n    let val = document.getElementById('val');\n    let show = document.getElementById('show');\n    //给输入框绑定一个键盘弹起事件\n    val.onkeyup = function () {\n      show.style.display = 'block';\n      //this.value 和arr的每一项进行匹配 indexOf 匹配不到显示-1\n      let str = '';\n      arr.forEach((item) => {\n        let res = item.indexOf(val.value)\n        if (res != -1) {\n          str += '<p>' + item + '</p>'\n        }\n      });\n      //如果val.value 为空或者 str为false 就给用户一个提示\n      if (!val.value || !str) {\n        show.innerHTML = '<p>暂无结果</p>'\n      } else {\n        show.innerHTML = str;\n\n      };\n      //如果搜索框为空，展示页面也清空\n      if (!val.value) {\n        show.innerHTML = '';\n      };\n\n    };\n    val.onblur = function () {\n      show.style.display = 'none';\n      val.value = '';\n    };\n```","source":"_posts/百度搜索数据展示.md","raw":"---\ntitle: 百度搜索数据展示\ntags: [telescope]\nindex_img: /img/dn.jpg\ndate: 2023-01-15 \n---\n# 百度搜索数据展示案例\n## css 代码\n```\n    * {\n      margin: 0;\n      padding: 0;\n    }\n\n    #val {\n      width: 200px;\n      height: 22px;\n      color: #888;\n      font-size: 13px;\n      font-weight: 400;\n    }\n\n    .show {\n      width: 200px;\n      height: 200px;\n      border: 1px solid #ccc;.\n      display: none;\n      position: absolute;\n    }\n\n    .search {\n      width: 500px;\n      height: 600px;\n      position: relative;\n      margin: 100px auto;\n    }\n```\n## html 代码\n```\n  <div class=\"content\">\n    <div class=\"search\">\n      <input type=\"text\" id=\"val\" placeholder=\"请输入课程\">\n      <input type=\"submit\" value=\"搜索\" id=\"sub\">\n      <div class=\"show\" id=\"show\"></div>\n    </div>\n  </div>\n ```\n## JavaScript 代码\n\n ```\n    let arr = [\n      'web前端精英特训班 980元',\n      'HTML核心技术 299元',\n      'Vue核心技术 599元',\n      'CSS+HTNL核心技术 299元',\n      'web前端在线商城 99元',\n      'JavaScript高级技术 899元'\n    ];\n    //逻辑：1.先完成 展示区域的显示和隐藏\n    let val = document.getElementById('val');\n    let show = document.getElementById('show');\n    //给输入框绑定一个键盘弹起事件\n    val.onkeyup = function () {\n      show.style.display = 'block';\n      //this.value 和arr的每一项进行匹配 indexOf 匹配不到显示-1\n      let str = '';\n      arr.forEach((item) => {\n        let res = item.indexOf(val.value)\n        if (res != -1) {\n          str += '<p>' + item + '</p>'\n        }\n      });\n      //如果val.value 为空或者 str为false 就给用户一个提示\n      if (!val.value || !str) {\n        show.innerHTML = '<p>暂无结果</p>'\n      } else {\n        show.innerHTML = str;\n\n      };\n      //如果搜索框为空，展示页面也清空\n      if (!val.value) {\n        show.innerHTML = '';\n      };\n\n    };\n    val.onblur = function () {\n      show.style.display = 'none';\n      val.value = '';\n    };\n```","slug":"百度搜索数据展示","published":1,"updated":"2023-02-18T03:10:52.021Z","_id":"cle9dbj9d0002assv37j26rb7","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"百度搜索数据展示案例\"><a href=\"#百度搜索数据展示案例\" class=\"headerlink\" title=\"百度搜索数据展示案例\"></a>百度搜索数据展示案例</h1><h2 id=\"css-代码\"><a href=\"#css-代码\" class=\"headerlink\" title=\"css 代码\"></a>css 代码</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\">* &#123;<br>  <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">0</span>;<br>  <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">0</span>;<br>&#125;<br><br><span class=\"hljs-selector-id\">#val</span> &#123;<br>  <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">200px</span>;<br>  <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">22px</span>;<br>  <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#888</span>;<br>  <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">13px</span>;<br>  <span class=\"hljs-attribute\">font-weight</span>: <span class=\"hljs-number\">400</span>;<br>&#125;<br><br><span class=\"hljs-selector-class\">.show</span> &#123;<br>  <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">200px</span>;<br>  <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">200px</span>;<br>  <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">1px</span> solid <span class=\"hljs-number\">#ccc</span>;.<br>  <span class=\"hljs-attribute\">display</span>: none;<br>  <span class=\"hljs-attribute\">position</span>: absolute;<br>&#125;<br><br><span class=\"hljs-selector-class\">.search</span> &#123;<br>  <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">500px</span>;<br>  <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">600px</span>;<br>  <span class=\"hljs-attribute\">position</span>: relative;<br>  <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">100px</span> auto;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h2 id=\"html-代码\"><a href=\"#html-代码\" class=\"headerlink\" title=\"html 代码\"></a>html 代码</h2><figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\">&lt;div <span class=\"hljs-keyword\">class</span>=&quot;<span class=\"hljs-symbol\">content</span>&quot;&gt;<br>  &lt;<span class=\"hljs-symbol\">div</span> <span class=\"hljs-symbol\">class</span>=&quot;<span class=\"hljs-symbol\">search</span>&quot;&gt;<br>    &lt;<span class=\"hljs-symbol\">input</span> <span class=\"hljs-symbol\">type</span>=&quot;<span class=\"hljs-symbol\">text</span>&quot; <span class=\"hljs-symbol\">id</span>=&quot;<span class=\"hljs-symbol\">val</span>&quot; <span class=\"hljs-symbol\">placeholder</span>=&quot;请输入课程&quot;&gt;<br>    &lt;<span class=\"hljs-symbol\">input</span> <span class=\"hljs-symbol\">type</span>=&quot;<span class=\"hljs-symbol\">submit</span>&quot; <span class=\"hljs-symbol\">value</span>=&quot;搜索&quot; <span class=\"hljs-symbol\">id</span>=&quot;<span class=\"hljs-symbol\">sub</span>&quot;&gt;<br>    &lt;<span class=\"hljs-symbol\">div</span> <span class=\"hljs-symbol\">class</span>=&quot;<span class=\"hljs-symbol\">show</span>&quot; <span class=\"hljs-symbol\">id</span>=&quot;<span class=\"hljs-symbol\">show</span>&quot;&gt;&lt;/<span class=\"hljs-symbol\">div</span>&gt;<br>  &lt;/<span class=\"hljs-symbol\">div</span>&gt;<br>&lt;/<span class=\"hljs-symbol\">div</span>&gt;<br></code></pre></td></tr></table></figure>\n<h2 id=\"JavaScript-代码\"><a href=\"#JavaScript-代码\" class=\"headerlink\" title=\"JavaScript 代码\"></a>JavaScript 代码</h2> <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">let</span> arr = [<br>  <span class=\"hljs-string\">&#x27;web前端精英特训班 980元&#x27;</span>,<br>  <span class=\"hljs-string\">&#x27;HTML核心技术 299元&#x27;</span>,<br>  <span class=\"hljs-string\">&#x27;Vue核心技术 599元&#x27;</span>,<br>  <span class=\"hljs-string\">&#x27;CSS+HTNL核心技术 299元&#x27;</span>,<br>  <span class=\"hljs-string\">&#x27;web前端在线商城 99元&#x27;</span>,<br>  <span class=\"hljs-string\">&#x27;JavaScript高级技术 899元&#x27;</span><br>];<br><span class=\"hljs-comment\">//逻辑：1.先完成 展示区域的显示和隐藏</span><br><span class=\"hljs-keyword\">let</span> val = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&#x27;val&#x27;</span>);<br><span class=\"hljs-keyword\">let</span> show = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&#x27;show&#x27;</span>);<br><span class=\"hljs-comment\">//给输入框绑定一个键盘弹起事件</span><br>val.<span class=\"hljs-property\">onkeyup</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>  show.<span class=\"hljs-property\">style</span>.<span class=\"hljs-property\">display</span> = <span class=\"hljs-string\">&#x27;block&#x27;</span>;<br>  <span class=\"hljs-comment\">//this.value 和arr的每一项进行匹配 indexOf 匹配不到显示-1</span><br>  <span class=\"hljs-keyword\">let</span> str = <span class=\"hljs-string\">&#x27;&#x27;</span>;<br>  arr.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">item</span>) =&gt;</span> &#123;<br>    <span class=\"hljs-keyword\">let</span> res = item.<span class=\"hljs-title function_\">indexOf</span>(val.<span class=\"hljs-property\">value</span>)<br>    <span class=\"hljs-keyword\">if</span> (res != -<span class=\"hljs-number\">1</span>) &#123;<br>      str += <span class=\"hljs-string\">&#x27;&lt;p&gt;&#x27;</span> + item + <span class=\"hljs-string\">&#x27;&lt;/p&gt;&#x27;</span><br>    &#125;<br>  &#125;);<br>  <span class=\"hljs-comment\">//如果val.value 为空或者 str为false 就给用户一个提示</span><br>  <span class=\"hljs-keyword\">if</span> (!val.<span class=\"hljs-property\">value</span> || !str) &#123;<br>    show.<span class=\"hljs-property\">innerHTML</span> = <span class=\"hljs-string\">&#x27;&lt;p&gt;暂无结果&lt;/p&gt;&#x27;</span><br>  &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>    show.<span class=\"hljs-property\">innerHTML</span> = str;<br><br>  &#125;;<br>  <span class=\"hljs-comment\">//如果搜索框为空，展示页面也清空</span><br>  <span class=\"hljs-keyword\">if</span> (!val.<span class=\"hljs-property\">value</span>) &#123;<br>    show.<span class=\"hljs-property\">innerHTML</span> = <span class=\"hljs-string\">&#x27;&#x27;</span>;<br>  &#125;;<br><br>&#125;;<br>val.<span class=\"hljs-property\">onblur</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>  show.<span class=\"hljs-property\">style</span>.<span class=\"hljs-property\">display</span> = <span class=\"hljs-string\">&#x27;none&#x27;</span>;<br>  val.<span class=\"hljs-property\">value</span> = <span class=\"hljs-string\">&#x27;&#x27;</span>;<br>&#125;;<br></code></pre></td></tr></table></figure>","site":{"data":{}},"wordcount":1651,"excerpt":"","more":"<h1 id=\"百度搜索数据展示案例\"><a href=\"#百度搜索数据展示案例\" class=\"headerlink\" title=\"百度搜索数据展示案例\"></a>百度搜索数据展示案例</h1><h2 id=\"css-代码\"><a href=\"#css-代码\" class=\"headerlink\" title=\"css 代码\"></a>css 代码</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\">* &#123;<br>  <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">0</span>;<br>  <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">0</span>;<br>&#125;<br><br><span class=\"hljs-selector-id\">#val</span> &#123;<br>  <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">200px</span>;<br>  <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">22px</span>;<br>  <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#888</span>;<br>  <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">13px</span>;<br>  <span class=\"hljs-attribute\">font-weight</span>: <span class=\"hljs-number\">400</span>;<br>&#125;<br><br><span class=\"hljs-selector-class\">.show</span> &#123;<br>  <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">200px</span>;<br>  <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">200px</span>;<br>  <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">1px</span> solid <span class=\"hljs-number\">#ccc</span>;.<br>  <span class=\"hljs-attribute\">display</span>: none;<br>  <span class=\"hljs-attribute\">position</span>: absolute;<br>&#125;<br><br><span class=\"hljs-selector-class\">.search</span> &#123;<br>  <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">500px</span>;<br>  <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">600px</span>;<br>  <span class=\"hljs-attribute\">position</span>: relative;<br>  <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">100px</span> auto;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h2 id=\"html-代码\"><a href=\"#html-代码\" class=\"headerlink\" title=\"html 代码\"></a>html 代码</h2><figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\">&lt;div <span class=\"hljs-keyword\">class</span>=&quot;<span class=\"hljs-symbol\">content</span>&quot;&gt;<br>  &lt;<span class=\"hljs-symbol\">div</span> <span class=\"hljs-symbol\">class</span>=&quot;<span class=\"hljs-symbol\">search</span>&quot;&gt;<br>    &lt;<span class=\"hljs-symbol\">input</span> <span class=\"hljs-symbol\">type</span>=&quot;<span class=\"hljs-symbol\">text</span>&quot; <span class=\"hljs-symbol\">id</span>=&quot;<span class=\"hljs-symbol\">val</span>&quot; <span class=\"hljs-symbol\">placeholder</span>=&quot;请输入课程&quot;&gt;<br>    &lt;<span class=\"hljs-symbol\">input</span> <span class=\"hljs-symbol\">type</span>=&quot;<span class=\"hljs-symbol\">submit</span>&quot; <span class=\"hljs-symbol\">value</span>=&quot;搜索&quot; <span class=\"hljs-symbol\">id</span>=&quot;<span class=\"hljs-symbol\">sub</span>&quot;&gt;<br>    &lt;<span class=\"hljs-symbol\">div</span> <span class=\"hljs-symbol\">class</span>=&quot;<span class=\"hljs-symbol\">show</span>&quot; <span class=\"hljs-symbol\">id</span>=&quot;<span class=\"hljs-symbol\">show</span>&quot;&gt;&lt;/<span class=\"hljs-symbol\">div</span>&gt;<br>  &lt;/<span class=\"hljs-symbol\">div</span>&gt;<br>&lt;/<span class=\"hljs-symbol\">div</span>&gt;<br></code></pre></td></tr></table></figure>\n<h2 id=\"JavaScript-代码\"><a href=\"#JavaScript-代码\" class=\"headerlink\" title=\"JavaScript 代码\"></a>JavaScript 代码</h2> <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">let</span> arr = [<br>  <span class=\"hljs-string\">&#x27;web前端精英特训班 980元&#x27;</span>,<br>  <span class=\"hljs-string\">&#x27;HTML核心技术 299元&#x27;</span>,<br>  <span class=\"hljs-string\">&#x27;Vue核心技术 599元&#x27;</span>,<br>  <span class=\"hljs-string\">&#x27;CSS+HTNL核心技术 299元&#x27;</span>,<br>  <span class=\"hljs-string\">&#x27;web前端在线商城 99元&#x27;</span>,<br>  <span class=\"hljs-string\">&#x27;JavaScript高级技术 899元&#x27;</span><br>];<br><span class=\"hljs-comment\">//逻辑：1.先完成 展示区域的显示和隐藏</span><br><span class=\"hljs-keyword\">let</span> val = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&#x27;val&#x27;</span>);<br><span class=\"hljs-keyword\">let</span> show = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&#x27;show&#x27;</span>);<br><span class=\"hljs-comment\">//给输入框绑定一个键盘弹起事件</span><br>val.<span class=\"hljs-property\">onkeyup</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>  show.<span class=\"hljs-property\">style</span>.<span class=\"hljs-property\">display</span> = <span class=\"hljs-string\">&#x27;block&#x27;</span>;<br>  <span class=\"hljs-comment\">//this.value 和arr的每一项进行匹配 indexOf 匹配不到显示-1</span><br>  <span class=\"hljs-keyword\">let</span> str = <span class=\"hljs-string\">&#x27;&#x27;</span>;<br>  arr.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">item</span>) =&gt;</span> &#123;<br>    <span class=\"hljs-keyword\">let</span> res = item.<span class=\"hljs-title function_\">indexOf</span>(val.<span class=\"hljs-property\">value</span>)<br>    <span class=\"hljs-keyword\">if</span> (res != -<span class=\"hljs-number\">1</span>) &#123;<br>      str += <span class=\"hljs-string\">&#x27;&lt;p&gt;&#x27;</span> + item + <span class=\"hljs-string\">&#x27;&lt;/p&gt;&#x27;</span><br>    &#125;<br>  &#125;);<br>  <span class=\"hljs-comment\">//如果val.value 为空或者 str为false 就给用户一个提示</span><br>  <span class=\"hljs-keyword\">if</span> (!val.<span class=\"hljs-property\">value</span> || !str) &#123;<br>    show.<span class=\"hljs-property\">innerHTML</span> = <span class=\"hljs-string\">&#x27;&lt;p&gt;暂无结果&lt;/p&gt;&#x27;</span><br>  &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>    show.<span class=\"hljs-property\">innerHTML</span> = str;<br><br>  &#125;;<br>  <span class=\"hljs-comment\">//如果搜索框为空，展示页面也清空</span><br>  <span class=\"hljs-keyword\">if</span> (!val.<span class=\"hljs-property\">value</span>) &#123;<br>    show.<span class=\"hljs-property\">innerHTML</span> = <span class=\"hljs-string\">&#x27;&#x27;</span>;<br>  &#125;;<br><br>&#125;;<br>val.<span class=\"hljs-property\">onblur</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>  show.<span class=\"hljs-property\">style</span>.<span class=\"hljs-property\">display</span> = <span class=\"hljs-string\">&#x27;none&#x27;</span>;<br>  val.<span class=\"hljs-property\">value</span> = <span class=\"hljs-string\">&#x27;&#x27;</span>;<br>&#125;;<br></code></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cle92q35n000058svanrx78ki","tag_id":"cle92v5xk000158svhvs1052f","_id":"cle935z26000358sv2rw99jcm"},{"post_id":"cle94tbx400015osv8rjk8bxx","tag_id":"cle92v5xk000158svhvs1052f","_id":"cle94tbx500025osv7hsddqqb"},{"post_id":"cle97fd7z00035osv6wtqdazu","tag_id":"cle92v5xk000158svhvs1052f","_id":"cle97fd8100045osvhk458bla"},{"post_id":"cle9c9s1f0000fcsvd1cv82zq","tag_id":"cle92v5xk000158svhvs1052f","_id":"cle9c9s1h0001fcsv7rde1snn"},{"post_id":"cl79kecih0005bwsv08mz1yui","tag_id":"cle9d5muh0000assvaalk4ali","_id":"cle9d5mui0001assv2k804eld"},{"post_id":"cle9dbj9d0002assv37j26rb7","tag_id":"cle92v5xk000158svhvs1052f","_id":"cle9dbrzw0003assv1up863dd"},{"post_id":"cle073ar5000080sv02higpoz","tag_id":"cle92v5xk000158svhvs1052f","_id":"cle9dkpuo0004assvhbqhfo4w"},{"post_id":"cl7mhdy9v0001rksv5hyrhw8a","tag_id":"cle92v5xk000158svhvs1052f","_id":"cle9e4cmj0005assv4bx527tb"},{"post_id":"cl7fj93m800016csvg1md4wrm","tag_id":"cle92v5xk000158svhvs1052f","_id":"cle9eb9at0006assv3qo1d1ms"},{"post_id":"cl7jiues40000dwsveucef0by","tag_id":"cle92v5xk000158svhvs1052f","_id":"cle9ecu8u0007assv8a7o69of"},{"post_id":"cl79kecij0007bwsv582f6byt","tag_id":"cle92v5xk000158svhvs1052f","_id":"cle9eiyl10008assv7em3ggbg"},{"post_id":"cl7fihwml0002y4sv9h9c04yl","tag_id":"cle92v5xk000158svhvs1052f","_id":"cle9fhini0009assv5f7o94ku"},{"post_id":"cl79kecie0003bwsv5p9j7g3n","tag_id":"cle92v5xk000158svhvs1052f","_id":"cle9fmfuo000aassvhb00gzjx"},{"post_id":"cl7fial9i0000y4svfz85bd4k","tag_id":"cle92v5xk000158svhvs1052f","_id":"cle9gltwr000bassv3mds4ki7"}],"Tag":[{"name":"telescope","_id":"cle92v5xk000158svhvs1052f"},{"name":"Telescope","_id":"cle9d5muh0000assvaalk4ali"}]}}
=======
{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/hexo-theme-fluid-master/source/css/gitalk.css","path":"css/gitalk.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/css/highlight-dark.styl","path":"css/highlight-dark.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/css/highlight.styl","path":"css/highlight.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/default.png","path":"img/default.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/default03.jpg","path":"img/default03.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/default01.jpg","path":"img/default01.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/default3.jpeg","path":"img/default3.jpeg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/fluid.png","path":"img/fluid.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/fluid01.ico","path":"img/fluid01.ico","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/loading.gif","path":"img/loading.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/fluid02.jpg","path":"img/fluid02.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/police_beian.png","path":"img/police_beian.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/tx01.jpg","path":"img/tx01.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/js/boot.js","path":"js/boot.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/js/leancloud.js","path":"js/leancloud.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/js/img-lazyload.js","path":"js/img-lazyload.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/js/color-schema.js","path":"js/color-schema.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/js/events.js","path":"js/events.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/js/plugins.js","path":"js/plugins.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/xml/local-search.xml","path":"xml/local-search.xml","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"source/image/Tab栏切换html部分.png","path":"image/Tab栏切换html部分.png","modified":0,"renderable":0},{"_id":"source/image/Tab栏切换js部分.png","path":"image/Tab栏切换js部分.png","modified":0,"renderable":0},{"_id":"source/image/全选 全不选 反选-1.15.png","path":"image/全选 全不选 反选-1.15.png","modified":0,"renderable":0},{"_id":"source/image/商品查询案例.png","path":"image/商品查询案例.png","modified":0,"renderable":0},{"_id":"source/image/敏感词过滤-1.17.png","path":"image/敏感词过滤-1.17.png","modified":0,"renderable":0},{"_id":"source/image/Tab选项卡-1.15.png","path":"image/Tab选项卡-1.15.png","modified":0,"renderable":0},{"_id":"source/image/点击页面.png","path":"image/点击页面.png","modified":0,"renderable":0},{"_id":"source/image/电影票选座-1.20.png","path":"image/电影票选座-1.20.png","modified":0,"renderable":0},{"_id":"source/image/百度搜索框数据展示-1.11.png","path":"image/百度搜索框数据展示-1.11.png","modified":0,"renderable":0},{"_id":"source/image/移动盒子-1.29.png","path":"image/移动盒子-1.29.png","modified":0,"renderable":0},{"_id":"source/image/跳转页面.png","path":"image/跳转页面.png","modified":0,"renderable":0},{"_id":"source/image/相册选择-1.1.png","path":"image/相册选择-1.1.png","modified":0,"renderable":0},{"_id":"source/image/进度条功能-1.18.png","path":"image/进度条功能-1.18.png","modified":0,"renderable":0},{"_id":"source/image/返回首屏功能-1.20.png","path":"image/返回首屏功能-1.20.png","modified":0,"renderable":0},{"_id":"source/image/验证码生成及校验-1.2.png","path":"image/验证码生成及校验-1.2.png","modified":0,"renderable":0},{"_id":"themes/hexo-theme-fluid-master/source/img/fluid03.png","path":"img/fluid03.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/fluid04.png","path":"img/fluid04.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/fluid05.png","path":"img/fluid05.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/wx.jpg","path":"img/wx.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/tx.jpg","path":"img/tx.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/gd.png","path":"img/gd.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/gd2.png","path":"img/gd2.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/bitbug_favicon(1).ico","path":"img/bitbug_favicon(1).ico","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/zw.png","path":"img/zw.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/10002.jpg","path":"img/10002.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/10003.jpg","path":"img/10003.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/10001.jpg","path":"img/10001.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/dn.jpg","path":"img/dn.jpg","modified":0,"renderable":1},{"_id":"source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":0},{"_id":"source/img/10001.jpg","path":"img/10001.jpg","modified":0,"renderable":0},{"_id":"source/img/10002.jpg","path":"img/10002.jpg","modified":0,"renderable":0},{"_id":"source/img/10003.jpg","path":"img/10003.jpg","modified":0,"renderable":0},{"_id":"source/img/default03.jpg","path":"img/default03.jpg","modified":0,"renderable":0},{"_id":"source/img/default01.jpg","path":"img/default01.jpg","modified":0,"renderable":0},{"_id":"source/img/default3.jpeg","path":"img/default3.jpeg","modified":0,"renderable":0},{"_id":"source/img/fluid02.jpg","path":"img/fluid02.jpg","modified":0,"renderable":0},{"_id":"source/img/dn.jpg","path":"img/dn.jpg","modified":0,"renderable":0},{"_id":"source/img/fluid03.png","path":"img/fluid03.png","modified":0,"renderable":0},{"_id":"source/img/jl.png","path":"img/jl.png","modified":0,"renderable":0},{"_id":"source/img/zw.png","path":"img/zw.png","modified":0,"renderable":0},{"_id":"themes/hexo-theme-fluid-master/source/img/index.jpg","path":"img/index.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/wallhaven-1ppyk9_2560x1080.png","path":"img/wallhaven-1ppyk9_2560x1080.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/liul.png","path":"img/liul.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/beij.png","path":"img/beij.png","modified":0,"renderable":1},{"_id":"source/img/dy.jpg","path":"img/dy.jpg","modified":0,"renderable":0},{"_id":"source/img/10007.jpg","path":"img/10007.jpg","modified":0,"renderable":0},{"_id":"source/img/10004.jpg","path":"img/10004.jpg","modified":0,"renderable":0},{"_id":"source/img/10005.jpg","path":"img/10005.jpg","modified":0,"renderable":0},{"_id":"source/img/10006.jpg","path":"img/10006.jpg","modified":0,"renderable":0},{"_id":"source/img/dn3.jpg","path":"img/dn3.jpg","modified":0,"renderable":0},{"_id":"source/img/dn1.jpg","path":"img/dn1.jpg","modified":0,"renderable":0},{"_id":"source/img/dn2.jpg","path":"img/dn2.jpg","modified":0,"renderable":0},{"_id":"source/img/10008.jpg","path":"img/10008.jpg","modified":0,"renderable":0},{"_id":"source/img/10009.jpg","path":"img/10009.jpg","modified":0,"renderable":0},{"_id":"source/img/10010.jpg","path":"img/10010.jpg","modified":0,"renderable":0},{"_id":"source/img/sm.png","path":"img/sm.png","modified":0,"renderable":0},{"_id":"source/img/mao1.jpg","path":"img/mao1.jpg","modified":0,"renderable":0},{"_id":"source/img/mao2.jpg","path":"img/mao2.jpg","modified":0,"renderable":0},{"_id":"source/img/fluid.png","path":"img/fluid.png","modified":0,"renderable":0},{"_id":"source/img/bt.png","path":"img/bt.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/about/index.md","hash":"6bca4196e364e6b19757f920bb05e8a216754b39","modified":1676890782898},{"_id":"source/_posts/Hexo主题更换.md","hash":"aba52e4d89b98da159030f3de37ec0627c9d8a81","modified":1676890782893},{"_id":"source/_posts/hello-hexo.md","hash":"ee4c6f0f2687ed32a569c0c11433d4bc4836c83b","modified":1661457989032},{"_id":"source/_posts/使用node创建博客.md","hash":"9c21a4f4237fbafee7c1dbde00a60afb6bc82ec4","modified":1676890782896},{"_id":"source/_posts/htttp协议.md","hash":"a0f61397b5fd10c873e707e57e451fabc37da289","modified":1676890782895},{"_id":"source/categories/index.md","hash":"7ce64d10804ee9f8d0310cfe36bc475828173e92","modified":1676890782898},{"_id":"source/tags/index.md","hash":"9c68e78171033a5214585fd605818db39d757eee","modified":1676890782961},{"_id":"source/link/index.md","hash":"591c8008d1dad48fb3289863b8473e98a845bf61","modified":1676890782961},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_tag/tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1660531045000},{"_id":"themes/hexo-theme-fluid-master/.editorconfig","hash":"b595159772f3ee1ef5e6780ce307270e741cb309","modified":1676890782963},{"_id":"themes/hexo-theme-fluid-master/.eslintrc","hash":"3df89453e1f63051fafc90f16a8d83951050e316","modified":1676890782963},{"_id":"themes/hexo-theme-fluid-master/.gitattributes","hash":"3e00e1fb043438cd820d94ee3dc9ffb6718996f3","modified":1676890782963},{"_id":"themes/hexo-theme-fluid-master/LICENSE","hash":"511e49f0bd8282a0d002c527474da8e1e5add393","modified":1676890782967},{"_id":"themes/hexo-theme-fluid-master/.gitignore","hash":"9ede98b8d9dca802f82f651afb3b0366d69f05f1","modified":1676890782966},{"_id":"themes/hexo-theme-fluid-master/_config.yml","hash":"de3f09c3114e2fc04920778917216b5ce09a5d86","modified":1676913924545},{"_id":"themes/hexo-theme-fluid-master/README.md","hash":"2ec6a89d66f8e41fded68aa8ec3b3363a20ea48c","modified":1676890782967},{"_id":"themes/hexo-theme-fluid-master/README_en.md","hash":"10ff41f4b3cf24ad0fece6555b77f61694916133","modified":1676890782968},{"_id":"themes/hexo-theme-fluid-master/package.json","hash":"1c05cec69cd3cf349b268f027a6916a9187601e0","modified":1676890782990},{"_id":"themes/hexo-theme-fluid-master/languages/de.yml","hash":"c52ce73a291fa50953edbd11c1dfb1cc7cab52c2","modified":1676890782969},{"_id":"themes/hexo-theme-fluid-master/languages/en.yml","hash":"2839da328f197cf90cafdf2b538fcd027ab6cfba","modified":1676890782969},{"_id":"themes/hexo-theme-fluid-master/languages/eo.yml","hash":"76d2920b49c8d2489c37514489545d0fc4eac834","modified":1676890782970},{"_id":"themes/hexo-theme-fluid-master/languages/es.yml","hash":"7fcd16cd363f1a166a3270c23c0660eff7475744","modified":1676890782970},{"_id":"themes/hexo-theme-fluid-master/languages/ja.yml","hash":"411aa49e2e8dea90a6d8cc2dc92f264609ea273b","modified":1676890782970},{"_id":"themes/hexo-theme-fluid-master/languages/zh-CN.yml","hash":"b05d1a43516dc6886d65631d90d6995acae673db","modified":1676890782971},{"_id":"themes/hexo-theme-fluid-master/languages/zh-HK.yml","hash":"676b3ee8a16d796b4a898a9e5be2f52c372055ed","modified":1676890782971},{"_id":"themes/hexo-theme-fluid-master/languages/zh-TW.yml","hash":"aac765cccef9f9044c4a88941fd01ba1883178fc","modified":1676890782971},{"_id":"themes/hexo-theme-fluid-master/layout/404.ejs","hash":"0a589faccde6c2c9572e8d3d359e7c8fb166335e","modified":1676890782972},{"_id":"themes/hexo-theme-fluid-master/layout/archive.ejs","hash":"c524ce76747042ec2f9ed8d5025f80e01b462b3b","modified":1676890782987},{"_id":"themes/hexo-theme-fluid-master/layout/about.ejs","hash":"bd3ede2a5f45c5256cf8f883bb8fcca645834869","modified":1676890782986},{"_id":"themes/hexo-theme-fluid-master/layout/categories.ejs","hash":"838a68e210bddfca6d4ba070e1e2f1ca53cb7d06","modified":1676890782987},{"_id":"themes/hexo-theme-fluid-master/layout/layout.ejs","hash":"d4ffeb7eff398dea154340794bd277f75ddeedef","modified":1676890782988},{"_id":"themes/hexo-theme-fluid-master/layout/links.ejs","hash":"fbed4b3d1e475b3de9d8ce05362abcc658a53408","modified":1676890782988},{"_id":"themes/hexo-theme-fluid-master/layout/category.ejs","hash":"264f68cbf826787e683a30e1377c56c0895c7386","modified":1676890782987},{"_id":"themes/hexo-theme-fluid-master/layout/index.ejs","hash":"33ee985aaf03c8839d8f48e38113e851705cb2db","modified":1676890782988},{"_id":"themes/hexo-theme-fluid-master/layout/post.ejs","hash":"5a712dded014ff5a5ffea79fb0e30b429ae715c7","modified":1676890782989},{"_id":"themes/hexo-theme-fluid-master/layout/page.ejs","hash":"8ba210724c023d45a4564415762f3da299bd1d0e","modified":1676890782989},{"_id":"themes/hexo-theme-fluid-master/layout/tag.ejs","hash":"e87fc58829ea214ac16e8e4f13cd5c389133697b","modified":1676890782989},{"_id":"themes/hexo-theme-fluid-master/layout/tags.ejs","hash":"b7c1a6d8fc1097fc16d2300260297013cb692153","modified":1676890782990},{"_id":"themes/hexo-theme-fluid-master/.github/ISSUE_TEMPLATE/bug_report.md","hash":"7d7c1e5a1da6b4f7be6685beb4798ec76d5efd31","modified":1676890782964},{"_id":"themes/hexo-theme-fluid-master/.github/ISSUE_TEMPLATE/bug_report_zh.md","hash":"fea63a9a5c3befd8783705eed09adf1b596a6203","modified":1676890782964},{"_id":"themes/hexo-theme-fluid-master/.github/ISSUE_TEMPLATE/feature_request_zh.md","hash":"7db378613df2b7d13e8c428c006399a879a4a852","modified":1676890782965},{"_id":"themes/hexo-theme-fluid-master/.github/ISSUE_TEMPLATE/feature_request.md","hash":"5cc30e7b6e7b77c8b40b182ba02a5d93d37d2fc2","modified":1676890782965},{"_id":"themes/hexo-theme-fluid-master/.github/ISSUE_TEMPLATE/question_zh.md","hash":"07e24578c25fcaca94618fd86569887dadf7a276","modified":1676890782965},{"_id":"themes/hexo-theme-fluid-master/.github/ISSUE_TEMPLATE/question.md","hash":"102213e5d6790d060c0e26b4a3a7ec744d753c52","modified":1676890782965},{"_id":"themes/hexo-theme-fluid-master/.github/workflows/limit.yaml","hash":"bdbdb66da69ab7353b546f02150a6792f4787975","modified":1676890782966},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/archive-list.ejs","hash":"78c34e32746041f23678669bbadfbede15e4c6d2","modified":1676890782972},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/category-list.ejs","hash":"bd763ffc145a1f0b2c4a5dc8a101f0bc94b3f2f7","modified":1676890782972},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/category-chains.ejs","hash":"508254a648d8597e62e4012c8beab44bfa82e904","modified":1676890782972},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/comments.ejs","hash":"bfea4674af78eb72b3a6baaa7ec9fc3c3db55ebd","modified":1676890782973},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/css.ejs","hash":"70646e7f7a7684e12b298cd8a36fbea2814c3635","modified":1676890782977},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/head.ejs","hash":"3ca4c60a38b6b895986b15128a668266b1b12009","modified":1676890782978},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/footer.ejs","hash":"52b8954ae0eff5eb66a3841b37f144336b8f0866","modified":1676890782977},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/header.ejs","hash":"3668304d08c48b68d532532921a12069a2736150","modified":1676890782979},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/markdown-plugins.ejs","hash":"b5cd435b27f090939b6051bef41a38a3376044ac","modified":1676890782980},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/paginator.ejs","hash":"0d443f23c459787338917900f50fec1c8b3b3bdd","modified":1676890782980},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/scripts.ejs","hash":"89fc9f663a1091911b79ab9697c09446d16184f9","modified":1676890782986},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/search.ejs","hash":"57a0f61242d9ce2bd2c51b2f84193f6dc1377ef9","modified":1676890782986},{"_id":"themes/hexo-theme-fluid-master/scripts/events/index.js","hash":"6c3b24207e4ea3ae4edeb715af40ef23711b92b9","modified":1676890782990},{"_id":"themes/hexo-theme-fluid-master/scripts/generators/local-search.js","hash":"bda7fbe58082a2a02c0db066794b791b14462271","modified":1676890782994},{"_id":"themes/hexo-theme-fluid-master/scripts/generators/pages.js","hash":"a2a15ea722863aba09dcad578558432682a3b6b3","modified":1676890782994},{"_id":"themes/hexo-theme-fluid-master/scripts/filters/default-injects.js","hash":"3d30c722b9e24c33577d6fab822628841fadf992","modified":1676890782993},{"_id":"themes/hexo-theme-fluid-master/scripts/filters/locals.js","hash":"2340a576635b16fd2456b3494f5afe89cd7764db","modified":1676890782994},{"_id":"themes/hexo-theme-fluid-master/scripts/filters/post-filter.js","hash":"1c9156e12030fa2219a933edde460ec563836047","modified":1676890782994},{"_id":"themes/hexo-theme-fluid-master/scripts/utils/compare-versions.js","hash":"37f90bd4e35ce49457dc2a348b9f66e0b242c014","modified":1676890782999},{"_id":"themes/hexo-theme-fluid-master/scripts/utils/object.js","hash":"3e03b534e2e92a6e17567b006d7e3eaad4b37598","modified":1676890783000},{"_id":"themes/hexo-theme-fluid-master/scripts/utils/resolve.js","hash":"a5d70005913ab03cea0a0dc601097628b4dbd5a8","modified":1676890783000},{"_id":"themes/hexo-theme-fluid-master/scripts/utils/url-join.js","hash":"dbdb10b23fcd3928e86a4cb46fa3455e060b4aa0","modified":1676890783000},{"_id":"themes/hexo-theme-fluid-master/scripts/tags/button.js","hash":"e1d0caed12e7cd9a35cf64272c41854b2901a58f","modified":1676890782997},{"_id":"themes/hexo-theme-fluid-master/scripts/tags/checkbox.js","hash":"aa03d0b914d87b9194ee3a0612ab5827a8dedbdd","modified":1676890782998},{"_id":"themes/hexo-theme-fluid-master/scripts/tags/group-image.js","hash":"cc176cc1d7e7cc28cedf8397ae748c691d140be2","modified":1676890782998},{"_id":"themes/hexo-theme-fluid-master/scripts/tags/label.js","hash":"6c5916d86c63795c7e910bf614b0e7ece5073702","modified":1676890782999},{"_id":"themes/hexo-theme-fluid-master/scripts/tags/mermaid.js","hash":"dbfe59fde77d87b1d7d0c46480a2a729010988eb","modified":1676890782999},{"_id":"themes/hexo-theme-fluid-master/scripts/tags/note.js","hash":"8020acc2c4bb3a2054e3cb349fac7cd10b79a0be","modified":1676890782999},{"_id":"themes/hexo-theme-fluid-master/scripts/helpers/date.js","hash":"9bc9ba08d1d871394ee1c3a1cc2f21dc343f515a","modified":1676890782995},{"_id":"themes/hexo-theme-fluid-master/scripts/helpers/engine.js","hash":"96af7e55fdbe0819bacc554ecbfe42375a088df6","modified":1676890782995},{"_id":"themes/hexo-theme-fluid-master/scripts/helpers/export-config.js","hash":"00a41768fe258bb8f3323bf4bb0b862d6e2d97c0","modified":1676890782995},{"_id":"themes/hexo-theme-fluid-master/scripts/helpers/page.js","hash":"49b2c6449d7be35739c6cfea3cab4e790580983a","modified":1676890782996},{"_id":"themes/hexo-theme-fluid-master/scripts/helpers/scope.js","hash":"a93b87835bfa491fa2aa90f97f25281e3a4ffed9","modified":1676890782996},{"_id":"themes/hexo-theme-fluid-master/scripts/helpers/import.js","hash":"f9821f7789ea6f069977a8c642aa5ccb6d19077c","modified":1676890782996},{"_id":"themes/hexo-theme-fluid-master/scripts/helpers/injects.js","hash":"9219d59c51930c7a82fcde918d6efbc5aa572ea2","modified":1676890782996},{"_id":"themes/hexo-theme-fluid-master/scripts/helpers/url.js","hash":"f713ddb6c8018ec7b96d3567057f1f932609beea","modified":1676890782996},{"_id":"themes/hexo-theme-fluid-master/scripts/helpers/utils.js","hash":"d7ff7cf5e721dfeafe0c2a77a5929b2c3f8fee2a","modified":1676890782997},{"_id":"themes/hexo-theme-fluid-master/scripts/helpers/wordcount.js","hash":"9c01393f446c490c56b6b0d482aaa8d97cc8b717","modified":1676890782997},{"_id":"themes/hexo-theme-fluid-master/source/css/gitalk.css","hash":"1fe60b2ab1d704f5a4f55e700dca5b8785fb390e","modified":1676890783013},{"_id":"themes/hexo-theme-fluid-master/source/css/highlight-dark.styl","hash":"c74d7aed425d20f2fa096f386a9521b67b9ab269","modified":1676890783014},{"_id":"themes/hexo-theme-fluid-master/source/css/highlight.styl","hash":"57ce8b8f95ab1f40612a9dce1793de5ab9b4bbfc","modified":1676890783014},{"_id":"themes/hexo-theme-fluid-master/source/css/main.styl","hash":"9e9171325bb7148c11ceee283d00c137c8a1c5c5","modified":1676890783014},{"_id":"themes/hexo-theme-fluid-master/source/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1660531045000},{"_id":"themes/hexo-theme-fluid-master/source/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1660531045000},{"_id":"themes/hexo-theme-fluid-master/source/img/fluid01.ico","hash":"38bcaf31991e070f66463ec42796b1f5d518c10c","modified":1661462047737},{"_id":"themes/hexo-theme-fluid-master/source/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1660531045000},{"_id":"themes/hexo-theme-fluid-master/source/img/fluid02.jpg","hash":"d1d45220db821066a37503a959a6da61100c9a54","modified":1661462008599},{"_id":"themes/hexo-theme-fluid-master/source/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1660531045000},{"_id":"themes/hexo-theme-fluid-master/source/js/boot.js","hash":"3f92a93cb12e01f5ce54bc941fa6626b3ee2571a","modified":1676890783128},{"_id":"themes/hexo-theme-fluid-master/source/js/leancloud.js","hash":"e9ad1b5659f0af867174687daa0ecf4375e40b75","modified":1676890783129},{"_id":"themes/hexo-theme-fluid-master/source/js/img-lazyload.js","hash":"67f6250f98b36a6599ea982d11cbb060c5ffb92a","modified":1676890783129},{"_id":"themes/hexo-theme-fluid-master/source/js/color-schema.js","hash":"31d35fe044ad01dda7975d47c99d636eaa81bfc8","modified":1676890783128},{"_id":"themes/hexo-theme-fluid-master/source/js/local-search.js","hash":"1ab61ed47ec88c876e447872342fed9be560b0f0","modified":1676890783129},{"_id":"themes/hexo-theme-fluid-master/source/js/events.js","hash":"7d70feed0a19e3d9f5886416ae99a72e21e2f10c","modified":1676890783128},{"_id":"themes/hexo-theme-fluid-master/source/js/plugins.js","hash":"5f33939016d0a7bb72d4376af46ebb28fbf85c04","modified":1676890783130},{"_id":"themes/hexo-theme-fluid-master/source/xml/local-search.xml","hash":"85fcc23b4db654a7f91fc55b6fb0442bb3ed3a9a","modified":1676890783130},{"_id":"themes/hexo-theme-fluid-master/source/js/utils.js","hash":"61e8108fe16fbf19ce13ea89b3120c1191bb4665","modified":1676890783130},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/comments/cusdis.ejs","hash":"1e93ca89777e4beb0f0e5cb70e03aab48e958542","modified":1676890782974},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/comments/changyan.ejs","hash":"0c410ef79785897c8de3da333b057a2936fd569b","modified":1676890782973},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/comments/disqus.ejs","hash":"79ec17eec6e15076c685688e740230e92c66efa9","modified":1676890782974},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/comments/giscus.ejs","hash":"66995ec9dab10ed35c2a775010c447113c6848d4","modified":1676890782974},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/comments/gitalk.ejs","hash":"7f04e5c22821bb94da791973d9c6692b03bac81d","modified":1676890782974},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/comments/livere.ejs","hash":"bcceafab01fe695c59951d939f7cef502f3d7b48","modified":1676890782975},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/comments/utterances.ejs","hash":"d7bcc183fc31af643e7835b13da10fe2ab8614ce","modified":1676890782976},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/comments/twikoo.ejs","hash":"1568d377cd1d214be50a6560197c185ead0f7740","modified":1676890782975},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/comments/remark42.ejs","hash":"45c879768b40ba56af62e18ad54bffbf73a6f3a1","modified":1676890782975},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/comments/waline.ejs","hash":"99fe072ec17e83332325b3c59464bd39ea1f5a96","modified":1676890782977},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/comments/valine.ejs","hash":"ef04d4fc3f26588ae9d8712938d648304fc05455","modified":1676890782976},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/footer/beian.ejs","hash":"77d0c9df31a22ed8a3e341637bde4165a11a7ce9","modified":1676890782978},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/footer/statistics.ejs","hash":"ed2348bd9f56d19836b508c52ce9cc9122471f51","modified":1676890782978},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/header/banner.ejs","hash":"a84d8dcb44f5f6289ef09db4d02ab14de72c2c87","modified":1676890782979},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/header/navigation.ejs","hash":"1560b1ca7f1f40fe1e18047ab68a3576f6613619","modified":1676890782979},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/plugins/analytics.ejs","hash":"ea10caef2e655200e275b70d40d464e34123d10b","modified":1676890782980},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/plugins/anchorjs.ejs","hash":"3b31e068f394c3f63a98843711e64ac4af463fef","modified":1676890782980},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/plugins/code-widget.ejs","hash":"03c7c69fbb1754fdccfa18671aac23b8637b869e","modified":1676890782981},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/plugins/fancybox.ejs","hash":"3900e54ade140e0e49c571a1955f0b1f3a59b281","modified":1676890782981},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/plugins/encrypt.ejs","hash":"76a224723775388d3fbb0433b32dfb5dcbc75a4c","modified":1676890782981},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/plugins/highlight.ejs","hash":"502b99e19e496825df7032ca2b0b1a95ebb2b357","modified":1676890782982},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/plugins/math.ejs","hash":"887292388acb8e90c1a7a415a82d128d881f8c9d","modified":1676890782982},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/plugins/mermaid.ejs","hash":"fedcfb5de65c0828f6925d60a758e0c79a45396f","modified":1676890782982},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/plugins/nprogress.ejs","hash":"47c1df255aa552ad71ef3e57deca46530a8f2802","modified":1676890782982},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/plugins/typed.ejs","hash":"7bf29bd9faf12030e19993576299936a999c0e46","modified":1676890782983},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/post/category-bar.ejs","hash":"eac44cfb6b0843304b2da35b32b0fa24afd9d7f9","modified":1676890782983},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/post/copyright.ejs","hash":"77cda31b5434b75ff7ac600f60a97918bc389616","modified":1676890782983},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/post/meta-bottom.ejs","hash":"f9c0f25eee37cc6e72a5fbefb2cd7284a9fd16d7","modified":1676890782984},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/post/meta-top.ejs","hash":"cef058fd6f33651118b5bdaa3c814757f5c82154","modified":1676890782984},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/post/sidebar-left.ejs","hash":"db4ecdcc762bb1b1bae5060f0baa6115174779ff","modified":1676890782984},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/post/sidebar-right.ejs","hash":"2507cdad08f61cf8c1d9b0ca7f4f1dc8c4e5841b","modified":1676890782985},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/post/toc.ejs","hash":"ac544baecc05df96c6558d42b57af219e1d59e52","modified":1676890782985},{"_id":"themes/hexo-theme-fluid-master/scripts/events/lib/compatible-configs.js","hash":"31208a0db986ba864f756a8ec806b7d254440f9b","modified":1676890782991},{"_id":"themes/hexo-theme-fluid-master/scripts/events/lib/footnote.js","hash":"235dc1c2f7086dcdb9a2091cd219ef2a37aebfa4","modified":1676890782991},{"_id":"themes/hexo-theme-fluid-master/scripts/events/lib/hello.js","hash":"c9efdd41b8606969e5b55f49a2f6df596641b995","modified":1676890782991},{"_id":"themes/hexo-theme-fluid-master/scripts/events/lib/highlight.js","hash":"3f06fd3a865a703eed67aac30692d2c4b348d3a6","modified":1676890782991},{"_id":"themes/hexo-theme-fluid-master/scripts/events/lib/injects.js","hash":"92123b7280695b4ac6650f5e1d7fa0d772c71f5b","modified":1676890782991},{"_id":"themes/hexo-theme-fluid-master/scripts/events/lib/lazyload.js","hash":"c9696633f77dd8055e900497469f9e64eca4d97f","modified":1676890782992},{"_id":"themes/hexo-theme-fluid-master/scripts/events/lib/merge-configs.js","hash":"ec6bf395ccad3dd41f29dc0080aeabf413e30fd9","modified":1676890782992},{"_id":"themes/hexo-theme-fluid-master/source/css/_functions/base.styl","hash":"171697018fd384fce0834875ca94b91f16564cac","modified":1676890783001},{"_id":"themes/hexo-theme-fluid-master/source/css/_mixins/base.styl","hash":"046979dbd8cdabd21d89f9c1d8f1bb3f2fd06d6f","modified":1676890783001},{"_id":"themes/hexo-theme-fluid-master/source/css/_variables/base.styl","hash":"9ea66cf79f1e4356b6b402bc3dc5fb55c9862f1f","modified":1676890783013},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/pages.styl","hash":"92c062cf55457b6549497244d09ec34e9c0c95c2","modified":1676890783013},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_about/about.styl","hash":"8ba5fb6a8ced1de6f7893184bf12f4021fe22595","modified":1676890783002},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_category/category-bar.styl","hash":"7f95c49025a347605c726b0874fe074d888e1cc2","modified":1676890783009},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_archive/archive.styl","hash":"e3846fb429f6732bd15fde40f7c28b3492d786c8","modified":1676890783002},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_category/category-chain.styl","hash":"4263f7b930e6b57e13295d17fd3745a9e5c52494","modified":1676890783009},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_category/category-list.styl","hash":"d3aeb7bf22d52d7dde59b292090ef8b46943718a","modified":1676890783009},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_base/base.styl","hash":"cd255079553985722ee80fb1833f6507dde52194","modified":1676890783008},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_base/color-schema.styl","hash":"577f3289d7f3851d4eeb867db3d92f1313a431da","modified":1676890783008},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_base/inline.styl","hash":"96c3bb95dea4b3d3ecd20b810a674bfcef04870c","modified":1676890783008},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_base/keyframes.styl","hash":"58a7f8f2baea2d58cf5f7edfc91314ee5d7156ca","modified":1676890783008},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_index/index.styl","hash":"7d50d2ae4b8b736a764fcce21ec456fa6b72518c","modified":1676890783010},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_post/comment.styl","hash":"1fc96d09d52d9502e84e4e2a8d482ea45e8b81ea","modified":1676890783011},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_post/highlight.styl","hash":"4bd2449fb8a3620229f0862a3b499faf1eedf2fd","modified":1676890783011},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_post/markdown.styl","hash":"2d12f23b46d0ce07ae810bc4f5635c490a098fa4","modified":1676890783011},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_post/post-page.styl","hash":"2e44047b9fecf662696b9cfce5c77ac3376cda85","modified":1676890783012},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_post/post-tag.styl","hash":"e8fe053ef8734e54fae12e46acd0087bcd67f8a2","modified":1676890783012},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_tag/tags.styl","hash":"29e9b72cfda2f2baf9cf2597fcd7f9e66303a9bd","modified":1676890783012},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_links/links.styl","hash":"d3ef491fd449d89a1b95801dee788a5d9bec4320","modified":1676890783010},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_base/_widget/anchorjs.styl","hash":"26d65475b1c52a61115044db8883df6739c3a473","modified":1676890783003},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_base/_widget/board.styl","hash":"1068d71721baeed76bf0176f9b964d36b5764c9f","modified":1676890783003},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_base/_widget/banner.styl","hash":"80301db38e448e40e88bb34d0128628b0809b243","modified":1676890783003},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_base/_widget/code-widget.styl","hash":"417a7388b39c0203178b0032e151febd66a0e9f3","modified":1676890783003},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_base/_widget/copyright.styl","hash":"3ac1eb36e124adef607775aa505386d5680960e2","modified":1676890783004},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_base/_widget/footer.styl","hash":"e6f5921ff9009c1853e7db30c482bc1682433ed9","modified":1676890783004},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_base/_widget/header.styl","hash":"30f50446609d49c896e92a89225591b606adc863","modified":1676890783005},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_base/_widget/footnote.styl","hash":"41935973a66c14ab2bea0539d4b1f15c62534fa4","modified":1676890783004},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_base/_widget/modal.styl","hash":"0ca6171ce262339e0e36cfea0978b554d87ae7fc","modified":1676890783005},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_base/_widget/ngrogress.styl","hash":"48799d3148ef6493be0e05897c635124e9b05d03","modified":1676890783005},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_base/_widget/noscript.styl","hash":"8fad325e411bc83c8ebdc4115015477eed5f60da","modified":1676890783005},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_base/_widget/pagination.styl","hash":"f4ae7cbf2f10f459de7864f8e642553b587df889","modified":1676890783006},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_base/_widget/qrcode.styl","hash":"04447d3b673be84a1af1dc57933a3c41dd7c0cfe","modified":1676890783006},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_base/_widget/scroll-btn.styl","hash":"e4dbbbb1a2508a72bc04680552d7ebbea0eed0fe","modified":1676890783006},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_base/_widget/search.styl","hash":"1f4e678d7219815ab62de1b92ec75e021247f90b","modified":1676890783006},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_base/_widget/toc.styl","hash":"5defef321e3e933fe84f3f2ca481c88f55381fb0","modified":1676890783007},{"_id":"themes/hexo-theme-fluid-master/source/img/default3.jpeg","hash":"4d4c1051627395b2d08f16d476c39b8c4b2cc885","modified":1661462804588},{"_id":"themes/hexo-theme-fluid-master/source/img/tx01.jpg","hash":"1919e8b3880af15daa48dc5682d1ae65c929266e","modified":1661449348027},{"_id":"themes/hexo-theme-fluid-master/source/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1660531045000},{"_id":"themes/hexo-theme-fluid-master/source/img/default03.jpg","hash":"8ec94a4c67150ef2ede2f5ff60f79a5c3214fd4c","modified":1661462596026},{"_id":"themes/hexo-theme-fluid-master/source/img/default01.jpg","hash":"4956297b0bf854d1e3817567282e218a02c20a81","modified":1649247709026},{"_id":"public/atom.xml","hash":"618b4f599c09993a2c3bc89ebc8995f8f0ae464f","modified":1676694776256},{"_id":"public/sitemap.xml","hash":"45dbfc0e26acfa50ecaead8de6f187fe64f0c493","modified":1676694776256},{"_id":"public/sitemap.txt","hash":"316a3389b10d1bc6dcd09a12c400d8f4fbff5ced","modified":1676694776256},{"_id":"public/local-search.xml","hash":"c66e1b598db4b1f2c5568089248fed25c4680355","modified":1676694776256},{"_id":"public/tags/index.html","hash":"8981abefe6efd4bd31bb962f9b68688b5975fe6b","modified":1676696793634},{"_id":"public/categories/index.html","hash":"35bedb71b1da7c91e7414fc0106f53c6b2bd5c6e","modified":1676696793634},{"_id":"public/link/index.html","hash":"eef94f77653e6eb4be52010cb1bcd3deabc7c4dd","modified":1676696793634},{"_id":"public/about/index.html","hash":"f19b6c4662adc4f5ac55fff6495651519f7bce17","modified":1676696793634},{"_id":"public/archives/index.html","hash":"db8ab947736633a903988e854b8957bbcfc8d1e6","modified":1676696793634},{"_id":"public/archives/2022/index.html","hash":"94e1b78041205624aea273f7a6b91c3bf4a7ef81","modified":1676696793634},{"_id":"public/archives/2022/08/index.html","hash":"2a0bb00b03a473337944a02010a132ae1c241c7b","modified":1676696793634},{"_id":"public/index.html","hash":"4966c8c8131cd5f389c36e2015673cd56c58fcd7","modified":1676696793634},{"_id":"public/404.html","hash":"98b9bc89416eada032a5b44257077d4d76668f95","modified":1676696793634},{"_id":"public/2022/08/26/htttp协议/index.html","hash":"e59465a6aa152765db2d4a6984ec7b8b707a4050","modified":1676696793634},{"_id":"public/2022/08/26/Hexo主题更换/index.html","hash":"0a443b425d1236195e8706b47074d6d83efbbdad","modified":1676685457440},{"_id":"public/2022/08/24/使用node创建博客/index.html","hash":"b312fbb5ee48bb9f53e86ed551e404524b9d013e","modified":1676685457440},{"_id":"public/2022/08/24/hello-hexo/index.html","hash":"9ef628242b1a18a415e96aa3234ad99b7b040924","modified":1676696793634},{"_id":"public/links/index.html","hash":"5355835c160024e5235f2ed08f24d342ab78127f","modified":1676696793634},{"_id":"public/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1661463378843},{"_id":"public/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1661463378843},{"_id":"public/img/fluid01.ico","hash":"38bcaf31991e070f66463ec42796b1f5d518c10c","modified":1661463378843},{"_id":"public/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1661463378843},{"_id":"public/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1661463378843},{"_id":"public/img/fluid02.jpg","hash":"d1d45220db821066a37503a959a6da61100c9a54","modified":1661463378843},{"_id":"public/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1661463378843},{"_id":"public/img/default3.jpeg","hash":"4d4c1051627395b2d08f16d476c39b8c4b2cc885","modified":1661463378843},{"_id":"public/img/tx01.jpg","hash":"1919e8b3880af15daa48dc5682d1ae65c929266e","modified":1661463378843},{"_id":"public/css/highlight.css","hash":"0f9a477d33d3b15ebe7e163e756fb7c54c7ded6b","modified":1661463378843},{"_id":"public/css/highlight-dark.css","hash":"2b0daa6e5343da9dbb26d617d224b8397e48556b","modified":1661463378843},{"_id":"public/js/boot.js","hash":"2848f8eb5081a7f0550fbd76dc06d3ff877f1913","modified":1661463378843},{"_id":"public/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1661463378843},{"_id":"public/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1661463378843},{"_id":"public/js/leancloud.js","hash":"eff77c7a5c399fcaefda48884980571e15243fc9","modified":1661463378843},{"_id":"public/js/color-schema.js","hash":"ba63f7c3324bc1fdd050a90add9d8faaffc27e07","modified":1661463378843},{"_id":"public/js/local-search.js","hash":"cebcda5991b6a9ab9307c69542389ce9013f04f7","modified":1661463378843},{"_id":"public/js/events.js","hash":"f05a569a9fd6da2fda69a2cf8e276ba81580faf3","modified":1661463378843},{"_id":"public/js/plugins.js","hash":"2333494add51e5e1374602a4e81f0be36a05d4c2","modified":1661463378843},{"_id":"public/js/utils.js","hash":"45cc86f099db0a2c36ad49711ce66c2d598a2ab1","modified":1661463378843},{"_id":"public/css/main.css","hash":"f7ce6ed5308c621930136e91fe5e47d1ad91130b","modified":1661463378843},{"_id":"public/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1661463378843},{"_id":"public/img/default03.jpg","hash":"8ec94a4c67150ef2ede2f5ff60f79a5c3214fd4c","modified":1661463378843},{"_id":"public/img/default01.jpg","hash":"4956297b0bf854d1e3817567282e218a02c20a81","modified":1661463378843},{"_id":"source/_posts/宝塔部署前后端分离Vue项目.md","hash":"660c74dd755a46224fb9ff1611480d28085315db","modified":1676890782897},{"_id":"source/_posts/vue 的生命周期.md","hash":"cd27cae537060303c248691a2225a93fb339bdf9","modified":1676890782895},{"_id":"source/_posts/三次握手和四次挥手.md","hash":"7143eb4ef190386cc6f56274499983a75ab08b26","modified":1676890782895},{"_id":"source/_posts/从输入URL到浏览器显示页面发生过程.md","hash":"b9c4c4f943da406a0e1b43fadfc7bd7f2e293e38","modified":1676890782896},{"_id":"public/archives/2022/09/index.html","hash":"423aee4f4463b048214c049353335d0259c5dbb5","modified":1676696793634},{"_id":"public/2022/09/02/从输入URL到浏览器显示页面发生过程/index.html","hash":"e28ebc9ecd79786f07b3d9eb03ae7fb9716d60dc","modified":1676696793634},{"_id":"public/2022/08/30/三次握手和四次挥手/index.html","hash":"070dce8d2aae080bf2ef98bc248f11045baf28bd","modified":1676685457440},{"_id":"public/2022/08/30/vue 的生命周期/index.html","hash":"f436b03d19d68923e89dc70f58d6dd1c361e8cb1","modified":1676696793634},{"_id":"public/2022/08/30/宝塔部署前后端分离Vue项目/index.html","hash":"bc344320058274fd71eaf857fe26f26188c5002f","modified":1676685457440},{"_id":"source/_posts/ajax.md","hash":"9655903253516ab12ccab177ca5db54896702988","modified":1662244385808},{"_id":"source/_posts/Ajax请求的五个步骤.md","hash":"3e869d85355bdd11810966fba88f846c39da944e","modified":1676890782893},{"_id":"public/2022/09/04/ajax/index.html","hash":"59f0ddc06453206a85daee61fabf4aba1cff2df0","modified":1662244872883},{"_id":"public/2022/09/04/Ajax请求的五个步骤/index.html","hash":"9bb2d5ea370b7604fd9d74703adbf43a0209348c","modified":1676685457440},{"_id":"source/_posts/防抖节流案列.md","hash":"bcd647517abe1e09f04b3b3c80564c1cd5c7f935","modified":1676890782897},{"_id":"source/_posts/电影票选座案例.md","hash":"206da3e7466a64ae855b9fedbf2eb2ab8faad815","modified":1676890782897},{"_id":"source/_posts/10s支付跳转案例.md","hash":"f1cf86b7b5562ed239732b3aa705c9ef0fd651c1","modified":1676890782893},{"_id":"source/_posts/百度搜索数据展示.md","hash":"1f9c20884abf6549909446cb2358206a55606667","modified":1676890782897},{"_id":"source/image/Tab栏切换html部分.png","hash":"58abc94452c7a6a46013adfbcbe65e6dd9abac5b","modified":1668886310908},{"_id":"source/image/敏感词过滤-1.17.png","hash":"d8768e2376826160bd7fc3db14119dc58630a22e","modified":1673895923936},{"_id":"source/image/点击页面.png","hash":"8e1b5b46626a266edd3f02e9c6669a42c5590d66","modified":1671781607177},{"_id":"source/image/跳转页面.png","hash":"46e3981f3bc695842ab73052758003c88a181a43","modified":1671781630578},{"_id":"source/image/全选 全不选 反选-1.15.png","hash":"39bc665a9554ba3be91330613c8477755d50b698","modified":1673759916544},{"_id":"source/image/相册选择-1.1.png","hash":"bd59ca022b4e7329bf35a06048b333fda3b86321","modified":1672604184159},{"_id":"source/image/返回首屏功能-1.20.png","hash":"5aa1c17e0b09f2290f4fc8d3952a1ea439f530e0","modified":1674168040869},{"_id":"source/image/移动盒子-1.29.png","hash":"714bb66d1edf719f07e98d644d8f2e91ace940d8","modified":1674995711626},{"_id":"source/image/进度条功能-1.18.png","hash":"d14b71d95a99a585344f30ce3b746777b45cf2ab","modified":1673986598940},{"_id":"source/image/Tab选项卡-1.15.png","hash":"8ebb131f4283b30650d8d66028f31afd1c5318ff","modified":1673723165657},{"_id":"source/image/百度搜索框数据展示-1.11.png","hash":"f364f6b1a2b734d57699dc2f08798550850e2e70","modified":1673466599007},{"_id":"source/image/电影票选座-1.20.png","hash":"af71596cc4b0fe89fe8df43dbfcd0505686e5cff","modified":1674728264899},{"_id":"source/image/验证码生成及校验-1.2.png","hash":"4deee1c6ac8375320d303ca843891239f152e500","modified":1672689542058},{"_id":"source/image/商品查询案例.png","hash":"fdc5e260aaabe20b3821873c2d169d759d56a0ec","modified":1667931063881},{"_id":"source/image/Tab栏切换js部分.png","hash":"0ccd8b047655d24aa20af8c0723b7b778926036d","modified":1668981926652},{"_id":"public/archives/2022/12/index.html","hash":"436f75a06ec83973e4519b2fdc59599c1bc799f4","modified":1676696793634},{"_id":"public/2022/12/24/10s支付跳转案例/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1676418810753},{"_id":"public/image/敏感词过滤-1.17.png","hash":"d8768e2376826160bd7fc3db14119dc58630a22e","modified":1676134424086},{"_id":"public/image/Tab栏切换html部分.png","hash":"58abc94452c7a6a46013adfbcbe65e6dd9abac5b","modified":1676134424086},{"_id":"public/image/点击页面.png","hash":"8e1b5b46626a266edd3f02e9c6669a42c5590d66","modified":1676134424086},{"_id":"public/image/跳转页面.png","hash":"46e3981f3bc695842ab73052758003c88a181a43","modified":1676134424086},{"_id":"public/image/全选 全不选 反选-1.15.png","hash":"39bc665a9554ba3be91330613c8477755d50b698","modified":1676134424086},{"_id":"public/image/相册选择-1.1.png","hash":"bd59ca022b4e7329bf35a06048b333fda3b86321","modified":1676134424086},{"_id":"public/image/返回首屏功能-1.20.png","hash":"5aa1c17e0b09f2290f4fc8d3952a1ea439f530e0","modified":1676134424086},{"_id":"public/image/移动盒子-1.29.png","hash":"714bb66d1edf719f07e98d644d8f2e91ace940d8","modified":1676134424086},{"_id":"public/image/进度条功能-1.18.png","hash":"d14b71d95a99a585344f30ce3b746777b45cf2ab","modified":1676134424086},{"_id":"public/image/Tab选项卡-1.15.png","hash":"8ebb131f4283b30650d8d66028f31afd1c5318ff","modified":1676134424086},{"_id":"public/image/百度搜索框数据展示-1.11.png","hash":"f364f6b1a2b734d57699dc2f08798550850e2e70","modified":1676134424086},{"_id":"public/image/电影票选座-1.20.png","hash":"af71596cc4b0fe89fe8df43dbfcd0505686e5cff","modified":1676134424086},{"_id":"public/image/验证码生成及校验-1.2.png","hash":"4deee1c6ac8375320d303ca843891239f152e500","modified":1676134424086},{"_id":"public/image/商品查询案例.png","hash":"fdc5e260aaabe20b3821873c2d169d759d56a0ec","modified":1676134424086},{"_id":"public/image/Tab栏切换js部分.png","hash":"0ccd8b047655d24aa20af8c0723b7b778926036d","modified":1676134424086},{"_id":"source/_posts/article-title.md","hash":"7b52d7fc960602fefe44c36d43a7c7abebab679e","modified":1676142890215},{"_id":"public/2023/02/12/article-title/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1676418810753},{"_id":"public/archives/page/2/index.html","hash":"4cad6492a2194980d7c769b7384e8cb8d859881a","modified":1676696793634},{"_id":"public/archives/2023/index.html","hash":"124572d975720c8778c183eb8dabfaf9c08c9f48","modified":1676696793634},{"_id":"public/archives/2023/02/index.html","hash":"229bb7e9ba4c0e90bcb9f6e5b55c6f90bb11846a","modified":1676696793634},{"_id":"public/page/2/index.html","hash":"f27154701552bd700992548961251e32c3ee5e80","modified":1676696793634},{"_id":"themes/hexo-theme-fluid-master/source/img/wx.jpg","hash":"64521543175076daa8999377decc0f8bd0264561","modified":1676399881815},{"_id":"themes/hexo-theme-fluid-master/source/img/fluid03.png","hash":"bb8fb54d2cbad6f0438cbd450ccb2fcdfb4ffe75","modified":1676398884259},{"_id":"themes/hexo-theme-fluid-master/source/img/tx.jpg","hash":"752651f772eff4a15a7b45a9d46f26bcc68b3dde","modified":1676400176337},{"_id":"themes/hexo-theme-fluid-master/source/img/fluid05.png","hash":"f797493c86b0cd9a3d1dc94838d266a881cefc1d","modified":1676398602117},{"_id":"themes/hexo-theme-fluid-master/source/img/fluid04.png","hash":"b6c81e74264f4b9bc8a6b2a834c792080e97a84a","modified":1676398560527},{"_id":"themes/hexo-theme-fluid-master/source/img/gd.png","hash":"36727b170f1ec4ff8670866b0ffa2320a9722631","modified":1676401269139},{"_id":"themes/hexo-theme-fluid-master/source/img/gd2.png","hash":"cd1407a48ca06b287ed62b6a2b1d6525190b6054","modified":1676401300141},{"_id":"public/img/wx.jpg","hash":"64521543175076daa8999377decc0f8bd0264561","modified":1676404424059},{"_id":"public/img/fluid03.png","hash":"bb8fb54d2cbad6f0438cbd450ccb2fcdfb4ffe75","modified":1676404424059},{"_id":"public/img/tx.jpg","hash":"752651f772eff4a15a7b45a9d46f26bcc68b3dde","modified":1676404424059},{"_id":"public/img/gd.png","hash":"36727b170f1ec4ff8670866b0ffa2320a9722631","modified":1676404424059},{"_id":"public/img/gd2.png","hash":"cd1407a48ca06b287ed62b6a2b1d6525190b6054","modified":1676404424059},{"_id":"public/img/fluid05.png","hash":"f797493c86b0cd9a3d1dc94838d266a881cefc1d","modified":1676404424059},{"_id":"public/img/fluid04.png","hash":"b6c81e74264f4b9bc8a6b2a834c792080e97a84a","modified":1676404424059},{"_id":"themes/hexo-theme-fluid-master/source/img/bitbug_favicon(1).ico","hash":"ebb42cfedfeabc9f35ab89104b0190c651471497","modified":1676408673498},{"_id":"source/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1661463380174},{"_id":"themes/hexo-theme-fluid-master/source/img/10001.jpg","hash":"7ef63afd8aed5f6734b497a2fa85daa5bbe435c0","modified":1676416325621},{"_id":"themes/hexo-theme-fluid-master/source/img/10002.jpg","hash":"86b9878ac5e3127c46432cb5999232447d147bee","modified":1676416333047},{"_id":"themes/hexo-theme-fluid-master/source/img/10003.jpg","hash":"272be36b4617782c4c6b8799568dca3ad5be590b","modified":1676416337169},{"_id":"themes/hexo-theme-fluid-master/source/img/dn.jpg","hash":"7a83ac7ea600669b37ddc47b441f4c1f2eee1403","modified":1676416494908},{"_id":"themes/hexo-theme-fluid-master/source/img/zw.png","hash":"a7c55dfbad21bd95b857c28f9f7eff61a66f5e51","modified":1676415901277},{"_id":"public/search.xml","hash":"117cee76187ec550f5941d9dcdcc0c5e47daf464","modified":1676694776256},{"_id":"public/img/bitbug_favicon(1).ico","hash":"ebb42cfedfeabc9f35ab89104b0190c651471497","modified":1676418810753},{"_id":"public/img/10002.jpg","hash":"86b9878ac5e3127c46432cb5999232447d147bee","modified":1676418810753},{"_id":"public/img/10001.jpg","hash":"7ef63afd8aed5f6734b497a2fa85daa5bbe435c0","modified":1676418810753},{"_id":"public/img/10003.jpg","hash":"272be36b4617782c4c6b8799568dca3ad5be590b","modified":1676418810753},{"_id":"public/img/dn.jpg","hash":"7a83ac7ea600669b37ddc47b441f4c1f2eee1403","modified":1676418810753},{"_id":"public/img/zw.png","hash":"62262b0f750d8dd84bcb830b0ac40f34a770f68a","modified":1676680238581},{"_id":"source/_posts/fliter+indexOf 数组去重.md","hash":"4a4ba9a27d25560dd642f622a4eb44a31eec60cc","modified":1676474856657},{"_id":"source/_posts/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1661463380174},{"_id":"source/_posts/使用node创建博客 - 副本.md","hash":"9c21a4f4237fbafee7c1dbde00a60afb6bc82ec4","modified":1661457920065},{"_id":"source/_posts/数组去重.md","hash":"006aaa5e4bb26e28be9e02477d6d9dc5e9226561","modified":1676679299252},{"_id":"source/_posts/回调地狱与promise.md","hash":"6452f48d1decee2234f73594b0c7fbddb55d24bf","modified":1676679853050},{"_id":"source/img/10001.jpg","hash":"7ef63afd8aed5f6734b497a2fa85daa5bbe435c0","modified":1676474534998},{"_id":"source/img/10003.jpg","hash":"272be36b4617782c4c6b8799568dca3ad5be590b","modified":1676474535002},{"_id":"source/img/10002.jpg","hash":"86b9878ac5e3127c46432cb5999232447d147bee","modified":1676474535000},{"_id":"source/img/fluid02.jpg","hash":"d1d45220db821066a37503a959a6da61100c9a54","modified":1676417760193},{"_id":"source/img/dn.jpg","hash":"7a83ac7ea600669b37ddc47b441f4c1f2eee1403","modified":1676474535003},{"_id":"source/img/jl.png","hash":"32c9933de790f886dd551d818d035e5a24da481f","modified":1676672295696},{"_id":"source/img/default3.jpeg","hash":"4d4c1051627395b2d08f16d476c39b8c4b2cc885","modified":1676417760192},{"_id":"source/img/zw.png","hash":"62262b0f750d8dd84bcb830b0ac40f34a770f68a","modified":1676674888946},{"_id":"source/img/default03.jpg","hash":"8ec94a4c67150ef2ede2f5ff60f79a5c3214fd4c","modified":1676417760191},{"_id":"source/img/fluid03.png","hash":"bb8fb54d2cbad6f0438cbd450ccb2fcdfb4ffe75","modified":1676417760198},{"_id":"source/img/default01.jpg","hash":"4956297b0bf854d1e3817567282e218a02c20a81","modified":1676417760187},{"_id":"themes/hexo-theme-fluid-master/source/img/index.jpg","hash":"4a54068cdda5bd39cef570939319ffe8d6ada96c","modified":1676678733917},{"_id":"public/tags/telescope/index.html","hash":"6de85f0e0b99235cc81ee516f5047ea0a6753db5","modified":1676696793634},{"_id":"public/2023/02/18/回调地狱与promise/index.html","hash":"89dec63fa4baad00037a2a124f476c812e50ac24","modified":1676696793634},{"_id":"public/2023/02/17/防抖节流案列/index.html","hash":"23ac422d17264065cca6b1968e77f2e66a7f1ab2","modified":1676696793634},{"_id":"public/2023/02/17/数组去重/index.html","hash":"f101eb214613d6c4be87b1d5d63673ee9db57ecf","modified":1676696793634},{"_id":"public/2023/02/15/10s支付跳转案例/index.html","hash":"891e4dba2489e428289c31f0a14fbed37a3a17b0","modified":1676696793634},{"_id":"public/img/jl.png","hash":"32c9933de790f886dd551d818d035e5a24da481f","modified":1676680238581},{"_id":"public/img/index.jpg","hash":"4a54068cdda5bd39cef570939319ffe8d6ada96c","modified":1676680238581},{"_id":"themes/hexo-theme-fluid-master/source/img/beij.png","hash":"76de8a7553542452178ce5310b8047199436a320","modified":1676683493367},{"_id":"themes/hexo-theme-fluid-master/source/img/liul.png","hash":"741af4bf2a658233cc89054fd945f06f9bf0d833","modified":1676683557812},{"_id":"themes/hexo-theme-fluid-master/source/img/wallhaven-1ppyk9_2560x1080.png","hash":"d3741af0fa5966c54f876431f17b50ee865175a9","modified":1676683512942},{"_id":"public/img/beij.png","hash":"76de8a7553542452178ce5310b8047199436a320","modified":1676685457440},{"_id":"public/img/liul.png","hash":"741af4bf2a658233cc89054fd945f06f9bf0d833","modified":1676685457440},{"_id":"public/img/wallhaven-1ppyk9_2560x1080.png","hash":"d3741af0fa5966c54f876431f17b50ee865175a9","modified":1676685457440},{"_id":"source/img/10004.jpg","hash":"59530f23967e74cbf952a56a32d0fe71d2ad163d","modified":1676690141943},{"_id":"source/img/10005.jpg","hash":"47afe51152cd1d0731dd631db756966da60cbd03","modified":1676690141949},{"_id":"source/img/10006.jpg","hash":"9e3fd4d3d23e9d8f3ef5e2d9196a7f9c57240c68","modified":1676690141952},{"_id":"source/img/10007.jpg","hash":"6359aa0b943ef41d7fafb919e67a062d5beff7bb","modified":1676690141976},{"_id":"source/img/10009.jpg","hash":"98bd6d4fdafe2ef937d415ab3158eb3dc9dc338f","modified":1676690556777},{"_id":"source/img/10010.jpg","hash":"71cdb20bb460edbe88275dbbac4791f2673cb21b","modified":1676690556779},{"_id":"source/img/bt.png","hash":"d122d23733e1ac88f4b482b11976ea46cae2cd72","modified":1676694407247},{"_id":"source/img/dn1.jpg","hash":"f5b33ff49f1f3b00c973614a17423161f7756e0c","modified":1676690141910},{"_id":"source/img/dn2.jpg","hash":"df62d4c1ed20cf56c8f9bb19afc59313c8775c25","modified":1676690141923},{"_id":"source/img/dn3.jpg","hash":"51bf1a8efdaafdb8a268e90e1ca4d0405315d088","modified":1676690141918},{"_id":"source/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1670937168000},{"_id":"source/img/mao1.jpg","hash":"eba5f47ce43c754781a8bbc59c380667a27a075b","modified":1676692267429},{"_id":"source/img/sm.png","hash":"53345be1363e09b3e43e34d27c030c4f376b060a","modified":1676692266603},{"_id":"source/img/mao2.jpg","hash":"21822ccfc3f091983044f2cd3cc18bd0eea40d1b","modified":1676692266600},{"_id":"source/img/10008.jpg","hash":"4fa38bc9c0fa872e128b2d54adb704a71bea7247","modified":1676690556758},{"_id":"source/img/dy.jpg","hash":"8fea00f29150c7e2900145bb4449394a48cb7b4f","modified":1676689808602},{"_id":"public/archives/2022/10/index.html","hash":"14e9f9a6514643c2c04659fc9bfce158690f417c","modified":1676696793634},{"_id":"public/archives/2023/01/index.html","hash":"45117fc149362f0b531b83971ef2f40d446876bd","modified":1676696793634},{"_id":"public/tags/Telescope/index.html","hash":"335fed40012013b24669c4c1ef144e3358d90afe","modified":1676696793634},{"_id":"public/tags/telescope/page/2/index.html","hash":"3981130d80a6207d5cad1d5ab8ab532e8192a57d","modified":1676696793634},{"_id":"public/2023/01/15/百度搜索数据展示/index.html","hash":"4a7925df39b6e4d746e1228d4bbb8ebbaf601b9d","modified":1676696793634},{"_id":"public/2022/12/18/使用node创建博客/index.html","hash":"5a26c9e5f053dd4cd50a4df3e57b2b723b964584","modified":1676696793634},{"_id":"public/2022/12/10/电影票选座案例/index.html","hash":"6696cb01512ae52ef7e0500b3b3faae1c94d1ff5","modified":1676696793634},{"_id":"public/2022/10/10/Ajax请求的五个步骤/index.html","hash":"99ec2c3e43548ac2ebbbb7ca2851f2e294cbf161","modified":1676696793634},{"_id":"public/2022/09/05/三次握手和四次挥手/index.html","hash":"ba3f5d043bffb311f9c41b60590394c28996fee4","modified":1676696793634},{"_id":"public/2022/08/30/Hexo主题更换/index.html","hash":"a08c9910fd5c86c604b9ae25c5edd5b78ae1e9e4","modified":1676696793634},{"_id":"public/2022/08/25/宝塔部署前后端分离Vue项目/index.html","hash":"399ea1356c10904a61ccda07aa044f83110b3f74","modified":1676696793634},{"_id":"public/img/10004.jpg","hash":"59530f23967e74cbf952a56a32d0fe71d2ad163d","modified":1676694776256},{"_id":"public/img/10007.jpg","hash":"6359aa0b943ef41d7fafb919e67a062d5beff7bb","modified":1676694776256},{"_id":"public/img/10005.jpg","hash":"47afe51152cd1d0731dd631db756966da60cbd03","modified":1676694776256},{"_id":"public/img/10006.jpg","hash":"9e3fd4d3d23e9d8f3ef5e2d9196a7f9c57240c68","modified":1676694776256},{"_id":"public/img/dn3.jpg","hash":"51bf1a8efdaafdb8a268e90e1ca4d0405315d088","modified":1676694776256},{"_id":"public/img/dn2.jpg","hash":"df62d4c1ed20cf56c8f9bb19afc59313c8775c25","modified":1676694776256},{"_id":"public/img/dn1.jpg","hash":"f5b33ff49f1f3b00c973614a17423161f7756e0c","modified":1676694776256},{"_id":"public/img/10009.jpg","hash":"98bd6d4fdafe2ef937d415ab3158eb3dc9dc338f","modified":1676694776256},{"_id":"public/img/10010.jpg","hash":"71cdb20bb460edbe88275dbbac4791f2673cb21b","modified":1676694776256},{"_id":"public/img/mao1.jpg","hash":"eba5f47ce43c754781a8bbc59c380667a27a075b","modified":1676694776256},{"_id":"public/img/sm.png","hash":"53345be1363e09b3e43e34d27c030c4f376b060a","modified":1676694776256},{"_id":"public/img/mao2.jpg","hash":"21822ccfc3f091983044f2cd3cc18bd0eea40d1b","modified":1676694776256},{"_id":"public/img/bt.png","hash":"d122d23733e1ac88f4b482b11976ea46cae2cd72","modified":1676694776256},{"_id":"public/img/10008.jpg","hash":"4fa38bc9c0fa872e128b2d54adb704a71bea7247","modified":1676694776256},{"_id":"public/img/dy.jpg","hash":"8fea00f29150c7e2900145bb4449394a48cb7b4f","modified":1676694776256},{"_id":"public/css/prism.css","hash":"f1f64f4a26b715edbd65391def53322611df75cf","modified":1676696793634}],"Category":[],"Data":[],"Page":[{"title":"tags","date":"2022-08-25T08:34:49.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2022-08-25 16:34:49\ntype: \"tags\"\n---\n","updated":"2022-08-25T08:36:49.802Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cl79keci70000bwsv21gqb16d","content":"","site":{"data":{}},"wordcount":0,"excerpt":"","more":""},{"title":"categories","date":"2022-08-25T08:37:05.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2022-08-25 16:37:05\ntype: \"categories\"\n---\n","updated":"2022-08-25T08:37:53.123Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cl79kecid0002bwsv7j4rc9al","content":"","site":{"data":{}},"wordcount":0,"excerpt":"","more":""},{"title":"link","date":"2022-08-25T08:38:05.000Z","type":"link","_content":"","source":"link/index.md","raw":"---\ntitle: link\ndate: 2022-08-25 16:38:05\ntype: \"link\"\n---\n","updated":"2022-08-25T08:38:28.074Z","path":"link/index.html","comments":1,"layout":"page","_id":"cl79kecig0004bwsv5bifcztm","content":"","site":{"data":{}},"wordcount":0,"excerpt":"","more":""},{"title":"Telescope","layout":"about","_content":"<div class=\"container\">\n   <div class=\"section-title center\">\n     <h2>基本 <strong>资料</strong></h2>\n     <hr>\n     </div>\n   <div class=\"space\"></div>\n   <div class=\"row\">\n     <div class=\"col-md-3 col-sm-6 service\"> <i class=\"fa fa-laptop\"></i>\n       <h4><strong>个人信息</strong></h4>\n       <p>\n\t英文名: Telescope &nbsp; <br />\n\t籍贯：中国\n\t</p>\n     </div>\n     <div class=\"col-md-3 col-sm-6 service\"> <i class=\"fa fa-code\"></i>\n       <h4><strong>专业学历</strong></h4>\n  <p>\n\t    专业：室内设计<br />\n\t     学历：专科<br />\n\t\n</p>\n     </div>\n     <div class=\"col-md-3 col-sm-6 service\"> <i class=\"fa fa-rocket\"></i>\n       <h4><strong>毕业学校</strong></h4>\n  <p>\n\t  学习技能：#css/html  #js  #vue  \n\t</p>\n     </div>\n    <div class=\"col-md-3 col-sm-6 service\"> <i class=\"fa fa-bullseye\"></i>\n       <h4><strong>联系方式</strong></h4>\n       <p>邮箱：168866@163.com</p><br/>\n     </div>\n   </div>\n </div>\n","source":"about/index.md","raw":"---\ntitle: Telescope\nlayout: about\n---\n<div class=\"container\">\n   <div class=\"section-title center\">\n     <h2>基本 <strong>资料</strong></h2>\n     <hr>\n     </div>\n   <div class=\"space\"></div>\n   <div class=\"row\">\n     <div class=\"col-md-3 col-sm-6 service\"> <i class=\"fa fa-laptop\"></i>\n       <h4><strong>个人信息</strong></h4>\n       <p>\n\t英文名: Telescope &nbsp; <br />\n\t籍贯：中国\n\t</p>\n     </div>\n     <div class=\"col-md-3 col-sm-6 service\"> <i class=\"fa fa-code\"></i>\n       <h4><strong>专业学历</strong></h4>\n  <p>\n\t    专业：室内设计<br />\n\t     学历：专科<br />\n\t\n</p>\n     </div>\n     <div class=\"col-md-3 col-sm-6 service\"> <i class=\"fa fa-rocket\"></i>\n       <h4><strong>毕业学校</strong></h4>\n  <p>\n\t  学习技能：#css/html  #js  #vue  \n\t</p>\n     </div>\n    <div class=\"col-md-3 col-sm-6 service\"> <i class=\"fa fa-bullseye\"></i>\n       <h4><strong>联系方式</strong></h4>\n       <p>邮箱：168866@163.com</p><br/>\n     </div>\n   </div>\n </div>\n","date":"2022-08-25T18:49:34.740Z","updated":"2022-08-25T18:49:34.740Z","path":"about/index.html","comments":1,"_id":"cl79kecii0006bwsvhtsw8l3s","content":"<div class=\"container\">\n   <div class=\"section-title center\">\n     <h2>基本 <strong>资料</strong></h2>\n     <hr>\n     </div>\n   <div class=\"space\"></div>\n   <div class=\"row\">\n     <div class=\"col-md-3 col-sm-6 service\"> <i class=\"fa fa-laptop\"></i>\n       <h4><strong>个人信息</strong></h4>\n       <p>\n    英文名: Telescope &nbsp; <br />\n    籍贯：中国\n    </p>\n     </div>\n     <div class=\"col-md-3 col-sm-6 service\"> <i class=\"fa fa-code\"></i>\n       <h4><strong>专业学历</strong></h4>\n  <p>\n        专业：室内设计<br />\n         学历：专科<br />\n    \n</p>\n     </div>\n     <div class=\"col-md-3 col-sm-6 service\"> <i class=\"fa fa-rocket\"></i>\n       <h4><strong>毕业学校</strong></h4>\n  <p>\n      学习技能：#css/html  #js  #vue  \n    </p>\n     </div>\n    <div class=\"col-md-3 col-sm-6 service\"> <i class=\"fa fa-bullseye\"></i>\n       <h4><strong>联系方式</strong></h4>\n       <p>邮箱：168866@163.com</p><br/>\n     </div>\n   </div>\n </div>\n","site":{"data":{}},"wordcount":94,"excerpt":"","more":"<div class=\"container\">\n   <div class=\"section-title center\">\n     <h2>基本 <strong>资料</strong></h2>\n     <hr>\n     </div>\n   <div class=\"space\"></div>\n   <div class=\"row\">\n     <div class=\"col-md-3 col-sm-6 service\"> <i class=\"fa fa-laptop\"></i>\n       <h4><strong>个人信息</strong></h4>\n       <p>\n    英文名: Telescope &nbsp; <br />\n    籍贯：中国\n    </p>\n     </div>\n     <div class=\"col-md-3 col-sm-6 service\"> <i class=\"fa fa-code\"></i>\n       <h4><strong>专业学历</strong></h4>\n  <p>\n        专业：室内设计<br />\n         学历：专科<br />\n    \n</p>\n     </div>\n     <div class=\"col-md-3 col-sm-6 service\"> <i class=\"fa fa-rocket\"></i>\n       <h4><strong>毕业学校</strong></h4>\n  <p>\n      学习技能：#css/html  #js  #vue  \n    </p>\n     </div>\n    <div class=\"col-md-3 col-sm-6 service\"> <i class=\"fa fa-bullseye\"></i>\n       <h4><strong>联系方式</strong></h4>\n       <p>邮箱：168866@163.com</p><br/>\n     </div>\n   </div>\n </div>\n"}],"Post":[{"title":"Hexo 说明书","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-hexo.md","raw":"---\ntitle: Hexo 说明书\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-hexo","published":1,"date":"2022-08-23T21:47:33.690Z","updated":"2022-08-25T20:06:29.032Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl79keci90001bwsvh81ohw6b","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo new <span class=\"hljs-string\">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo server<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo generate<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo deploy<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"wordcount":367,"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo new <span class=\"hljs-string\">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo server<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo generate<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo deploy<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"如何更换Hexo主题","index_img":"/img/fluid.png","date":"2022-08-29T16:00:00.000Z","_content":"# 如何更换Hexo主题\n\n## 一，下载存放主题：\n## 一、到hexo官网下载hexo主题包（压缩包一般存储在GitHub上）。\n\n  1. 把压缩包解压到博客系统的文件夹themes。（我的是 E:/blog/themes）\n\n## 二、使用node更换主题\n  1. 使用nond控制栏工具，进入到我们Hexo的安装包下面。我的hexo主题放在E盘的blog中。因此，我输入下述代码\n * 注意：只输入 $ 符后面的命令\n  \n$ E： （先是进入E盘）\n$ cd blog  （再进入blog）\n\n## 三、修改blog文件下_config.yml文件内容。\n1. 在我们hexo安装包中找到_config.yml安装包，用编译器打开（vscode或者sublime）。\n  \n2. command + F 查找 theme将原来默认的主题 landscape 改为 下载的文件夹名称（hexo-theme-nexmoe-master）\n   修改好的代码参考以下：\n\n```\ntheme: hexo-theme-nexmoe-master\n```\n\n## 四、预览效果！\n1. 让我们来看一下，主题更换的效果\n\n$ hexo s  （重启服务器）\n\n2. 复制生成的链接 <a>http://localhost:4000/</a> 浏览器打开就可以看到效果了！\n  \n\n最后，\n总结\n\n纸上得来终觉浅，绝知此事要躬行！\n多敲代码，多动脑子！\n\n","source":"_posts/Hexo主题更换.md","raw":"---\ntitle: 如何更换Hexo主题\ntags: [telescope]\nindex_img: /img/fluid.png\ndate: 2022-08-30 \n---\n# 如何更换Hexo主题\n\n## 一，下载存放主题：\n## 一、到hexo官网下载hexo主题包（压缩包一般存储在GitHub上）。\n\n  1. 把压缩包解压到博客系统的文件夹themes。（我的是 E:/blog/themes）\n\n## 二、使用node更换主题\n  1. 使用nond控制栏工具，进入到我们Hexo的安装包下面。我的hexo主题放在E盘的blog中。因此，我输入下述代码\n * 注意：只输入 $ 符后面的命令\n  \n$ E： （先是进入E盘）\n$ cd blog  （再进入blog）\n\n## 三、修改blog文件下_config.yml文件内容。\n1. 在我们hexo安装包中找到_config.yml安装包，用编译器打开（vscode或者sublime）。\n  \n2. command + F 查找 theme将原来默认的主题 landscape 改为 下载的文件夹名称（hexo-theme-nexmoe-master）\n   修改好的代码参考以下：\n\n```\ntheme: hexo-theme-nexmoe-master\n```\n\n## 四、预览效果！\n1. 让我们来看一下，主题更换的效果\n\n$ hexo s  （重启服务器）\n\n2. 复制生成的链接 <a>http://localhost:4000/</a> 浏览器打开就可以看到效果了！\n  \n\n最后，\n总结\n\n纸上得来终觉浅，绝知此事要躬行！\n多敲代码，多动脑子！\n\n","slug":"Hexo主题更换","published":1,"updated":"2023-02-18T04:16:06.166Z","_id":"cl79kecie0003bwsv5p9j7g3n","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"如何更换Hexo主题\"><a href=\"#如何更换Hexo主题\" class=\"headerlink\" title=\"如何更换Hexo主题\"></a>如何更换Hexo主题</h1><h2 id=\"一，下载存放主题：\"><a href=\"#一，下载存放主题：\" class=\"headerlink\" title=\"一，下载存放主题：\"></a>一，下载存放主题：</h2><h2 id=\"一、到hexo官网下载hexo主题包（压缩包一般存储在GitHub上）。\"><a href=\"#一、到hexo官网下载hexo主题包（压缩包一般存储在GitHub上）。\" class=\"headerlink\" title=\"一、到hexo官网下载hexo主题包（压缩包一般存储在GitHub上）。\"></a>一、到hexo官网下载hexo主题包（压缩包一般存储在GitHub上）。</h2><ol>\n<li>把压缩包解压到博客系统的文件夹themes。（我的是 E:&#x2F;blog&#x2F;themes）</li>\n</ol>\n<h2 id=\"二、使用node更换主题\"><a href=\"#二、使用node更换主题\" class=\"headerlink\" title=\"二、使用node更换主题\"></a>二、使用node更换主题</h2><ol>\n<li>使用nond控制栏工具，进入到我们Hexo的安装包下面。我的hexo主题放在E盘的blog中。因此，我输入下述代码</li>\n</ol>\n<ul>\n<li>注意：只输入 $ 符后面的命令</li>\n</ul>\n<p>$ E： （先是进入E盘）<br>$ cd blog  （再进入blog）</p>\n<h2 id=\"三、修改blog文件下-config-yml文件内容。\"><a href=\"#三、修改blog文件下-config-yml文件内容。\" class=\"headerlink\" title=\"三、修改blog文件下_config.yml文件内容。\"></a>三、修改blog文件下_config.yml文件内容。</h2><ol>\n<li><p>在我们hexo安装包中找到_config.yml安装包，用编译器打开（vscode或者sublime）。</p>\n</li>\n<li><p>command + F 查找 theme将原来默认的主题 landscape 改为 下载的文件夹名称（hexo-theme-nexmoe-master）<br>修改好的代码参考以下：</p>\n</li>\n</ol>\n<figure class=\"highlight xl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xl\"><span class=\"hljs-built_in\">theme</span>: hexo-<span class=\"hljs-built_in\">theme</span>-nexmoe-master<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"四、预览效果！\"><a href=\"#四、预览效果！\" class=\"headerlink\" title=\"四、预览效果！\"></a>四、预览效果！</h2><ol>\n<li>让我们来看一下，主题更换的效果</li>\n</ol>\n<p>$ hexo s  （重启服务器）</p>\n<ol start=\"2\">\n<li>复制生成的链接 <a><a href=\"http://localhost:4000/\">http://localhost:4000/</a></a> 浏览器打开就可以看到效果了！</li>\n</ol>\n<p>最后，<br>总结</p>\n<p>纸上得来终觉浅，绝知此事要躬行！<br>多敲代码，多动脑子！</p>\n","site":{"data":{}},"wordcount":514,"excerpt":"","more":"<h1 id=\"如何更换Hexo主题\"><a href=\"#如何更换Hexo主题\" class=\"headerlink\" title=\"如何更换Hexo主题\"></a>如何更换Hexo主题</h1><h2 id=\"一，下载存放主题：\"><a href=\"#一，下载存放主题：\" class=\"headerlink\" title=\"一，下载存放主题：\"></a>一，下载存放主题：</h2><h2 id=\"一、到hexo官网下载hexo主题包（压缩包一般存储在GitHub上）。\"><a href=\"#一、到hexo官网下载hexo主题包（压缩包一般存储在GitHub上）。\" class=\"headerlink\" title=\"一、到hexo官网下载hexo主题包（压缩包一般存储在GitHub上）。\"></a>一、到hexo官网下载hexo主题包（压缩包一般存储在GitHub上）。</h2><ol>\n<li>把压缩包解压到博客系统的文件夹themes。（我的是 E:&#x2F;blog&#x2F;themes）</li>\n</ol>\n<h2 id=\"二、使用node更换主题\"><a href=\"#二、使用node更换主题\" class=\"headerlink\" title=\"二、使用node更换主题\"></a>二、使用node更换主题</h2><ol>\n<li>使用nond控制栏工具，进入到我们Hexo的安装包下面。我的hexo主题放在E盘的blog中。因此，我输入下述代码</li>\n</ol>\n<ul>\n<li>注意：只输入 $ 符后面的命令</li>\n</ul>\n<p>$ E： （先是进入E盘）<br>$ cd blog  （再进入blog）</p>\n<h2 id=\"三、修改blog文件下-config-yml文件内容。\"><a href=\"#三、修改blog文件下-config-yml文件内容。\" class=\"headerlink\" title=\"三、修改blog文件下_config.yml文件内容。\"></a>三、修改blog文件下_config.yml文件内容。</h2><ol>\n<li><p>在我们hexo安装包中找到_config.yml安装包，用编译器打开（vscode或者sublime）。</p>\n</li>\n<li><p>command + F 查找 theme将原来默认的主题 landscape 改为 下载的文件夹名称（hexo-theme-nexmoe-master）<br>修改好的代码参考以下：</p>\n</li>\n</ol>\n<figure class=\"highlight xl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xl\"><span class=\"hljs-built_in\">theme</span>: hexo-<span class=\"hljs-built_in\">theme</span>-nexmoe-master<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"四、预览效果！\"><a href=\"#四、预览效果！\" class=\"headerlink\" title=\"四、预览效果！\"></a>四、预览效果！</h2><ol>\n<li>让我们来看一下，主题更换的效果</li>\n</ol>\n<p>$ hexo s  （重启服务器）</p>\n<ol start=\"2\">\n<li>复制生成的链接 <a><a href=\"http://localhost:4000/\">http://localhost:4000/</a></a> 浏览器打开就可以看到效果了！</li>\n</ol>\n<p>最后，<br>总结</p>\n<p>纸上得来终觉浅，绝知此事要躬行！<br>多敲代码，多动脑子！</p>\n"},{"title":"小白也能一键创建博客（安装node.js）","index_img":"/img/10001.jpg","date":"2022-12-17T16:00:00.000Z","_content":"## 一.安装 hexo 框架\n\n1. 百度 <a>http://nodejs.cn/download/</a> 直接下载安装node.js \n2. 电脑启动命令行 CTRL+R 输入 node-v 查看node版本，看到显示版本号就说明安装成功了。\n3. npm -v  #查看npm版本 \n4. npm install -g cnpm --registry=https://registry.npm.taobao.org  #安装淘宝的cnpm 管理器\n5. cnpm -v  #查看cnpm版本\n6. cnpm install -g hexo-cli  #安装hexo框架\n7.  hexo -v  #查看hexo版本\n8.  mkdir blog  #创建blog目录\n9.  cd blog  #进入blog目录   \n## 二.初始化博客，本地访问\n\n1.  hexo init  #生成博客 初始化博客（如果windows系统创建失败，可以现用管理员身份在C:\\Windows\\System32中创建文件夹，之后再转移到别的文件夹中）\n2.  hexo s  #启动本地博客服务\n3.  <a>http://localhost:4000/</a>  #本地访问地址 (因为是本地服务器所以只能本机访问)\n4.  hexo new “我的第一篇文章的名字” #创建新的文章\n5.  hexo clean  #清理blog文件夹缓存\n6.  hexo g  #生成\n7.  hexo s  #生成本地服务器，复制生成的 <a>http://localhost:4000/</a> 链接可以在本电脑浏览博客啦 ~\n \n## 三.上传 Github 部署博客 \n\n8.  在Github创建一个新的仓库 TelescopeX.github.io (前缀名必须是你用户名，后缀必须是.github.io)\n9.  cnpm install --save hexo-deployer-git  #在blog目录下安装git部署插件\n10. hexo c #清理一下\n11. hexo g #生成\n12. hexo d #部署到远程Github仓库\n13. 上面创建的仓库名 <a>(https://telescopex.github.io/)</a> 就是网址\n","source":"_posts/使用node创建博客.md","raw":"---\ntitle: 小白也能一键创建博客（安装node.js）\ntags: [Telescope]\nindex_img: /img/10001.jpg\ndate: 2022-12-18\n---\n## 一.安装 hexo 框架\n\n1. 百度 <a>http://nodejs.cn/download/</a> 直接下载安装node.js \n2. 电脑启动命令行 CTRL+R 输入 node-v 查看node版本，看到显示版本号就说明安装成功了。\n3. npm -v  #查看npm版本 \n4. npm install -g cnpm --registry=https://registry.npm.taobao.org  #安装淘宝的cnpm 管理器\n5. cnpm -v  #查看cnpm版本\n6. cnpm install -g hexo-cli  #安装hexo框架\n7.  hexo -v  #查看hexo版本\n8.  mkdir blog  #创建blog目录\n9.  cd blog  #进入blog目录   \n## 二.初始化博客，本地访问\n\n1.  hexo init  #生成博客 初始化博客（如果windows系统创建失败，可以现用管理员身份在C:\\Windows\\System32中创建文件夹，之后再转移到别的文件夹中）\n2.  hexo s  #启动本地博客服务\n3.  <a>http://localhost:4000/</a>  #本地访问地址 (因为是本地服务器所以只能本机访问)\n4.  hexo new “我的第一篇文章的名字” #创建新的文章\n5.  hexo clean  #清理blog文件夹缓存\n6.  hexo g  #生成\n7.  hexo s  #生成本地服务器，复制生成的 <a>http://localhost:4000/</a> 链接可以在本电脑浏览博客啦 ~\n \n## 三.上传 Github 部署博客 \n\n8.  在Github创建一个新的仓库 TelescopeX.github.io (前缀名必须是你用户名，后缀必须是.github.io)\n9.  cnpm install --save hexo-deployer-git  #在blog目录下安装git部署插件\n10. hexo c #清理一下\n11. hexo g #生成\n12. hexo d #部署到远程Github仓库\n13. 上面创建的仓库名 <a>(https://telescopex.github.io/)</a> 就是网址\n","slug":"使用node创建博客","published":1,"updated":"2023-02-18T02:55:25.154Z","_id":"cl79kecih0005bwsv08mz1yui","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"一-安装-hexo-框架\"><a href=\"#一-安装-hexo-框架\" class=\"headerlink\" title=\"一.安装 hexo 框架\"></a>一.安装 hexo 框架</h2><ol>\n<li>百度 <a><a href=\"http://nodejs.cn/download/\">http://nodejs.cn/download/</a></a> 直接下载安装node.js </li>\n<li>电脑启动命令行 CTRL+R 输入 node-v 查看node版本，看到显示版本号就说明安装成功了。</li>\n<li>npm -v  #查看npm版本 </li>\n<li>npm install -g cnpm –registry&#x3D;<a href=\"https://registry.npm.taobao.org/\">https://registry.npm.taobao.org</a>  #安装淘宝的cnpm 管理器</li>\n<li>cnpm -v  #查看cnpm版本</li>\n<li>cnpm install -g hexo-cli  #安装hexo框架</li>\n<li>hexo -v  #查看hexo版本</li>\n<li>mkdir blog  #创建blog目录</li>\n<li>cd blog  #进入blog目录</li>\n</ol>\n<h2 id=\"二-初始化博客，本地访问\"><a href=\"#二-初始化博客，本地访问\" class=\"headerlink\" title=\"二.初始化博客，本地访问\"></a>二.初始化博客，本地访问</h2><ol>\n<li>hexo init  #生成博客 初始化博客（如果windows系统创建失败，可以现用管理员身份在C:\\Windows\\System32中创建文件夹，之后再转移到别的文件夹中）</li>\n<li>hexo s  #启动本地博客服务</li>\n<li><a><a href=\"http://localhost:4000/\">http://localhost:4000/</a></a>  #本地访问地址 (因为是本地服务器所以只能本机访问)</li>\n<li>hexo new “我的第一篇文章的名字” #创建新的文章</li>\n<li>hexo clean  #清理blog文件夹缓存</li>\n<li>hexo g  #生成</li>\n<li>hexo s  #生成本地服务器，复制生成的 <a><a href=\"http://localhost:4000/\">http://localhost:4000/</a></a> 链接可以在本电脑浏览博客啦 ~</li>\n</ol>\n<h2 id=\"三-上传-Github-部署博客\"><a href=\"#三-上传-Github-部署博客\" class=\"headerlink\" title=\"三.上传 Github 部署博客\"></a>三.上传 Github 部署博客</h2><ol start=\"8\">\n<li>在Github创建一个新的仓库 TelescopeX.github.io (前缀名必须是你用户名，后缀必须是.github.io)</li>\n<li>cnpm install –save hexo-deployer-git  #在blog目录下安装git部署插件</li>\n<li>hexo c #清理一下</li>\n<li>hexo g #生成</li>\n<li>hexo d #部署到远程Github仓库</li>\n<li>上面创建的仓库名 <a>(<a href=\"https://telescopex.github.io/\">https://telescopex.github.io/</a>)</a> 就是网址</li>\n</ol>\n","site":{"data":{}},"wordcount":753,"excerpt":"","more":"<h2 id=\"一-安装-hexo-框架\"><a href=\"#一-安装-hexo-框架\" class=\"headerlink\" title=\"一.安装 hexo 框架\"></a>一.安装 hexo 框架</h2><ol>\n<li>百度 <a><a href=\"http://nodejs.cn/download/\">http://nodejs.cn/download/</a></a> 直接下载安装node.js </li>\n<li>电脑启动命令行 CTRL+R 输入 node-v 查看node版本，看到显示版本号就说明安装成功了。</li>\n<li>npm -v  #查看npm版本 </li>\n<li>npm install -g cnpm –registry&#x3D;<a href=\"https://registry.npm.taobao.org/\">https://registry.npm.taobao.org</a>  #安装淘宝的cnpm 管理器</li>\n<li>cnpm -v  #查看cnpm版本</li>\n<li>cnpm install -g hexo-cli  #安装hexo框架</li>\n<li>hexo -v  #查看hexo版本</li>\n<li>mkdir blog  #创建blog目录</li>\n<li>cd blog  #进入blog目录</li>\n</ol>\n<h2 id=\"二-初始化博客，本地访问\"><a href=\"#二-初始化博客，本地访问\" class=\"headerlink\" title=\"二.初始化博客，本地访问\"></a>二.初始化博客，本地访问</h2><ol>\n<li>hexo init  #生成博客 初始化博客（如果windows系统创建失败，可以现用管理员身份在C:\\Windows\\System32中创建文件夹，之后再转移到别的文件夹中）</li>\n<li>hexo s  #启动本地博客服务</li>\n<li><a><a href=\"http://localhost:4000/\">http://localhost:4000/</a></a>  #本地访问地址 (因为是本地服务器所以只能本机访问)</li>\n<li>hexo new “我的第一篇文章的名字” #创建新的文章</li>\n<li>hexo clean  #清理blog文件夹缓存</li>\n<li>hexo g  #生成</li>\n<li>hexo s  #生成本地服务器，复制生成的 <a><a href=\"http://localhost:4000/\">http://localhost:4000/</a></a> 链接可以在本电脑浏览博客啦 ~</li>\n</ol>\n<h2 id=\"三-上传-Github-部署博客\"><a href=\"#三-上传-Github-部署博客\" class=\"headerlink\" title=\"三.上传 Github 部署博客\"></a>三.上传 Github 部署博客</h2><ol start=\"8\">\n<li>在Github创建一个新的仓库 TelescopeX.github.io (前缀名必须是你用户名，后缀必须是.github.io)</li>\n<li>cnpm install –save hexo-deployer-git  #在blog目录下安装git部署插件</li>\n<li>hexo c #清理一下</li>\n<li>hexo g #生成</li>\n<li>hexo d #部署到远程Github仓库</li>\n<li>上面创建的仓库名 <a>(<a href=\"https://telescopex.github.io/\">https://telescopex.github.io/</a>)</a> 就是网址</li>\n</ol>\n"},{"title":"HTTP和HTTPS的基本概念和区别","index_img":"/img/10009.jpg","date":"2022-08-25T16:00:00.000Z","_content":"# HTTP和HTTPS的基本概念和区别\n\n## 一、HTTP和HTTPS的基本概念\n\n1. HTTP（HyperText Transfer Protocol）：超文本（文本、图片、视频、音频、css、js....）传输协议 ，它是基于请求/响应模式、应用层（TCP/IP协议）、无状态（没有记忆功能）的协议。HTTP 协议是以明文方式发送信息的，如果黑客截取了 Web 浏览器和服务器之间的传输报文，就可以直接获得其中的信息。\n\n  HTTP协议的通信过程(工作原理)？\n\n  第一步：客户端与服务器创建连接；\n\n  第二步：客户端发送请求给服务器；\n\n  第三步：服务接收处理请求并返回响应给客户端；\n\n  第四步：客户端与服务器自动断开连接；\n\n2. HTTPS（Hyper Text Transfer Protocol over SecureSocket Layer）：是以安全为目标的 HTTP 通道，是 HTTP 的安全版。HTTPS 的安全基础是 SSL。SSL 协议位于 TCP/IP 协议与各种应用层协议之间，为数据通讯提供安全支持。SSL 协议可分为两层：SSL 记录协议（SSL Record Protocol），它建立在可靠的传输协议（如TCP）之上，为高层协议提供数据封装、压缩、加密等基本功能的支持。SSL 握手协议（SSL Handshake Protocol），它建立在 SSL 记录协议之上，用于在实际的数据传输开始前，通讯双方进行身份认证、协商加密算法、交换加密密钥等。\n\n## 二、HTTPS协议的通信过程(工作原理)？​​​​​​​​​​​​\n1. 首先客户端向服务端发起一个随机值，以及一个加密算法，\n   服务端收到后返回一个协商好的加密算法，以及另一个随机值。\n\n2. 服务端在发送一个公钥CA。\n\n3. 客户端收到以后先验证CA是否有效，如果无效则报错弹窗，有过有效则进行下一步操作。\n\n4. 客户端使用之前的两个随机值和一个预主密钥组成一个会话密钥，在通过服务端传来的公钥加密把会话密钥发送给服务端。\n\n5. 服务端收到后使用私钥解密，得到两个随机值和预主密钥，然后组装成会话密钥。\n\n6. 客户端在向服务端发起一条信息，这条信息使用会话秘钥加密，用来验证服务端时候能收到加密的信息。\n\n7. 服务端收到信息后返回一个会话秘钥加密的信息。\n\n8. 都收到以后SSL层连接建立成功。\n\n   \n## 三、既然有了HTTP又为什么要有HTTPS？（HTTPS的设计目标）\n\n1. 数据保密性：保证数据内容在传输的过程中不会被第三方查看。就像快递员传递包裹一样，都进行了封装，别人无法获知里面装了什么  。\n\n2. 数据完整性：及时发现被第三方篡改的传输内容。就像快递员虽然不知道包裹里装了什么东西，但他有可能中途掉包，数据完整性就是指如果被掉包，我们能轻松发现并拒收 。\n\n3. 身份校验安全性：保证数据到达用户期望的目的地。就像我们邮寄包裹时，虽然是一个封装好的未掉包的包裹，但必须确定这个包裹不会送错地方，通过身份校验来确保送对了地方  。\n\n## 四、HTTP 与 HTTPS  的区别\n\n1. HTTPS  协议需要到 CA （Certificate Authority，证书颁发机构）申请证书，一般免费证书较少，因而需要一定费用。(以前的网易官网是http，而网易邮箱是 https 。)\n\n2. HTTP 是超文本传输协议，信息是明文传输，HTTPS 则是具有安全性的 SSL 加密传输协议。\n\n3. HTTP 和 HTTPS 使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。\n\n4. HTTP 的连接很简单，是无状态的。HTTPS 协议是由 SSL+HTTP 协议构建的可进行加密传输、身份认证的网络协议，比 HTTP 协议安\n","source":"_posts/htttp协议.md","raw":"\n---\ntitle: HTTP和HTTPS的基本概念和区别\ntags: [telescope]\nindex_img: /img/10009.jpg\ndate: 2022-08-26\n----\n# HTTP和HTTPS的基本概念和区别\n\n## 一、HTTP和HTTPS的基本概念\n\n1. HTTP（HyperText Transfer Protocol）：超文本（文本、图片、视频、音频、css、js....）传输协议 ，它是基于请求/响应模式、应用层（TCP/IP协议）、无状态（没有记忆功能）的协议。HTTP 协议是以明文方式发送信息的，如果黑客截取了 Web 浏览器和服务器之间的传输报文，就可以直接获得其中的信息。\n\n  HTTP协议的通信过程(工作原理)？\n\n  第一步：客户端与服务器创建连接；\n\n  第二步：客户端发送请求给服务器；\n\n  第三步：服务接收处理请求并返回响应给客户端；\n\n  第四步：客户端与服务器自动断开连接；\n\n2. HTTPS（Hyper Text Transfer Protocol over SecureSocket Layer）：是以安全为目标的 HTTP 通道，是 HTTP 的安全版。HTTPS 的安全基础是 SSL。SSL 协议位于 TCP/IP 协议与各种应用层协议之间，为数据通讯提供安全支持。SSL 协议可分为两层：SSL 记录协议（SSL Record Protocol），它建立在可靠的传输协议（如TCP）之上，为高层协议提供数据封装、压缩、加密等基本功能的支持。SSL 握手协议（SSL Handshake Protocol），它建立在 SSL 记录协议之上，用于在实际的数据传输开始前，通讯双方进行身份认证、协商加密算法、交换加密密钥等。\n\n## 二、HTTPS协议的通信过程(工作原理)？​​​​​​​​​​​​\n1. 首先客户端向服务端发起一个随机值，以及一个加密算法，\n   服务端收到后返回一个协商好的加密算法，以及另一个随机值。\n\n2. 服务端在发送一个公钥CA。\n\n3. 客户端收到以后先验证CA是否有效，如果无效则报错弹窗，有过有效则进行下一步操作。\n\n4. 客户端使用之前的两个随机值和一个预主密钥组成一个会话密钥，在通过服务端传来的公钥加密把会话密钥发送给服务端。\n\n5. 服务端收到后使用私钥解密，得到两个随机值和预主密钥，然后组装成会话密钥。\n\n6. 客户端在向服务端发起一条信息，这条信息使用会话秘钥加密，用来验证服务端时候能收到加密的信息。\n\n7. 服务端收到信息后返回一个会话秘钥加密的信息。\n\n8. 都收到以后SSL层连接建立成功。\n\n   \n## 三、既然有了HTTP又为什么要有HTTPS？（HTTPS的设计目标）\n\n1. 数据保密性：保证数据内容在传输的过程中不会被第三方查看。就像快递员传递包裹一样，都进行了封装，别人无法获知里面装了什么  。\n\n2. 数据完整性：及时发现被第三方篡改的传输内容。就像快递员虽然不知道包裹里装了什么东西，但他有可能中途掉包，数据完整性就是指如果被掉包，我们能轻松发现并拒收 。\n\n3. 身份校验安全性：保证数据到达用户期望的目的地。就像我们邮寄包裹时，虽然是一个封装好的未掉包的包裹，但必须确定这个包裹不会送错地方，通过身份校验来确保送对了地方  。\n\n## 四、HTTP 与 HTTPS  的区别\n\n1. HTTPS  协议需要到 CA （Certificate Authority，证书颁发机构）申请证书，一般免费证书较少，因而需要一定费用。(以前的网易官网是http，而网易邮箱是 https 。)\n\n2. HTTP 是超文本传输协议，信息是明文传输，HTTPS 则是具有安全性的 SSL 加密传输协议。\n\n3. HTTP 和 HTTPS 使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。\n\n4. HTTP 的连接很简单，是无状态的。HTTPS 协议是由 SSL+HTTP 协议构建的可进行加密传输、身份认证的网络协议，比 HTTP 协议安\n","slug":"htttp协议","published":1,"updated":"2023-02-18T03:50:12.651Z","_id":"cl79kecij0007bwsv582f6byt","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"HTTP和HTTPS的基本概念和区别\"><a href=\"#HTTP和HTTPS的基本概念和区别\" class=\"headerlink\" title=\"HTTP和HTTPS的基本概念和区别\"></a>HTTP和HTTPS的基本概念和区别</h1><h2 id=\"一、HTTP和HTTPS的基本概念\"><a href=\"#一、HTTP和HTTPS的基本概念\" class=\"headerlink\" title=\"一、HTTP和HTTPS的基本概念\"></a>一、HTTP和HTTPS的基本概念</h2><ol>\n<li>HTTP（HyperText Transfer Protocol）：超文本（文本、图片、视频、音频、css、js….）传输协议 ，它是基于请求&#x2F;响应模式、应用层（TCP&#x2F;IP协议）、无状态（没有记忆功能）的协议。HTTP 协议是以明文方式发送信息的，如果黑客截取了 Web 浏览器和服务器之间的传输报文，就可以直接获得其中的信息。</li>\n</ol>\n<p>  HTTP协议的通信过程(工作原理)？</p>\n<p>  第一步：客户端与服务器创建连接；</p>\n<p>  第二步：客户端发送请求给服务器；</p>\n<p>  第三步：服务接收处理请求并返回响应给客户端；</p>\n<p>  第四步：客户端与服务器自动断开连接；</p>\n<ol start=\"2\">\n<li>HTTPS（Hyper Text Transfer Protocol over SecureSocket Layer）：是以安全为目标的 HTTP 通道，是 HTTP 的安全版。HTTPS 的安全基础是 SSL。SSL 协议位于 TCP&#x2F;IP 协议与各种应用层协议之间，为数据通讯提供安全支持。SSL 协议可分为两层：SSL 记录协议（SSL Record Protocol），它建立在可靠的传输协议（如TCP）之上，为高层协议提供数据封装、压缩、加密等基本功能的支持。SSL 握手协议（SSL Handshake Protocol），它建立在 SSL 记录协议之上，用于在实际的数据传输开始前，通讯双方进行身份认证、协商加密算法、交换加密密钥等。</li>\n</ol>\n<h2 id=\"二、HTTPS协议的通信过程-工作原理-？​​​​​​​​​​​​\"><a href=\"#二、HTTPS协议的通信过程-工作原理-？​​​​​​​​​​​​\" class=\"headerlink\" title=\"二、HTTPS协议的通信过程(工作原理)？​​​​​​​​​​​​\"></a>二、HTTPS协议的通信过程(工作原理)？​​​​​​​​​​​​</h2><ol>\n<li><p>首先客户端向服务端发起一个随机值，以及一个加密算法，<br>服务端收到后返回一个协商好的加密算法，以及另一个随机值。</p>\n</li>\n<li><p>服务端在发送一个公钥CA。</p>\n</li>\n<li><p>客户端收到以后先验证CA是否有效，如果无效则报错弹窗，有过有效则进行下一步操作。</p>\n</li>\n<li><p>客户端使用之前的两个随机值和一个预主密钥组成一个会话密钥，在通过服务端传来的公钥加密把会话密钥发送给服务端。</p>\n</li>\n<li><p>服务端收到后使用私钥解密，得到两个随机值和预主密钥，然后组装成会话密钥。</p>\n</li>\n<li><p>客户端在向服务端发起一条信息，这条信息使用会话秘钥加密，用来验证服务端时候能收到加密的信息。</p>\n</li>\n<li><p>服务端收到信息后返回一个会话秘钥加密的信息。</p>\n</li>\n<li><p>都收到以后SSL层连接建立成功。</p>\n</li>\n</ol>\n<h2 id=\"三、既然有了HTTP又为什么要有HTTPS？（HTTPS的设计目标）\"><a href=\"#三、既然有了HTTP又为什么要有HTTPS？（HTTPS的设计目标）\" class=\"headerlink\" title=\"三、既然有了HTTP又为什么要有HTTPS？（HTTPS的设计目标）\"></a>三、既然有了HTTP又为什么要有HTTPS？（HTTPS的设计目标）</h2><ol>\n<li><p>数据保密性：保证数据内容在传输的过程中不会被第三方查看。就像快递员传递包裹一样，都进行了封装，别人无法获知里面装了什么  。</p>\n</li>\n<li><p>数据完整性：及时发现被第三方篡改的传输内容。就像快递员虽然不知道包裹里装了什么东西，但他有可能中途掉包，数据完整性就是指如果被掉包，我们能轻松发现并拒收 。</p>\n</li>\n<li><p>身份校验安全性：保证数据到达用户期望的目的地。就像我们邮寄包裹时，虽然是一个封装好的未掉包的包裹，但必须确定这个包裹不会送错地方，通过身份校验来确保送对了地方  。</p>\n</li>\n</ol>\n<h2 id=\"四、HTTP-与-HTTPS-的区别\"><a href=\"#四、HTTP-与-HTTPS-的区别\" class=\"headerlink\" title=\"四、HTTP 与 HTTPS  的区别\"></a>四、HTTP 与 HTTPS  的区别</h2><ol>\n<li><p>HTTPS  协议需要到 CA （Certificate Authority，证书颁发机构）申请证书，一般免费证书较少，因而需要一定费用。(以前的网易官网是http，而网易邮箱是 https 。)</p>\n</li>\n<li><p>HTTP 是超文本传输协议，信息是明文传输，HTTPS 则是具有安全性的 SSL 加密传输协议。</p>\n</li>\n<li><p>HTTP 和 HTTPS 使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。</p>\n</li>\n<li><p>HTTP 的连接很简单，是无状态的。HTTPS 协议是由 SSL+HTTP 协议构建的可进行加密传输、身份认证的网络协议，比 HTTP 协议安</p>\n</li>\n</ol>\n","site":{"data":{}},"wordcount":1425,"excerpt":"","more":"<h1 id=\"HTTP和HTTPS的基本概念和区别\"><a href=\"#HTTP和HTTPS的基本概念和区别\" class=\"headerlink\" title=\"HTTP和HTTPS的基本概念和区别\"></a>HTTP和HTTPS的基本概念和区别</h1><h2 id=\"一、HTTP和HTTPS的基本概念\"><a href=\"#一、HTTP和HTTPS的基本概念\" class=\"headerlink\" title=\"一、HTTP和HTTPS的基本概念\"></a>一、HTTP和HTTPS的基本概念</h2><ol>\n<li>HTTP（HyperText Transfer Protocol）：超文本（文本、图片、视频、音频、css、js….）传输协议 ，它是基于请求&#x2F;响应模式、应用层（TCP&#x2F;IP协议）、无状态（没有记忆功能）的协议。HTTP 协议是以明文方式发送信息的，如果黑客截取了 Web 浏览器和服务器之间的传输报文，就可以直接获得其中的信息。</li>\n</ol>\n<p>  HTTP协议的通信过程(工作原理)？</p>\n<p>  第一步：客户端与服务器创建连接；</p>\n<p>  第二步：客户端发送请求给服务器；</p>\n<p>  第三步：服务接收处理请求并返回响应给客户端；</p>\n<p>  第四步：客户端与服务器自动断开连接；</p>\n<ol start=\"2\">\n<li>HTTPS（Hyper Text Transfer Protocol over SecureSocket Layer）：是以安全为目标的 HTTP 通道，是 HTTP 的安全版。HTTPS 的安全基础是 SSL。SSL 协议位于 TCP&#x2F;IP 协议与各种应用层协议之间，为数据通讯提供安全支持。SSL 协议可分为两层：SSL 记录协议（SSL Record Protocol），它建立在可靠的传输协议（如TCP）之上，为高层协议提供数据封装、压缩、加密等基本功能的支持。SSL 握手协议（SSL Handshake Protocol），它建立在 SSL 记录协议之上，用于在实际的数据传输开始前，通讯双方进行身份认证、协商加密算法、交换加密密钥等。</li>\n</ol>\n<h2 id=\"二、HTTPS协议的通信过程-工作原理-？​​​​​​​​​​​​\"><a href=\"#二、HTTPS协议的通信过程-工作原理-？​​​​​​​​​​​​\" class=\"headerlink\" title=\"二、HTTPS协议的通信过程(工作原理)？​​​​​​​​​​​​\"></a>二、HTTPS协议的通信过程(工作原理)？​​​​​​​​​​​​</h2><ol>\n<li><p>首先客户端向服务端发起一个随机值，以及一个加密算法，<br>服务端收到后返回一个协商好的加密算法，以及另一个随机值。</p>\n</li>\n<li><p>服务端在发送一个公钥CA。</p>\n</li>\n<li><p>客户端收到以后先验证CA是否有效，如果无效则报错弹窗，有过有效则进行下一步操作。</p>\n</li>\n<li><p>客户端使用之前的两个随机值和一个预主密钥组成一个会话密钥，在通过服务端传来的公钥加密把会话密钥发送给服务端。</p>\n</li>\n<li><p>服务端收到后使用私钥解密，得到两个随机值和预主密钥，然后组装成会话密钥。</p>\n</li>\n<li><p>客户端在向服务端发起一条信息，这条信息使用会话秘钥加密，用来验证服务端时候能收到加密的信息。</p>\n</li>\n<li><p>服务端收到信息后返回一个会话秘钥加密的信息。</p>\n</li>\n<li><p>都收到以后SSL层连接建立成功。</p>\n</li>\n</ol>\n<h2 id=\"三、既然有了HTTP又为什么要有HTTPS？（HTTPS的设计目标）\"><a href=\"#三、既然有了HTTP又为什么要有HTTPS？（HTTPS的设计目标）\" class=\"headerlink\" title=\"三、既然有了HTTP又为什么要有HTTPS？（HTTPS的设计目标）\"></a>三、既然有了HTTP又为什么要有HTTPS？（HTTPS的设计目标）</h2><ol>\n<li><p>数据保密性：保证数据内容在传输的过程中不会被第三方查看。就像快递员传递包裹一样，都进行了封装，别人无法获知里面装了什么  。</p>\n</li>\n<li><p>数据完整性：及时发现被第三方篡改的传输内容。就像快递员虽然不知道包裹里装了什么东西，但他有可能中途掉包，数据完整性就是指如果被掉包，我们能轻松发现并拒收 。</p>\n</li>\n<li><p>身份校验安全性：保证数据到达用户期望的目的地。就像我们邮寄包裹时，虽然是一个封装好的未掉包的包裹，但必须确定这个包裹不会送错地方，通过身份校验来确保送对了地方  。</p>\n</li>\n</ol>\n<h2 id=\"四、HTTP-与-HTTPS-的区别\"><a href=\"#四、HTTP-与-HTTPS-的区别\" class=\"headerlink\" title=\"四、HTTP 与 HTTPS  的区别\"></a>四、HTTP 与 HTTPS  的区别</h2><ol>\n<li><p>HTTPS  协议需要到 CA （Certificate Authority，证书颁发机构）申请证书，一般免费证书较少，因而需要一定费用。(以前的网易官网是http，而网易邮箱是 https 。)</p>\n</li>\n<li><p>HTTP 是超文本传输协议，信息是明文传输，HTTPS 则是具有安全性的 SSL 加密传输协议。</p>\n</li>\n<li><p>HTTP 和 HTTPS 使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。</p>\n</li>\n<li><p>HTTP 的连接很简单，是无状态的。HTTPS 协议是由 SSL+HTTP 协议构建的可进行加密传输、身份认证的网络协议，比 HTTP 协议安</p>\n</li>\n</ol>\n"},{"title":"宝塔部署前后端分离Vue项目","index_img":"/img/bt.png","date":"2022-08-24T16:00:00.000Z","_content":"# 宝塔部署前后端Vue项目\n---\n## 一、准备工作\n\n1. 在云服务器控制台，远程连接实例，在shell命令行中输入:\n\n/etc/init.d/bt default （默认连接）\n\n2. 进入宝塔面板网站，输入账号密码，进入宝塔控制台。https://www.bt.cn/new/download.html\n\n3. 在软件商店中下载PM2管理器，安装好之后再设置中选择合适的Node.js版本。\n\n4. 在宝塔面板 --> 安全 -->放行端口，放行前端和后端的端口号。\n\n## 二、导入文件\n\n5. 通过宝塔面板的文件栏，找到 /www/wwwroot 目录下，将后端项目压缩包，解压到该目录下。再进入到 /www/wwwroot/http 目录下，将前端项目的dist包，解压到该目录下，即可。\n\n6. 温馨提示：dist包可以通过前端项目 npm run build 自动打包生成哦。\n\n7. SQL数据库文件导入，在面版 --> 数据库 -->下载phpMYAdmin（管理MySQL数据库的），点击添加数据库，将自己的数据库文件导入即可。\n\n## 三、启动后端项目 \n\n8. 在面板 --> 终端中输入 cd /www/wwwroot/后端项目 ，进入后端文件夹，输入：\n\n9. npm start  （运行后端项目）\n\n  就这样，前后端分离Vue项目部署完成了。\n\n\n## 可能遇到的问题：\n\n* 比如端口号占用，可以通过在终端中输入以下命令。\n\nnetstat -nap | grep 3000 （可以查看3000端口的占用情况）。\n\n kill -9 2048482 （可杀掉占用端口号的进程），其中2048482为占用端口的PID号。\n\n * 再进行启动后端项目的npm start,就可以正常启动后端项目了。\n\n\n\n","source":"_posts/宝塔部署前后端分离Vue项目.md","raw":"\n---\ntitle: 宝塔部署前后端分离Vue项目\ntags: [telescope]\nindex_img: /img/bt.png\ndate: 2022-08-25 \n---\n# 宝塔部署前后端Vue项目\n---\n## 一、准备工作\n\n1. 在云服务器控制台，远程连接实例，在shell命令行中输入:\n\n/etc/init.d/bt default （默认连接）\n\n2. 进入宝塔面板网站，输入账号密码，进入宝塔控制台。https://www.bt.cn/new/download.html\n\n3. 在软件商店中下载PM2管理器，安装好之后再设置中选择合适的Node.js版本。\n\n4. 在宝塔面板 --> 安全 -->放行端口，放行前端和后端的端口号。\n\n## 二、导入文件\n\n5. 通过宝塔面板的文件栏，找到 /www/wwwroot 目录下，将后端项目压缩包，解压到该目录下。再进入到 /www/wwwroot/http 目录下，将前端项目的dist包，解压到该目录下，即可。\n\n6. 温馨提示：dist包可以通过前端项目 npm run build 自动打包生成哦。\n\n7. SQL数据库文件导入，在面版 --> 数据库 -->下载phpMYAdmin（管理MySQL数据库的），点击添加数据库，将自己的数据库文件导入即可。\n\n## 三、启动后端项目 \n\n8. 在面板 --> 终端中输入 cd /www/wwwroot/后端项目 ，进入后端文件夹，输入：\n\n9. npm start  （运行后端项目）\n\n  就这样，前后端分离Vue项目部署完成了。\n\n\n## 可能遇到的问题：\n\n* 比如端口号占用，可以通过在终端中输入以下命令。\n\nnetstat -nap | grep 3000 （可以查看3000端口的占用情况）。\n\n kill -9 2048482 （可杀掉占用端口号的进程），其中2048482为占用端口的PID号。\n\n * 再进行启动后端项目的npm start,就可以正常启动后端项目了。\n\n\n\n","slug":"宝塔部署前后端分离Vue项目","published":1,"updated":"2023-02-18T04:30:06.895Z","_id":"cl7fial9i0000y4svfz85bd4k","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"宝塔部署前后端Vue项目\"><a href=\"#宝塔部署前后端Vue项目\" class=\"headerlink\" title=\"宝塔部署前后端Vue项目\"></a>宝塔部署前后端Vue项目</h1><hr>\n<h2 id=\"一、准备工作\"><a href=\"#一、准备工作\" class=\"headerlink\" title=\"一、准备工作\"></a>一、准备工作</h2><ol>\n<li>在云服务器控制台，远程连接实例，在shell命令行中输入:</li>\n</ol>\n<p>&#x2F;etc&#x2F;init.d&#x2F;bt default （默认连接）</p>\n<ol start=\"2\">\n<li><p>进入宝塔面板网站，输入账号密码，进入宝塔控制台。<a href=\"https://www.bt.cn/new/download.html\">https://www.bt.cn/new/download.html</a></p>\n</li>\n<li><p>在软件商店中下载PM2管理器，安装好之后再设置中选择合适的Node.js版本。</p>\n</li>\n<li><p>在宝塔面板 –&gt; 安全 –&gt;放行端口，放行前端和后端的端口号。</p>\n</li>\n</ol>\n<h2 id=\"二、导入文件\"><a href=\"#二、导入文件\" class=\"headerlink\" title=\"二、导入文件\"></a>二、导入文件</h2><ol start=\"5\">\n<li><p>通过宝塔面板的文件栏，找到 &#x2F;www&#x2F;wwwroot 目录下，将后端项目压缩包，解压到该目录下。再进入到 &#x2F;www&#x2F;wwwroot&#x2F;http 目录下，将前端项目的dist包，解压到该目录下，即可。</p>\n</li>\n<li><p>温馨提示：dist包可以通过前端项目 npm run build 自动打包生成哦。</p>\n</li>\n<li><p>SQL数据库文件导入，在面版 –&gt; 数据库 –&gt;下载phpMYAdmin（管理MySQL数据库的），点击添加数据库，将自己的数据库文件导入即可。</p>\n</li>\n</ol>\n<h2 id=\"三、启动后端项目\"><a href=\"#三、启动后端项目\" class=\"headerlink\" title=\"三、启动后端项目\"></a>三、启动后端项目</h2><ol start=\"8\">\n<li><p>在面板 –&gt; 终端中输入 cd &#x2F;www&#x2F;wwwroot&#x2F;后端项目 ，进入后端文件夹，输入：</p>\n</li>\n<li><p>npm start  （运行后端项目）</p>\n</li>\n</ol>\n<p>  就这样，前后端分离Vue项目部署完成了。</p>\n<h2 id=\"可能遇到的问题：\"><a href=\"#可能遇到的问题：\" class=\"headerlink\" title=\"可能遇到的问题：\"></a>可能遇到的问题：</h2><ul>\n<li>比如端口号占用，可以通过在终端中输入以下命令。</li>\n</ul>\n<p>netstat -nap | grep 3000 （可以查看3000端口的占用情况）。</p>\n<p> kill -9 2048482 （可杀掉占用端口号的进程），其中2048482为占用端口的PID号。</p>\n<ul>\n<li>再进行启动后端项目的npm start,就可以正常启动后端项目了。</li>\n</ul>\n","site":{"data":{}},"wordcount":709,"excerpt":"","more":"<h1 id=\"宝塔部署前后端Vue项目\"><a href=\"#宝塔部署前后端Vue项目\" class=\"headerlink\" title=\"宝塔部署前后端Vue项目\"></a>宝塔部署前后端Vue项目</h1><hr>\n<h2 id=\"一、准备工作\"><a href=\"#一、准备工作\" class=\"headerlink\" title=\"一、准备工作\"></a>一、准备工作</h2><ol>\n<li>在云服务器控制台，远程连接实例，在shell命令行中输入:</li>\n</ol>\n<p>&#x2F;etc&#x2F;init.d&#x2F;bt default （默认连接）</p>\n<ol start=\"2\">\n<li><p>进入宝塔面板网站，输入账号密码，进入宝塔控制台。<a href=\"https://www.bt.cn/new/download.html\">https://www.bt.cn/new/download.html</a></p>\n</li>\n<li><p>在软件商店中下载PM2管理器，安装好之后再设置中选择合适的Node.js版本。</p>\n</li>\n<li><p>在宝塔面板 –&gt; 安全 –&gt;放行端口，放行前端和后端的端口号。</p>\n</li>\n</ol>\n<h2 id=\"二、导入文件\"><a href=\"#二、导入文件\" class=\"headerlink\" title=\"二、导入文件\"></a>二、导入文件</h2><ol start=\"5\">\n<li><p>通过宝塔面板的文件栏，找到 &#x2F;www&#x2F;wwwroot 目录下，将后端项目压缩包，解压到该目录下。再进入到 &#x2F;www&#x2F;wwwroot&#x2F;http 目录下，将前端项目的dist包，解压到该目录下，即可。</p>\n</li>\n<li><p>温馨提示：dist包可以通过前端项目 npm run build 自动打包生成哦。</p>\n</li>\n<li><p>SQL数据库文件导入，在面版 –&gt; 数据库 –&gt;下载phpMYAdmin（管理MySQL数据库的），点击添加数据库，将自己的数据库文件导入即可。</p>\n</li>\n</ol>\n<h2 id=\"三、启动后端项目\"><a href=\"#三、启动后端项目\" class=\"headerlink\" title=\"三、启动后端项目\"></a>三、启动后端项目</h2><ol start=\"8\">\n<li><p>在面板 –&gt; 终端中输入 cd &#x2F;www&#x2F;wwwroot&#x2F;后端项目 ，进入后端文件夹，输入：</p>\n</li>\n<li><p>npm start  （运行后端项目）</p>\n</li>\n</ol>\n<p>  就这样，前后端分离Vue项目部署完成了。</p>\n<h2 id=\"可能遇到的问题：\"><a href=\"#可能遇到的问题：\" class=\"headerlink\" title=\"可能遇到的问题：\"></a>可能遇到的问题：</h2><ul>\n<li>比如端口号占用，可以通过在终端中输入以下命令。</li>\n</ul>\n<p>netstat -nap | grep 3000 （可以查看3000端口的占用情况）。</p>\n<p> kill -9 2048482 （可杀掉占用端口号的进程），其中2048482为占用端口的PID号。</p>\n<ul>\n<li>再进行启动后端项目的npm start,就可以正常启动后端项目了。</li>\n</ul>\n"},{"title":"vue 的生命周期","index_img":"/img/sm.png","date":"2022-08-29T16:00:00.000Z","_content":"# vue 的生命周期\n\n  * 生命周期是指 vue 实例对象从创建之初到销毁的过程，vue 的所有功能都是围绕生命周期进行的，在生命周期的不同阶段调用不同的钩子函数来实现组建的数据管理和DOM渲染。\n\n## 一、创建前（beforeCreate）\n\n1. 此阶段为实例化初始后，此时数据观察和事件机制都没有形成，不能获取 DOM 节点。\n\n## 二、 创建后（created）\n\n1. 在这一步，实例已完成以下配置：数据观测、属性和方法的运算，watch/event事件回调，完成了data 数据的初始化，$el还没有。\n2. 然而，挂载阶段还没有开始, $el属性目前不可见，这是一个常用的生命周期，因为你可以调用methods中的方法，改变data中的数据，并且修改可以通过vue的响应式绑定体现在页面上，，获取    computed中的计算属性等等。\n3. 通常我们可以在这里对实例进行预处理，也有一些人喜欢在这里发ajax请求，值得注意的是，这个周期中是没有什么方法来对实例化过程进行拦截的，因此假如有某些数据必须获取才允许进入页面的话，并不适合在这个方法发请求，建议在组件路由钩子beforeRouteEnter中完成比较好。\n\n## 三、载入前（beforeMount）\n1. 挂载开始之前被调用，相关的render函数首次被调用（虚拟DOM），实例已完成以下的配置： 编译模板，把data里面的数据和模板生成html，完成了el和data 初始化，注意的是此时还没有挂在html到页面上。\n\n## 四、载入后（mounted） \n\n1. 挂载完成，也就是模板中的HTML渲染到页面中，此时一般可以做一些ajax操作，mounted只会执行一次。\n\n## 五、更新前（beforeUpdate）\n\n1. 在数据更新之前被调用，发生在虚拟DOM重新渲染和打补丁之前，可以在该钩子函数中进一步地更改状态，不会触发附加的重复渲染过程。\n\n## 六、更新后（updated）\n\n1. 当data中定义的数据有变化时就会加载updated方法。\n\n## 七、销毁前（beforeDestroy）\n\n1. 这一步还可以用this来获取实例，一般在这一步做一些重置的操作，比如清除掉组件中的定时器 和 监听的dom事件等。\n\n## 八、销毁后(destroyed)\n\n1. 在实例销毁之后调用，调用后，所有的事件监听器均会被移除，所有的子实例也会被销毁，该钩子在服务器端渲染期间不被调用。\n\n* 总结：vue的生命周期的思想贯穿在组件开发的始终，通过熟悉其生命周期调用不同的钩子函数，我们可以准确的控制数据流和其对DOM的影响；vue生命周期的思想是Vnode和MVVM的生动体现和继承。\n\n\n \n\n\n\n","source":"_posts/vue 的生命周期.md","raw":"\n---\ntitle:  vue 的生命周期\ntags: [telescope]\nindex_img: /img/sm.png\ndate: 2022-08-30\n---\n# vue 的生命周期\n\n  * 生命周期是指 vue 实例对象从创建之初到销毁的过程，vue 的所有功能都是围绕生命周期进行的，在生命周期的不同阶段调用不同的钩子函数来实现组建的数据管理和DOM渲染。\n\n## 一、创建前（beforeCreate）\n\n1. 此阶段为实例化初始后，此时数据观察和事件机制都没有形成，不能获取 DOM 节点。\n\n## 二、 创建后（created）\n\n1. 在这一步，实例已完成以下配置：数据观测、属性和方法的运算，watch/event事件回调，完成了data 数据的初始化，$el还没有。\n2. 然而，挂载阶段还没有开始, $el属性目前不可见，这是一个常用的生命周期，因为你可以调用methods中的方法，改变data中的数据，并且修改可以通过vue的响应式绑定体现在页面上，，获取    computed中的计算属性等等。\n3. 通常我们可以在这里对实例进行预处理，也有一些人喜欢在这里发ajax请求，值得注意的是，这个周期中是没有什么方法来对实例化过程进行拦截的，因此假如有某些数据必须获取才允许进入页面的话，并不适合在这个方法发请求，建议在组件路由钩子beforeRouteEnter中完成比较好。\n\n## 三、载入前（beforeMount）\n1. 挂载开始之前被调用，相关的render函数首次被调用（虚拟DOM），实例已完成以下的配置： 编译模板，把data里面的数据和模板生成html，完成了el和data 初始化，注意的是此时还没有挂在html到页面上。\n\n## 四、载入后（mounted） \n\n1. 挂载完成，也就是模板中的HTML渲染到页面中，此时一般可以做一些ajax操作，mounted只会执行一次。\n\n## 五、更新前（beforeUpdate）\n\n1. 在数据更新之前被调用，发生在虚拟DOM重新渲染和打补丁之前，可以在该钩子函数中进一步地更改状态，不会触发附加的重复渲染过程。\n\n## 六、更新后（updated）\n\n1. 当data中定义的数据有变化时就会加载updated方法。\n\n## 七、销毁前（beforeDestroy）\n\n1. 这一步还可以用this来获取实例，一般在这一步做一些重置的操作，比如清除掉组件中的定时器 和 监听的dom事件等。\n\n## 八、销毁后(destroyed)\n\n1. 在实例销毁之后调用，调用后，所有的事件监听器均会被移除，所有的子实例也会被销毁，该钩子在服务器端渲染期间不被调用。\n\n* 总结：vue的生命周期的思想贯穿在组件开发的始终，通过熟悉其生命周期调用不同的钩子函数，我们可以准确的控制数据流和其对DOM的影响；vue生命周期的思想是Vnode和MVVM的生动体现和继承。\n\n\n \n\n\n\n","slug":"vue 的生命周期","published":1,"updated":"2023-02-18T03:58:14.302Z","_id":"cl7fihwml0002y4sv9h9c04yl","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"vue-的生命周期\"><a href=\"#vue-的生命周期\" class=\"headerlink\" title=\"vue 的生命周期\"></a>vue 的生命周期</h1><ul>\n<li>生命周期是指 vue 实例对象从创建之初到销毁的过程，vue 的所有功能都是围绕生命周期进行的，在生命周期的不同阶段调用不同的钩子函数来实现组建的数据管理和DOM渲染。</li>\n</ul>\n<h2 id=\"一、创建前（beforeCreate）\"><a href=\"#一、创建前（beforeCreate）\" class=\"headerlink\" title=\"一、创建前（beforeCreate）\"></a>一、创建前（beforeCreate）</h2><ol>\n<li>此阶段为实例化初始后，此时数据观察和事件机制都没有形成，不能获取 DOM 节点。</li>\n</ol>\n<h2 id=\"二、-创建后（created）\"><a href=\"#二、-创建后（created）\" class=\"headerlink\" title=\"二、 创建后（created）\"></a>二、 创建后（created）</h2><ol>\n<li>在这一步，实例已完成以下配置：数据观测、属性和方法的运算，watch&#x2F;event事件回调，完成了data 数据的初始化，$el还没有。</li>\n<li>然而，挂载阶段还没有开始, $el属性目前不可见，这是一个常用的生命周期，因为你可以调用methods中的方法，改变data中的数据，并且修改可以通过vue的响应式绑定体现在页面上，，获取    computed中的计算属性等等。</li>\n<li>通常我们可以在这里对实例进行预处理，也有一些人喜欢在这里发ajax请求，值得注意的是，这个周期中是没有什么方法来对实例化过程进行拦截的，因此假如有某些数据必须获取才允许进入页面的话，并不适合在这个方法发请求，建议在组件路由钩子beforeRouteEnter中完成比较好。</li>\n</ol>\n<h2 id=\"三、载入前（beforeMount）\"><a href=\"#三、载入前（beforeMount）\" class=\"headerlink\" title=\"三、载入前（beforeMount）\"></a>三、载入前（beforeMount）</h2><ol>\n<li>挂载开始之前被调用，相关的render函数首次被调用（虚拟DOM），实例已完成以下的配置： 编译模板，把data里面的数据和模板生成html，完成了el和data 初始化，注意的是此时还没有挂在html到页面上。</li>\n</ol>\n<h2 id=\"四、载入后（mounted）\"><a href=\"#四、载入后（mounted）\" class=\"headerlink\" title=\"四、载入后（mounted）\"></a>四、载入后（mounted）</h2><ol>\n<li>挂载完成，也就是模板中的HTML渲染到页面中，此时一般可以做一些ajax操作，mounted只会执行一次。</li>\n</ol>\n<h2 id=\"五、更新前（beforeUpdate）\"><a href=\"#五、更新前（beforeUpdate）\" class=\"headerlink\" title=\"五、更新前（beforeUpdate）\"></a>五、更新前（beforeUpdate）</h2><ol>\n<li>在数据更新之前被调用，发生在虚拟DOM重新渲染和打补丁之前，可以在该钩子函数中进一步地更改状态，不会触发附加的重复渲染过程。</li>\n</ol>\n<h2 id=\"六、更新后（updated）\"><a href=\"#六、更新后（updated）\" class=\"headerlink\" title=\"六、更新后（updated）\"></a>六、更新后（updated）</h2><ol>\n<li>当data中定义的数据有变化时就会加载updated方法。</li>\n</ol>\n<h2 id=\"七、销毁前（beforeDestroy）\"><a href=\"#七、销毁前（beforeDestroy）\" class=\"headerlink\" title=\"七、销毁前（beforeDestroy）\"></a>七、销毁前（beforeDestroy）</h2><ol>\n<li>这一步还可以用this来获取实例，一般在这一步做一些重置的操作，比如清除掉组件中的定时器 和 监听的dom事件等。</li>\n</ol>\n<h2 id=\"八、销毁后-destroyed\"><a href=\"#八、销毁后-destroyed\" class=\"headerlink\" title=\"八、销毁后(destroyed)\"></a>八、销毁后(destroyed)</h2><ol>\n<li>在实例销毁之后调用，调用后，所有的事件监听器均会被移除，所有的子实例也会被销毁，该钩子在服务器端渲染期间不被调用。</li>\n</ol>\n<ul>\n<li>总结：vue的生命周期的思想贯穿在组件开发的始终，通过熟悉其生命周期调用不同的钩子函数，我们可以准确的控制数据流和其对DOM的影响；vue生命周期的思想是Vnode和MVVM的生动体现和继承。</li>\n</ul>\n","site":{"data":{}},"wordcount":1034,"excerpt":"","more":"<h1 id=\"vue-的生命周期\"><a href=\"#vue-的生命周期\" class=\"headerlink\" title=\"vue 的生命周期\"></a>vue 的生命周期</h1><ul>\n<li>生命周期是指 vue 实例对象从创建之初到销毁的过程，vue 的所有功能都是围绕生命周期进行的，在生命周期的不同阶段调用不同的钩子函数来实现组建的数据管理和DOM渲染。</li>\n</ul>\n<h2 id=\"一、创建前（beforeCreate）\"><a href=\"#一、创建前（beforeCreate）\" class=\"headerlink\" title=\"一、创建前（beforeCreate）\"></a>一、创建前（beforeCreate）</h2><ol>\n<li>此阶段为实例化初始后，此时数据观察和事件机制都没有形成，不能获取 DOM 节点。</li>\n</ol>\n<h2 id=\"二、-创建后（created）\"><a href=\"#二、-创建后（created）\" class=\"headerlink\" title=\"二、 创建后（created）\"></a>二、 创建后（created）</h2><ol>\n<li>在这一步，实例已完成以下配置：数据观测、属性和方法的运算，watch&#x2F;event事件回调，完成了data 数据的初始化，$el还没有。</li>\n<li>然而，挂载阶段还没有开始, $el属性目前不可见，这是一个常用的生命周期，因为你可以调用methods中的方法，改变data中的数据，并且修改可以通过vue的响应式绑定体现在页面上，，获取    computed中的计算属性等等。</li>\n<li>通常我们可以在这里对实例进行预处理，也有一些人喜欢在这里发ajax请求，值得注意的是，这个周期中是没有什么方法来对实例化过程进行拦截的，因此假如有某些数据必须获取才允许进入页面的话，并不适合在这个方法发请求，建议在组件路由钩子beforeRouteEnter中完成比较好。</li>\n</ol>\n<h2 id=\"三、载入前（beforeMount）\"><a href=\"#三、载入前（beforeMount）\" class=\"headerlink\" title=\"三、载入前（beforeMount）\"></a>三、载入前（beforeMount）</h2><ol>\n<li>挂载开始之前被调用，相关的render函数首次被调用（虚拟DOM），实例已完成以下的配置： 编译模板，把data里面的数据和模板生成html，完成了el和data 初始化，注意的是此时还没有挂在html到页面上。</li>\n</ol>\n<h2 id=\"四、载入后（mounted）\"><a href=\"#四、载入后（mounted）\" class=\"headerlink\" title=\"四、载入后（mounted）\"></a>四、载入后（mounted）</h2><ol>\n<li>挂载完成，也就是模板中的HTML渲染到页面中，此时一般可以做一些ajax操作，mounted只会执行一次。</li>\n</ol>\n<h2 id=\"五、更新前（beforeUpdate）\"><a href=\"#五、更新前（beforeUpdate）\" class=\"headerlink\" title=\"五、更新前（beforeUpdate）\"></a>五、更新前（beforeUpdate）</h2><ol>\n<li>在数据更新之前被调用，发生在虚拟DOM重新渲染和打补丁之前，可以在该钩子函数中进一步地更改状态，不会触发附加的重复渲染过程。</li>\n</ol>\n<h2 id=\"六、更新后（updated）\"><a href=\"#六、更新后（updated）\" class=\"headerlink\" title=\"六、更新后（updated）\"></a>六、更新后（updated）</h2><ol>\n<li>当data中定义的数据有变化时就会加载updated方法。</li>\n</ol>\n<h2 id=\"七、销毁前（beforeDestroy）\"><a href=\"#七、销毁前（beforeDestroy）\" class=\"headerlink\" title=\"七、销毁前（beforeDestroy）\"></a>七、销毁前（beforeDestroy）</h2><ol>\n<li>这一步还可以用this来获取实例，一般在这一步做一些重置的操作，比如清除掉组件中的定时器 和 监听的dom事件等。</li>\n</ol>\n<h2 id=\"八、销毁后-destroyed\"><a href=\"#八、销毁后-destroyed\" class=\"headerlink\" title=\"八、销毁后(destroyed)\"></a>八、销毁后(destroyed)</h2><ol>\n<li>在实例销毁之后调用，调用后，所有的事件监听器均会被移除，所有的子实例也会被销毁，该钩子在服务器端渲染期间不被调用。</li>\n</ol>\n<ul>\n<li>总结：vue的生命周期的思想贯穿在组件开发的始终，通过熟悉其生命周期调用不同的钩子函数，我们可以准确的控制数据流和其对DOM的影响；vue生命周期的思想是Vnode和MVVM的生动体现和继承。</li>\n</ul>\n"},{"title":"三次握手和四次挥手","index_img":"/img/10010.jpg","date":"2022-09-04T16:00:00.000Z","_content":"# 三次握手和四次挥手\n\n\n# 三次握手\n\n* 三次握手（Three-way Handshake）其实就是指建立一个TCP连接时，需要客户端和服务器总共发送3个包。进行三次握手的主要作用就是为了确认双方的接收能力和发送能力是否正常、指定自己的初始化序列号为后面的可靠性传送做准备。实质上其实就是连接服务器指定端口，建立TCP连接，并同步连接双方的序列号和确认号，交换TCP窗口大小信息。\n\n* 刚开始客户端处于 Closed 的状态，服务端处于 Listen 状态。\n进行三次握手：\n\n### 第一次握手：\n1. 客户端给服务端发一个 SYN 报文，并指明客户端的初始化序列号 ISN。此时客户端处于 SYN_SENT 状态。\n\n    首部的同步位SYN=1，初始序号seq=x，SYN=1的报文段不能携带数据，但要消耗掉一个序号。\n\n### 第二次握手：\n1. 服务器收到客户端的 SYN 报文之后，会以自己的 SYN 报文作为应答，并且也是指定了自己的初始化序列号 ISN(s)。\n\n2. 同时会把客户端的 ISN + 1 作为ACK 的值，表示自己已经收到了客户端的 SYN，此时服务器处于 SYN_RCVD 的状态。\n\n3. 在确认报文段中SYN=1，ACK=1，确认号ack=x+1，初始序号seq=y。\n\n### 第三次握手：\n1. 客户端收到 SYN 报文之后，会发送一个 ACK 报文，当然，也是一样把服务器的 ISN + 1 作为 ACK 的值，表示已经收到了服务端的 SYN 报文，此时客户端处于 ESTABLISHED 状态。\n\n2.  服务器收到 ACK 报文之后，也处于 ESTABLISHED 状态，此时，双方已建立起了连接。\n\n3.  确认报文段ACK=1，确认号ack=y+1，序号seq=x+1（初始为seq=x，第二个报文段所以要+1），ACK报文段可以携带数据，不携带数据则不消耗序号。\n\n4. 发送第一个SYN的一端将执行主动打开（active open），接收这个SYN并发回下一个SYN的另一端执行被动打开（passive open）。\n   在socket编程中，客户端执行connect()时，将触发三次握手。\n\n\n# 四次挥手\n\n* 建立一个连接需要三次握手，而终止一个连接要经过四次挥手（也有将四次挥手叫做四次握手的）。这由TCP的半关闭（half-close）造成的。所谓的半关闭，其实就是TCP提供了连接的一端在结束它的发送后还能接收来自另一端数据的能力。\n\n* TCP 连接的拆除需要发送四个包，因此称为四次挥手(Four-way handshake)，客户端或服务端均可主动发起挥手动作。\n\n* 刚开始双方都处于ESTABLISHED 状态，假如是客户端先发起关闭请求。四次挥手的过程如下：\n\n### 第一次挥手：\n  1. 客户端发送一个 FIN 报文，报文中会指定一个序列号。此时客户端处于 FIN_WAIT1 状态。\n  2. 即发出连接释放报文段（FIN=1，序号seq=u），并停止再发送数据，主动关闭TCP连接，进入FIN_WAIT1（终止等待1）状态，等待服务端的确认。\n### 第二次挥手：\n  1. 服务端收到 FIN 之后，会发送 ACK 报文，且把客户端的序列号值 +1 作为 ACK 报文的序列号值，表明已经收到客户端的报文了，此时服务端处于 CLOSE_WAIT 状态。\n  2. 即服务端收到连接释放报文段后即发出确认报文段（ACK=1，确认号ack=u+1，序号seq=v），服务端进入CLOSE_WAIT（关闭等待）状态，此时的TCP处于半关闭状态，客户端到服务端的连接释放。\n  3. 客户端收到服务端的确认后，进入FIN_WAIT2（终止等待2）状态，等待服务端发出的连接释放报文段。\n### 第三次挥手：\n  1. 如果服务端也想断开连接了，和客户端的第一次挥手一样，发给 FIN 报文，且指定一个序列号。此时服务端处于 LAST_ACK 的状态。\n  2. 即服务端没有要向客户端发出的数据，服务端发出连接释放报文段（FIN=1，ACK=1，序号seq=w，确认号ack=u+1），服务端进入LAST_ACK（最后确认）状态，等待客户端的确认。\n### 第四次挥手：\n  1. 客户端收到 FIN 之后，一样发送一个 ACK 报文作为应答，且把服务端的序列号值 +1 作为自己 ACK 报文的序列号值，此时客户端处于 TIME_WAIT 状态。\n  2. 需要过一阵子以确保服务端收到自己的 ACK 报文之后才会进入 CLOSED 状态，服务端收到 ACK 报文之后，就处于关闭连接了，处于 CLOSED 状态。\n  3. 即客户端收到服务端的连接释放报文段后，对此发出确认报文段（ACK=1，seq=u+1，ack=w+1），客户端进入TIME_WAIT（时间等待）状态。此时TCP未释放掉，需要经过时间等待计时器设置的时间2MSL后，客户端才进入CLOSED状态。\n\n\n\n \n\n\n\n","source":"_posts/三次握手和四次挥手.md","raw":"\n---\ntitle:  三次握手和四次挥手\ntags: [telescope]\nindex_img: /img/10010.jpg\ndate: 2022-09-05 \n---\n# 三次握手和四次挥手\n\n\n# 三次握手\n\n* 三次握手（Three-way Handshake）其实就是指建立一个TCP连接时，需要客户端和服务器总共发送3个包。进行三次握手的主要作用就是为了确认双方的接收能力和发送能力是否正常、指定自己的初始化序列号为后面的可靠性传送做准备。实质上其实就是连接服务器指定端口，建立TCP连接，并同步连接双方的序列号和确认号，交换TCP窗口大小信息。\n\n* 刚开始客户端处于 Closed 的状态，服务端处于 Listen 状态。\n进行三次握手：\n\n### 第一次握手：\n1. 客户端给服务端发一个 SYN 报文，并指明客户端的初始化序列号 ISN。此时客户端处于 SYN_SENT 状态。\n\n    首部的同步位SYN=1，初始序号seq=x，SYN=1的报文段不能携带数据，但要消耗掉一个序号。\n\n### 第二次握手：\n1. 服务器收到客户端的 SYN 报文之后，会以自己的 SYN 报文作为应答，并且也是指定了自己的初始化序列号 ISN(s)。\n\n2. 同时会把客户端的 ISN + 1 作为ACK 的值，表示自己已经收到了客户端的 SYN，此时服务器处于 SYN_RCVD 的状态。\n\n3. 在确认报文段中SYN=1，ACK=1，确认号ack=x+1，初始序号seq=y。\n\n### 第三次握手：\n1. 客户端收到 SYN 报文之后，会发送一个 ACK 报文，当然，也是一样把服务器的 ISN + 1 作为 ACK 的值，表示已经收到了服务端的 SYN 报文，此时客户端处于 ESTABLISHED 状态。\n\n2.  服务器收到 ACK 报文之后，也处于 ESTABLISHED 状态，此时，双方已建立起了连接。\n\n3.  确认报文段ACK=1，确认号ack=y+1，序号seq=x+1（初始为seq=x，第二个报文段所以要+1），ACK报文段可以携带数据，不携带数据则不消耗序号。\n\n4. 发送第一个SYN的一端将执行主动打开（active open），接收这个SYN并发回下一个SYN的另一端执行被动打开（passive open）。\n   在socket编程中，客户端执行connect()时，将触发三次握手。\n\n\n# 四次挥手\n\n* 建立一个连接需要三次握手，而终止一个连接要经过四次挥手（也有将四次挥手叫做四次握手的）。这由TCP的半关闭（half-close）造成的。所谓的半关闭，其实就是TCP提供了连接的一端在结束它的发送后还能接收来自另一端数据的能力。\n\n* TCP 连接的拆除需要发送四个包，因此称为四次挥手(Four-way handshake)，客户端或服务端均可主动发起挥手动作。\n\n* 刚开始双方都处于ESTABLISHED 状态，假如是客户端先发起关闭请求。四次挥手的过程如下：\n\n### 第一次挥手：\n  1. 客户端发送一个 FIN 报文，报文中会指定一个序列号。此时客户端处于 FIN_WAIT1 状态。\n  2. 即发出连接释放报文段（FIN=1，序号seq=u），并停止再发送数据，主动关闭TCP连接，进入FIN_WAIT1（终止等待1）状态，等待服务端的确认。\n### 第二次挥手：\n  1. 服务端收到 FIN 之后，会发送 ACK 报文，且把客户端的序列号值 +1 作为 ACK 报文的序列号值，表明已经收到客户端的报文了，此时服务端处于 CLOSE_WAIT 状态。\n  2. 即服务端收到连接释放报文段后即发出确认报文段（ACK=1，确认号ack=u+1，序号seq=v），服务端进入CLOSE_WAIT（关闭等待）状态，此时的TCP处于半关闭状态，客户端到服务端的连接释放。\n  3. 客户端收到服务端的确认后，进入FIN_WAIT2（终止等待2）状态，等待服务端发出的连接释放报文段。\n### 第三次挥手：\n  1. 如果服务端也想断开连接了，和客户端的第一次挥手一样，发给 FIN 报文，且指定一个序列号。此时服务端处于 LAST_ACK 的状态。\n  2. 即服务端没有要向客户端发出的数据，服务端发出连接释放报文段（FIN=1，ACK=1，序号seq=w，确认号ack=u+1），服务端进入LAST_ACK（最后确认）状态，等待客户端的确认。\n### 第四次挥手：\n  1. 客户端收到 FIN 之后，一样发送一个 ACK 报文作为应答，且把服务端的序列号值 +1 作为自己 ACK 报文的序列号值，此时客户端处于 TIME_WAIT 状态。\n  2. 需要过一阵子以确保服务端收到自己的 ACK 报文之后才会进入 CLOSED 状态，服务端收到 ACK 报文之后，就处于关闭连接了，处于 CLOSED 状态。\n  3. 即客户端收到服务端的连接释放报文段后，对此发出确认报文段（ACK=1，seq=u+1，ack=w+1），客户端进入TIME_WAIT（时间等待）状态。此时TCP未释放掉，需要经过时间等待计时器设置的时间2MSL后，客户端才进入CLOSED状态。\n\n\n\n \n\n\n\n","slug":"三次握手和四次挥手","published":1,"updated":"2023-02-18T03:26:16.408Z","_id":"cl7fj93m800016csvg1md4wrm","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"三次握手和四次挥手\"><a href=\"#三次握手和四次挥手\" class=\"headerlink\" title=\"三次握手和四次挥手\"></a>三次握手和四次挥手</h1><h1 id=\"三次握手\"><a href=\"#三次握手\" class=\"headerlink\" title=\"三次握手\"></a>三次握手</h1><ul>\n<li><p>三次握手（Three-way Handshake）其实就是指建立一个TCP连接时，需要客户端和服务器总共发送3个包。进行三次握手的主要作用就是为了确认双方的接收能力和发送能力是否正常、指定自己的初始化序列号为后面的可靠性传送做准备。实质上其实就是连接服务器指定端口，建立TCP连接，并同步连接双方的序列号和确认号，交换TCP窗口大小信息。</p>\n</li>\n<li><p>刚开始客户端处于 Closed 的状态，服务端处于 Listen 状态。<br>进行三次握手：</p>\n</li>\n</ul>\n<h3 id=\"第一次握手：\"><a href=\"#第一次握手：\" class=\"headerlink\" title=\"第一次握手：\"></a>第一次握手：</h3><ol>\n<li><p>客户端给服务端发一个 SYN 报文，并指明客户端的初始化序列号 ISN。此时客户端处于 SYN_SENT 状态。</p>\n<p> 首部的同步位SYN&#x3D;1，初始序号seq&#x3D;x，SYN&#x3D;1的报文段不能携带数据，但要消耗掉一个序号。</p>\n</li>\n</ol>\n<h3 id=\"第二次握手：\"><a href=\"#第二次握手：\" class=\"headerlink\" title=\"第二次握手：\"></a>第二次握手：</h3><ol>\n<li><p>服务器收到客户端的 SYN 报文之后，会以自己的 SYN 报文作为应答，并且也是指定了自己的初始化序列号 ISN(s)。</p>\n</li>\n<li><p>同时会把客户端的 ISN + 1 作为ACK 的值，表示自己已经收到了客户端的 SYN，此时服务器处于 SYN_RCVD 的状态。</p>\n</li>\n<li><p>在确认报文段中SYN&#x3D;1，ACK&#x3D;1，确认号ack&#x3D;x+1，初始序号seq&#x3D;y。</p>\n</li>\n</ol>\n<h3 id=\"第三次握手：\"><a href=\"#第三次握手：\" class=\"headerlink\" title=\"第三次握手：\"></a>第三次握手：</h3><ol>\n<li><p>客户端收到 SYN 报文之后，会发送一个 ACK 报文，当然，也是一样把服务器的 ISN + 1 作为 ACK 的值，表示已经收到了服务端的 SYN 报文，此时客户端处于 ESTABLISHED 状态。</p>\n</li>\n<li><p>服务器收到 ACK 报文之后，也处于 ESTABLISHED 状态，此时，双方已建立起了连接。</p>\n</li>\n<li><p>确认报文段ACK&#x3D;1，确认号ack&#x3D;y+1，序号seq&#x3D;x+1（初始为seq&#x3D;x，第二个报文段所以要+1），ACK报文段可以携带数据，不携带数据则不消耗序号。</p>\n</li>\n<li><p>发送第一个SYN的一端将执行主动打开（active open），接收这个SYN并发回下一个SYN的另一端执行被动打开（passive open）。<br>在socket编程中，客户端执行connect()时，将触发三次握手。</p>\n</li>\n</ol>\n<h1 id=\"四次挥手\"><a href=\"#四次挥手\" class=\"headerlink\" title=\"四次挥手\"></a>四次挥手</h1><ul>\n<li><p>建立一个连接需要三次握手，而终止一个连接要经过四次挥手（也有将四次挥手叫做四次握手的）。这由TCP的半关闭（half-close）造成的。所谓的半关闭，其实就是TCP提供了连接的一端在结束它的发送后还能接收来自另一端数据的能力。</p>\n</li>\n<li><p>TCP 连接的拆除需要发送四个包，因此称为四次挥手(Four-way handshake)，客户端或服务端均可主动发起挥手动作。</p>\n</li>\n<li><p>刚开始双方都处于ESTABLISHED 状态，假如是客户端先发起关闭请求。四次挥手的过程如下：</p>\n</li>\n</ul>\n<h3 id=\"第一次挥手：\"><a href=\"#第一次挥手：\" class=\"headerlink\" title=\"第一次挥手：\"></a>第一次挥手：</h3><ol>\n<li>客户端发送一个 FIN 报文，报文中会指定一个序列号。此时客户端处于 FIN_WAIT1 状态。</li>\n<li>即发出连接释放报文段（FIN&#x3D;1，序号seq&#x3D;u），并停止再发送数据，主动关闭TCP连接，进入FIN_WAIT1（终止等待1）状态，等待服务端的确认。</li>\n</ol>\n<h3 id=\"第二次挥手：\"><a href=\"#第二次挥手：\" class=\"headerlink\" title=\"第二次挥手：\"></a>第二次挥手：</h3><ol>\n<li>服务端收到 FIN 之后，会发送 ACK 报文，且把客户端的序列号值 +1 作为 ACK 报文的序列号值，表明已经收到客户端的报文了，此时服务端处于 CLOSE_WAIT 状态。</li>\n<li>即服务端收到连接释放报文段后即发出确认报文段（ACK&#x3D;1，确认号ack&#x3D;u+1，序号seq&#x3D;v），服务端进入CLOSE_WAIT（关闭等待）状态，此时的TCP处于半关闭状态，客户端到服务端的连接释放。</li>\n<li>客户端收到服务端的确认后，进入FIN_WAIT2（终止等待2）状态，等待服务端发出的连接释放报文段。</li>\n</ol>\n<h3 id=\"第三次挥手：\"><a href=\"#第三次挥手：\" class=\"headerlink\" title=\"第三次挥手：\"></a>第三次挥手：</h3><ol>\n<li>如果服务端也想断开连接了，和客户端的第一次挥手一样，发给 FIN 报文，且指定一个序列号。此时服务端处于 LAST_ACK 的状态。</li>\n<li>即服务端没有要向客户端发出的数据，服务端发出连接释放报文段（FIN&#x3D;1，ACK&#x3D;1，序号seq&#x3D;w，确认号ack&#x3D;u+1），服务端进入LAST_ACK（最后确认）状态，等待客户端的确认。</li>\n</ol>\n<h3 id=\"第四次挥手：\"><a href=\"#第四次挥手：\" class=\"headerlink\" title=\"第四次挥手：\"></a>第四次挥手：</h3><ol>\n<li>客户端收到 FIN 之后，一样发送一个 ACK 报文作为应答，且把服务端的序列号值 +1 作为自己 ACK 报文的序列号值，此时客户端处于 TIME_WAIT 状态。</li>\n<li>需要过一阵子以确保服务端收到自己的 ACK 报文之后才会进入 CLOSED 状态，服务端收到 ACK 报文之后，就处于关闭连接了，处于 CLOSED 状态。</li>\n<li>即客户端收到服务端的连接释放报文段后，对此发出确认报文段（ACK&#x3D;1，seq&#x3D;u+1，ack&#x3D;w+1），客户端进入TIME_WAIT（时间等待）状态。此时TCP未释放掉，需要经过时间等待计时器设置的时间2MSL后，客户端才进入CLOSED状态。</li>\n</ol>\n","site":{"data":{}},"wordcount":1937,"excerpt":"","more":"<h1 id=\"三次握手和四次挥手\"><a href=\"#三次握手和四次挥手\" class=\"headerlink\" title=\"三次握手和四次挥手\"></a>三次握手和四次挥手</h1><h1 id=\"三次握手\"><a href=\"#三次握手\" class=\"headerlink\" title=\"三次握手\"></a>三次握手</h1><ul>\n<li><p>三次握手（Three-way Handshake）其实就是指建立一个TCP连接时，需要客户端和服务器总共发送3个包。进行三次握手的主要作用就是为了确认双方的接收能力和发送能力是否正常、指定自己的初始化序列号为后面的可靠性传送做准备。实质上其实就是连接服务器指定端口，建立TCP连接，并同步连接双方的序列号和确认号，交换TCP窗口大小信息。</p>\n</li>\n<li><p>刚开始客户端处于 Closed 的状态，服务端处于 Listen 状态。<br>进行三次握手：</p>\n</li>\n</ul>\n<h3 id=\"第一次握手：\"><a href=\"#第一次握手：\" class=\"headerlink\" title=\"第一次握手：\"></a>第一次握手：</h3><ol>\n<li><p>客户端给服务端发一个 SYN 报文，并指明客户端的初始化序列号 ISN。此时客户端处于 SYN_SENT 状态。</p>\n<p> 首部的同步位SYN&#x3D;1，初始序号seq&#x3D;x，SYN&#x3D;1的报文段不能携带数据，但要消耗掉一个序号。</p>\n</li>\n</ol>\n<h3 id=\"第二次握手：\"><a href=\"#第二次握手：\" class=\"headerlink\" title=\"第二次握手：\"></a>第二次握手：</h3><ol>\n<li><p>服务器收到客户端的 SYN 报文之后，会以自己的 SYN 报文作为应答，并且也是指定了自己的初始化序列号 ISN(s)。</p>\n</li>\n<li><p>同时会把客户端的 ISN + 1 作为ACK 的值，表示自己已经收到了客户端的 SYN，此时服务器处于 SYN_RCVD 的状态。</p>\n</li>\n<li><p>在确认报文段中SYN&#x3D;1，ACK&#x3D;1，确认号ack&#x3D;x+1，初始序号seq&#x3D;y。</p>\n</li>\n</ol>\n<h3 id=\"第三次握手：\"><a href=\"#第三次握手：\" class=\"headerlink\" title=\"第三次握手：\"></a>第三次握手：</h3><ol>\n<li><p>客户端收到 SYN 报文之后，会发送一个 ACK 报文，当然，也是一样把服务器的 ISN + 1 作为 ACK 的值，表示已经收到了服务端的 SYN 报文，此时客户端处于 ESTABLISHED 状态。</p>\n</li>\n<li><p>服务器收到 ACK 报文之后，也处于 ESTABLISHED 状态，此时，双方已建立起了连接。</p>\n</li>\n<li><p>确认报文段ACK&#x3D;1，确认号ack&#x3D;y+1，序号seq&#x3D;x+1（初始为seq&#x3D;x，第二个报文段所以要+1），ACK报文段可以携带数据，不携带数据则不消耗序号。</p>\n</li>\n<li><p>发送第一个SYN的一端将执行主动打开（active open），接收这个SYN并发回下一个SYN的另一端执行被动打开（passive open）。<br>在socket编程中，客户端执行connect()时，将触发三次握手。</p>\n</li>\n</ol>\n<h1 id=\"四次挥手\"><a href=\"#四次挥手\" class=\"headerlink\" title=\"四次挥手\"></a>四次挥手</h1><ul>\n<li><p>建立一个连接需要三次握手，而终止一个连接要经过四次挥手（也有将四次挥手叫做四次握手的）。这由TCP的半关闭（half-close）造成的。所谓的半关闭，其实就是TCP提供了连接的一端在结束它的发送后还能接收来自另一端数据的能力。</p>\n</li>\n<li><p>TCP 连接的拆除需要发送四个包，因此称为四次挥手(Four-way handshake)，客户端或服务端均可主动发起挥手动作。</p>\n</li>\n<li><p>刚开始双方都处于ESTABLISHED 状态，假如是客户端先发起关闭请求。四次挥手的过程如下：</p>\n</li>\n</ul>\n<h3 id=\"第一次挥手：\"><a href=\"#第一次挥手：\" class=\"headerlink\" title=\"第一次挥手：\"></a>第一次挥手：</h3><ol>\n<li>客户端发送一个 FIN 报文，报文中会指定一个序列号。此时客户端处于 FIN_WAIT1 状态。</li>\n<li>即发出连接释放报文段（FIN&#x3D;1，序号seq&#x3D;u），并停止再发送数据，主动关闭TCP连接，进入FIN_WAIT1（终止等待1）状态，等待服务端的确认。</li>\n</ol>\n<h3 id=\"第二次挥手：\"><a href=\"#第二次挥手：\" class=\"headerlink\" title=\"第二次挥手：\"></a>第二次挥手：</h3><ol>\n<li>服务端收到 FIN 之后，会发送 ACK 报文，且把客户端的序列号值 +1 作为 ACK 报文的序列号值，表明已经收到客户端的报文了，此时服务端处于 CLOSE_WAIT 状态。</li>\n<li>即服务端收到连接释放报文段后即发出确认报文段（ACK&#x3D;1，确认号ack&#x3D;u+1，序号seq&#x3D;v），服务端进入CLOSE_WAIT（关闭等待）状态，此时的TCP处于半关闭状态，客户端到服务端的连接释放。</li>\n<li>客户端收到服务端的确认后，进入FIN_WAIT2（终止等待2）状态，等待服务端发出的连接释放报文段。</li>\n</ol>\n<h3 id=\"第三次挥手：\"><a href=\"#第三次挥手：\" class=\"headerlink\" title=\"第三次挥手：\"></a>第三次挥手：</h3><ol>\n<li>如果服务端也想断开连接了，和客户端的第一次挥手一样，发给 FIN 报文，且指定一个序列号。此时服务端处于 LAST_ACK 的状态。</li>\n<li>即服务端没有要向客户端发出的数据，服务端发出连接释放报文段（FIN&#x3D;1，ACK&#x3D;1，序号seq&#x3D;w，确认号ack&#x3D;u+1），服务端进入LAST_ACK（最后确认）状态，等待客户端的确认。</li>\n</ol>\n<h3 id=\"第四次挥手：\"><a href=\"#第四次挥手：\" class=\"headerlink\" title=\"第四次挥手：\"></a>第四次挥手：</h3><ol>\n<li>客户端收到 FIN 之后，一样发送一个 ACK 报文作为应答，且把服务端的序列号值 +1 作为自己 ACK 报文的序列号值，此时客户端处于 TIME_WAIT 状态。</li>\n<li>需要过一阵子以确保服务端收到自己的 ACK 报文之后才会进入 CLOSED 状态，服务端收到 ACK 报文之后，就处于关闭连接了，处于 CLOSED 状态。</li>\n<li>即客户端收到服务端的连接释放报文段后，对此发出确认报文段（ACK&#x3D;1，seq&#x3D;u+1，ack&#x3D;w+1），客户端进入TIME_WAIT（时间等待）状态。此时TCP未释放掉，需要经过时间等待计时器设置的时间2MSL后，客户端才进入CLOSED状态。</li>\n</ol>\n"},{"title":"从输入URL到浏览器显示页面发生过程","index_img":"/img/10008.jpg","date":"2022-09-01T16:00:00.000Z","_content":"# 从输入URL到浏览器显示页面发生过程\n\n\n# 网络通信\n\n* 互联网内各网络设备间的通信都遵循TCP/IP协议，利用TCP/IP协议族进行网络通信时，会通过分层顺序与对方进行通信。分层由高到低分别为：应用层、传输层、网络层、数据链路层。发送端从应用层往下走，接收端从数据链路层网上走。·\n## 一、在浏览器中输入url\n\n1. 用户输入url，例如http://www.baidu.com。其中http为协议，www.baidu.com为网络地址，及指出需要的资源在那台计算机上。\n2. 一般网络地址可以称为域名或IP地址，此处为域名。使用域名是为了方便记忆，但是为了让计算机理解这个地址还需要把它解析为IP地址。\n## 二、 应用层DNS解析域名\n1. 客户端先检查本地是否有对应的IP地址，若找到则返回响应的IP地址。若没找到则请求上级DNS服务器，直至找到或到根节点。\n\n## 三、 应用层客户端发送HTTP请求\n1. HTTP请求包括请求报头和请求主体两个部分，其中请求报头包含了至关重要的信息，包括请求的方法（GET / POST）、目标url、遵循的协议（http / https / ftp…），返回的信息是否需要缓存，以及客户端是否发送cookie等。\n\n## 四、 传输层TCP传输报文（三次握手）\n\n1. 位于传输层的TCP协议为传输报文提供可靠的字节流服务。它为了方便传输，将大块的数据分割成以报文段为单位的数据包进行管理，并为它们编号，方便服务器接收时能准确地还原报文信息。TCP协议通过“三次握手”等方法保证传输的安全可靠。\n2. “三次握手”的过程是，发送端先发送一个带有SYN（synchronize）标志的数据包给接收端，在一定的延迟时间内等待接收的回复。接收端收到数据包后，传回一个带有SYN/ACK标志的数据包以示传达确认信息。接收方收到后再发送一个带有ACK标志的数据包给接收端以示握手成功。\n3. 在这个过程中，如果发送端在规定延迟时间内没有收到回复则默认接收方没有收到请求，而再次发送，直到收到回复为止。\n\n## 五、 网络层IP协议查询MAC地址\n\n1. IP协议的作用是把TCP分割好的各种数据包传送给接收方。而要保证确实能传到接收方还需要接收方的MAC地址，也就是物理地址。\n2. IP地址和MAC地址是一一对应的关系，一个网络设备的IP地址可以更换，但是MAC地址一般是固定不变的。ARP协议可以将IP地址解析成对应的MAC地址。\n3. 当通信的双方不在同一个局域网时，需要多次中转才能到达最终的目标，在中转的过程中需要通过下一个中转站的MAC地址来搜索下一个中转目标。\n\n## 六、 数据到达数据链路层\n\n1. 在找到对方的MAC地址后，就将数据发送到数据链路层传输。这时，客户端发送请求的阶段结束。\n\n## 七、 服务器接收数据\n\n1. 接收端的服务器在链路层接收到数据包，再层层向上直到应用层。这过程中包括在运输层通过TCP协议讲分段的数据包重新组成原来的HTTP请求报文。\n\n## 八、 服务器响应请求\n\n1. 服务接收到客户端发送的HTTP请求后，查找客户端请求的资源，并返回响应报文，响应报文中包括一个重要的信息——状态码。\n2. 状态码由三位数字组成，其中比较常见的是200 OK表示请求成功。301表示永久重定向，即请求的资源已经永久转移到新的位置。\n3. 在返回301状态码的同时，响应报文也会附带重定向的url，客户端接收到后将http请求的url做相应的改变再重新发送。404 not found 表示客户端请求的资源找不到。\n\n## 九、 服务器返回相应文件\n\n1. 请求成功后，服务器会返回相应的HTML文件。接下来就到了页面的渲染阶段了。\n\n# 页面渲染\n\n1. 现代浏览器渲染页面的过程是这样的：解析HTML以构建DOM树 –> 构建渲染树 –> 布局渲染树 –> 绘制渲染树。\n2. DOM树是由HTML文件中的标签排列组成，渲染树是在DOM树中加入CSS或HTML中的style样式而形成。渲染树只包含需要显示在页面中的DOM元素，像元素或display属性值为none的元素都不在渲染树中。\n3. 在浏览器还没接收到完整的HTML文件时，它就开始渲染页面了，在遇到外部链入的脚本标签或样式标签或图片时，会再次发送HTTP请求重复上述的步骤。\n4. 在收到CSS文件后会对已经渲染的页面重新渲染，加入它们应有的样式，图片文件加载完立刻显示在相应位置。在这一过程中可能会触发页面的重绘或重排。\n\n* 最后总结一下：\n1. 在浏览器客户端输入url后，url分为http协议和域名，先根据域名在本地查找是否有该域名对应的ip地址记录，如果没有则去DNS服务器上查找，查找到后浏览器正式发送http请求，请求到达传输层后，由于tcp协议，为了方便传输，将大块的数据分割成报文段为单位的数据包进行管理。接着就进行大家耳熟能详的三次握手建立连接的过程了。\n2. 连接建立后数据包就会被传输到网络层，ARP协议可以将IP地址解析成对应的MAC地址，如果在不同网段会经过多次中转才能找到。找到物理地址后就会发送数据包到数据链路层，服务器在数据链路层接收到数据包，请求结束，进入服务器应答阶段。\n3. 服务器将接收的数据包传递至传输层，将小块数据包重新组成原来的http请求报文。将http请求报文传递到服务器后，服务器对报文进行解析，并处理请求。无论成功与否，都会返回对应状态码，如果请求成功，还会返回相应的html文件。层层传递之后，应答被浏览器接收到，浏览器对html文件进行DOM树渲染，渲染后呈现的就是我们看到的页面了。\n","source":"_posts/从输入URL到浏览器显示页面发生过程.md","raw":"\n---\ntitle: 从输入URL到浏览器显示页面发生过程\ntags: [telescope]\nindex_img: /img/10008.jpg\ndate: 2022-09-02 \n------\n# 从输入URL到浏览器显示页面发生过程\n\n\n# 网络通信\n\n* 互联网内各网络设备间的通信都遵循TCP/IP协议，利用TCP/IP协议族进行网络通信时，会通过分层顺序与对方进行通信。分层由高到低分别为：应用层、传输层、网络层、数据链路层。发送端从应用层往下走，接收端从数据链路层网上走。·\n## 一、在浏览器中输入url\n\n1. 用户输入url，例如http://www.baidu.com。其中http为协议，www.baidu.com为网络地址，及指出需要的资源在那台计算机上。\n2. 一般网络地址可以称为域名或IP地址，此处为域名。使用域名是为了方便记忆，但是为了让计算机理解这个地址还需要把它解析为IP地址。\n## 二、 应用层DNS解析域名\n1. 客户端先检查本地是否有对应的IP地址，若找到则返回响应的IP地址。若没找到则请求上级DNS服务器，直至找到或到根节点。\n\n## 三、 应用层客户端发送HTTP请求\n1. HTTP请求包括请求报头和请求主体两个部分，其中请求报头包含了至关重要的信息，包括请求的方法（GET / POST）、目标url、遵循的协议（http / https / ftp…），返回的信息是否需要缓存，以及客户端是否发送cookie等。\n\n## 四、 传输层TCP传输报文（三次握手）\n\n1. 位于传输层的TCP协议为传输报文提供可靠的字节流服务。它为了方便传输，将大块的数据分割成以报文段为单位的数据包进行管理，并为它们编号，方便服务器接收时能准确地还原报文信息。TCP协议通过“三次握手”等方法保证传输的安全可靠。\n2. “三次握手”的过程是，发送端先发送一个带有SYN（synchronize）标志的数据包给接收端，在一定的延迟时间内等待接收的回复。接收端收到数据包后，传回一个带有SYN/ACK标志的数据包以示传达确认信息。接收方收到后再发送一个带有ACK标志的数据包给接收端以示握手成功。\n3. 在这个过程中，如果发送端在规定延迟时间内没有收到回复则默认接收方没有收到请求，而再次发送，直到收到回复为止。\n\n## 五、 网络层IP协议查询MAC地址\n\n1. IP协议的作用是把TCP分割好的各种数据包传送给接收方。而要保证确实能传到接收方还需要接收方的MAC地址，也就是物理地址。\n2. IP地址和MAC地址是一一对应的关系，一个网络设备的IP地址可以更换，但是MAC地址一般是固定不变的。ARP协议可以将IP地址解析成对应的MAC地址。\n3. 当通信的双方不在同一个局域网时，需要多次中转才能到达最终的目标，在中转的过程中需要通过下一个中转站的MAC地址来搜索下一个中转目标。\n\n## 六、 数据到达数据链路层\n\n1. 在找到对方的MAC地址后，就将数据发送到数据链路层传输。这时，客户端发送请求的阶段结束。\n\n## 七、 服务器接收数据\n\n1. 接收端的服务器在链路层接收到数据包，再层层向上直到应用层。这过程中包括在运输层通过TCP协议讲分段的数据包重新组成原来的HTTP请求报文。\n\n## 八、 服务器响应请求\n\n1. 服务接收到客户端发送的HTTP请求后，查找客户端请求的资源，并返回响应报文，响应报文中包括一个重要的信息——状态码。\n2. 状态码由三位数字组成，其中比较常见的是200 OK表示请求成功。301表示永久重定向，即请求的资源已经永久转移到新的位置。\n3. 在返回301状态码的同时，响应报文也会附带重定向的url，客户端接收到后将http请求的url做相应的改变再重新发送。404 not found 表示客户端请求的资源找不到。\n\n## 九、 服务器返回相应文件\n\n1. 请求成功后，服务器会返回相应的HTML文件。接下来就到了页面的渲染阶段了。\n\n# 页面渲染\n\n1. 现代浏览器渲染页面的过程是这样的：解析HTML以构建DOM树 –> 构建渲染树 –> 布局渲染树 –> 绘制渲染树。\n2. DOM树是由HTML文件中的标签排列组成，渲染树是在DOM树中加入CSS或HTML中的style样式而形成。渲染树只包含需要显示在页面中的DOM元素，像元素或display属性值为none的元素都不在渲染树中。\n3. 在浏览器还没接收到完整的HTML文件时，它就开始渲染页面了，在遇到外部链入的脚本标签或样式标签或图片时，会再次发送HTTP请求重复上述的步骤。\n4. 在收到CSS文件后会对已经渲染的页面重新渲染，加入它们应有的样式，图片文件加载完立刻显示在相应位置。在这一过程中可能会触发页面的重绘或重排。\n\n* 最后总结一下：\n1. 在浏览器客户端输入url后，url分为http协议和域名，先根据域名在本地查找是否有该域名对应的ip地址记录，如果没有则去DNS服务器上查找，查找到后浏览器正式发送http请求，请求到达传输层后，由于tcp协议，为了方便传输，将大块的数据分割成报文段为单位的数据包进行管理。接着就进行大家耳熟能详的三次握手建立连接的过程了。\n2. 连接建立后数据包就会被传输到网络层，ARP协议可以将IP地址解析成对应的MAC地址，如果在不同网段会经过多次中转才能找到。找到物理地址后就会发送数据包到数据链路层，服务器在数据链路层接收到数据包，请求结束，进入服务器应答阶段。\n3. 服务器将接收的数据包传递至传输层，将小块数据包重新组成原来的http请求报文。将http请求报文传递到服务器后，服务器对报文进行解析，并处理请求。无论成功与否，都会返回对应状态码，如果请求成功，还会返回相应的html文件。层层传递之后，应答被浏览器接收到，浏览器对html文件进行DOM树渲染，渲染后呈现的就是我们看到的页面了。\n","slug":"从输入URL到浏览器显示页面发生过程","published":1,"updated":"2023-02-18T03:27:02.094Z","_id":"cl7jiues40000dwsveucef0by","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"从输入URL到浏览器显示页面发生过程\"><a href=\"#从输入URL到浏览器显示页面发生过程\" class=\"headerlink\" title=\"从输入URL到浏览器显示页面发生过程\"></a>从输入URL到浏览器显示页面发生过程</h1><h1 id=\"网络通信\"><a href=\"#网络通信\" class=\"headerlink\" title=\"网络通信\"></a>网络通信</h1><ul>\n<li>互联网内各网络设备间的通信都遵循TCP&#x2F;IP协议，利用TCP&#x2F;IP协议族进行网络通信时，会通过分层顺序与对方进行通信。分层由高到低分别为：应用层、传输层、网络层、数据链路层。发送端从应用层往下走，接收端从数据链路层网上走。·</li>\n</ul>\n<h2 id=\"一、在浏览器中输入url\"><a href=\"#一、在浏览器中输入url\" class=\"headerlink\" title=\"一、在浏览器中输入url\"></a>一、在浏览器中输入url</h2><ol>\n<li>用户输入url，例如<a href=\"http://www.baidu.com.其中http为协议,www.baidu.com为网络地址,及指出需要的资源在那台计算机上./\">http://www.baidu.com。其中http为协议，www.baidu.com为网络地址，及指出需要的资源在那台计算机上。</a></li>\n<li>一般网络地址可以称为域名或IP地址，此处为域名。使用域名是为了方便记忆，但是为了让计算机理解这个地址还需要把它解析为IP地址。</li>\n</ol>\n<h2 id=\"二、-应用层DNS解析域名\"><a href=\"#二、-应用层DNS解析域名\" class=\"headerlink\" title=\"二、 应用层DNS解析域名\"></a>二、 应用层DNS解析域名</h2><ol>\n<li>客户端先检查本地是否有对应的IP地址，若找到则返回响应的IP地址。若没找到则请求上级DNS服务器，直至找到或到根节点。</li>\n</ol>\n<h2 id=\"三、-应用层客户端发送HTTP请求\"><a href=\"#三、-应用层客户端发送HTTP请求\" class=\"headerlink\" title=\"三、 应用层客户端发送HTTP请求\"></a>三、 应用层客户端发送HTTP请求</h2><ol>\n<li>HTTP请求包括请求报头和请求主体两个部分，其中请求报头包含了至关重要的信息，包括请求的方法（GET &#x2F; POST）、目标url、遵循的协议（http &#x2F; https &#x2F; ftp…），返回的信息是否需要缓存，以及客户端是否发送cookie等。</li>\n</ol>\n<h2 id=\"四、-传输层TCP传输报文（三次握手）\"><a href=\"#四、-传输层TCP传输报文（三次握手）\" class=\"headerlink\" title=\"四、 传输层TCP传输报文（三次握手）\"></a>四、 传输层TCP传输报文（三次握手）</h2><ol>\n<li>位于传输层的TCP协议为传输报文提供可靠的字节流服务。它为了方便传输，将大块的数据分割成以报文段为单位的数据包进行管理，并为它们编号，方便服务器接收时能准确地还原报文信息。TCP协议通过“三次握手”等方法保证传输的安全可靠。</li>\n<li>“三次握手”的过程是，发送端先发送一个带有SYN（synchronize）标志的数据包给接收端，在一定的延迟时间内等待接收的回复。接收端收到数据包后，传回一个带有SYN&#x2F;ACK标志的数据包以示传达确认信息。接收方收到后再发送一个带有ACK标志的数据包给接收端以示握手成功。</li>\n<li>在这个过程中，如果发送端在规定延迟时间内没有收到回复则默认接收方没有收到请求，而再次发送，直到收到回复为止。</li>\n</ol>\n<h2 id=\"五、-网络层IP协议查询MAC地址\"><a href=\"#五、-网络层IP协议查询MAC地址\" class=\"headerlink\" title=\"五、 网络层IP协议查询MAC地址\"></a>五、 网络层IP协议查询MAC地址</h2><ol>\n<li>IP协议的作用是把TCP分割好的各种数据包传送给接收方。而要保证确实能传到接收方还需要接收方的MAC地址，也就是物理地址。</li>\n<li>IP地址和MAC地址是一一对应的关系，一个网络设备的IP地址可以更换，但是MAC地址一般是固定不变的。ARP协议可以将IP地址解析成对应的MAC地址。</li>\n<li>当通信的双方不在同一个局域网时，需要多次中转才能到达最终的目标，在中转的过程中需要通过下一个中转站的MAC地址来搜索下一个中转目标。</li>\n</ol>\n<h2 id=\"六、-数据到达数据链路层\"><a href=\"#六、-数据到达数据链路层\" class=\"headerlink\" title=\"六、 数据到达数据链路层\"></a>六、 数据到达数据链路层</h2><ol>\n<li>在找到对方的MAC地址后，就将数据发送到数据链路层传输。这时，客户端发送请求的阶段结束。</li>\n</ol>\n<h2 id=\"七、-服务器接收数据\"><a href=\"#七、-服务器接收数据\" class=\"headerlink\" title=\"七、 服务器接收数据\"></a>七、 服务器接收数据</h2><ol>\n<li>接收端的服务器在链路层接收到数据包，再层层向上直到应用层。这过程中包括在运输层通过TCP协议讲分段的数据包重新组成原来的HTTP请求报文。</li>\n</ol>\n<h2 id=\"八、-服务器响应请求\"><a href=\"#八、-服务器响应请求\" class=\"headerlink\" title=\"八、 服务器响应请求\"></a>八、 服务器响应请求</h2><ol>\n<li>服务接收到客户端发送的HTTP请求后，查找客户端请求的资源，并返回响应报文，响应报文中包括一个重要的信息——状态码。</li>\n<li>状态码由三位数字组成，其中比较常见的是200 OK表示请求成功。301表示永久重定向，即请求的资源已经永久转移到新的位置。</li>\n<li>在返回301状态码的同时，响应报文也会附带重定向的url，客户端接收到后将http请求的url做相应的改变再重新发送。404 not found 表示客户端请求的资源找不到。</li>\n</ol>\n<h2 id=\"九、-服务器返回相应文件\"><a href=\"#九、-服务器返回相应文件\" class=\"headerlink\" title=\"九、 服务器返回相应文件\"></a>九、 服务器返回相应文件</h2><ol>\n<li>请求成功后，服务器会返回相应的HTML文件。接下来就到了页面的渲染阶段了。</li>\n</ol>\n<h1 id=\"页面渲染\"><a href=\"#页面渲染\" class=\"headerlink\" title=\"页面渲染\"></a>页面渲染</h1><ol>\n<li>现代浏览器渲染页面的过程是这样的：解析HTML以构建DOM树 –&gt; 构建渲染树 –&gt; 布局渲染树 –&gt; 绘制渲染树。</li>\n<li>DOM树是由HTML文件中的标签排列组成，渲染树是在DOM树中加入CSS或HTML中的style样式而形成。渲染树只包含需要显示在页面中的DOM元素，像元素或display属性值为none的元素都不在渲染树中。</li>\n<li>在浏览器还没接收到完整的HTML文件时，它就开始渲染页面了，在遇到外部链入的脚本标签或样式标签或图片时，会再次发送HTTP请求重复上述的步骤。</li>\n<li>在收到CSS文件后会对已经渲染的页面重新渲染，加入它们应有的样式，图片文件加载完立刻显示在相应位置。在这一过程中可能会触发页面的重绘或重排。</li>\n</ol>\n<ul>\n<li>最后总结一下：</li>\n</ul>\n<ol>\n<li>在浏览器客户端输入url后，url分为http协议和域名，先根据域名在本地查找是否有该域名对应的ip地址记录，如果没有则去DNS服务器上查找，查找到后浏览器正式发送http请求，请求到达传输层后，由于tcp协议，为了方便传输，将大块的数据分割成报文段为单位的数据包进行管理。接着就进行大家耳熟能详的三次握手建立连接的过程了。</li>\n<li>连接建立后数据包就会被传输到网络层，ARP协议可以将IP地址解析成对应的MAC地址，如果在不同网段会经过多次中转才能找到。找到物理地址后就会发送数据包到数据链路层，服务器在数据链路层接收到数据包，请求结束，进入服务器应答阶段。</li>\n<li>服务器将接收的数据包传递至传输层，将小块数据包重新组成原来的http请求报文。将http请求报文传递到服务器后，服务器对报文进行解析，并处理请求。无论成功与否，都会返回对应状态码，如果请求成功，还会返回相应的html文件。层层传递之后，应答被浏览器接收到，浏览器对html文件进行DOM树渲染，渲染后呈现的就是我们看到的页面了。</li>\n</ol>\n","site":{"data":{}},"wordcount":2204,"excerpt":"","more":"<h1 id=\"从输入URL到浏览器显示页面发生过程\"><a href=\"#从输入URL到浏览器显示页面发生过程\" class=\"headerlink\" title=\"从输入URL到浏览器显示页面发生过程\"></a>从输入URL到浏览器显示页面发生过程</h1><h1 id=\"网络通信\"><a href=\"#网络通信\" class=\"headerlink\" title=\"网络通信\"></a>网络通信</h1><ul>\n<li>互联网内各网络设备间的通信都遵循TCP&#x2F;IP协议，利用TCP&#x2F;IP协议族进行网络通信时，会通过分层顺序与对方进行通信。分层由高到低分别为：应用层、传输层、网络层、数据链路层。发送端从应用层往下走，接收端从数据链路层网上走。·</li>\n</ul>\n<h2 id=\"一、在浏览器中输入url\"><a href=\"#一、在浏览器中输入url\" class=\"headerlink\" title=\"一、在浏览器中输入url\"></a>一、在浏览器中输入url</h2><ol>\n<li>用户输入url，例如<a href=\"http://www.baidu.com.其中http为协议,www.baidu.com为网络地址,及指出需要的资源在那台计算机上./\">http://www.baidu.com。其中http为协议，www.baidu.com为网络地址，及指出需要的资源在那台计算机上。</a></li>\n<li>一般网络地址可以称为域名或IP地址，此处为域名。使用域名是为了方便记忆，但是为了让计算机理解这个地址还需要把它解析为IP地址。</li>\n</ol>\n<h2 id=\"二、-应用层DNS解析域名\"><a href=\"#二、-应用层DNS解析域名\" class=\"headerlink\" title=\"二、 应用层DNS解析域名\"></a>二、 应用层DNS解析域名</h2><ol>\n<li>客户端先检查本地是否有对应的IP地址，若找到则返回响应的IP地址。若没找到则请求上级DNS服务器，直至找到或到根节点。</li>\n</ol>\n<h2 id=\"三、-应用层客户端发送HTTP请求\"><a href=\"#三、-应用层客户端发送HTTP请求\" class=\"headerlink\" title=\"三、 应用层客户端发送HTTP请求\"></a>三、 应用层客户端发送HTTP请求</h2><ol>\n<li>HTTP请求包括请求报头和请求主体两个部分，其中请求报头包含了至关重要的信息，包括请求的方法（GET &#x2F; POST）、目标url、遵循的协议（http &#x2F; https &#x2F; ftp…），返回的信息是否需要缓存，以及客户端是否发送cookie等。</li>\n</ol>\n<h2 id=\"四、-传输层TCP传输报文（三次握手）\"><a href=\"#四、-传输层TCP传输报文（三次握手）\" class=\"headerlink\" title=\"四、 传输层TCP传输报文（三次握手）\"></a>四、 传输层TCP传输报文（三次握手）</h2><ol>\n<li>位于传输层的TCP协议为传输报文提供可靠的字节流服务。它为了方便传输，将大块的数据分割成以报文段为单位的数据包进行管理，并为它们编号，方便服务器接收时能准确地还原报文信息。TCP协议通过“三次握手”等方法保证传输的安全可靠。</li>\n<li>“三次握手”的过程是，发送端先发送一个带有SYN（synchronize）标志的数据包给接收端，在一定的延迟时间内等待接收的回复。接收端收到数据包后，传回一个带有SYN&#x2F;ACK标志的数据包以示传达确认信息。接收方收到后再发送一个带有ACK标志的数据包给接收端以示握手成功。</li>\n<li>在这个过程中，如果发送端在规定延迟时间内没有收到回复则默认接收方没有收到请求，而再次发送，直到收到回复为止。</li>\n</ol>\n<h2 id=\"五、-网络层IP协议查询MAC地址\"><a href=\"#五、-网络层IP协议查询MAC地址\" class=\"headerlink\" title=\"五、 网络层IP协议查询MAC地址\"></a>五、 网络层IP协议查询MAC地址</h2><ol>\n<li>IP协议的作用是把TCP分割好的各种数据包传送给接收方。而要保证确实能传到接收方还需要接收方的MAC地址，也就是物理地址。</li>\n<li>IP地址和MAC地址是一一对应的关系，一个网络设备的IP地址可以更换，但是MAC地址一般是固定不变的。ARP协议可以将IP地址解析成对应的MAC地址。</li>\n<li>当通信的双方不在同一个局域网时，需要多次中转才能到达最终的目标，在中转的过程中需要通过下一个中转站的MAC地址来搜索下一个中转目标。</li>\n</ol>\n<h2 id=\"六、-数据到达数据链路层\"><a href=\"#六、-数据到达数据链路层\" class=\"headerlink\" title=\"六、 数据到达数据链路层\"></a>六、 数据到达数据链路层</h2><ol>\n<li>在找到对方的MAC地址后，就将数据发送到数据链路层传输。这时，客户端发送请求的阶段结束。</li>\n</ol>\n<h2 id=\"七、-服务器接收数据\"><a href=\"#七、-服务器接收数据\" class=\"headerlink\" title=\"七、 服务器接收数据\"></a>七、 服务器接收数据</h2><ol>\n<li>接收端的服务器在链路层接收到数据包，再层层向上直到应用层。这过程中包括在运输层通过TCP协议讲分段的数据包重新组成原来的HTTP请求报文。</li>\n</ol>\n<h2 id=\"八、-服务器响应请求\"><a href=\"#八、-服务器响应请求\" class=\"headerlink\" title=\"八、 服务器响应请求\"></a>八、 服务器响应请求</h2><ol>\n<li>服务接收到客户端发送的HTTP请求后，查找客户端请求的资源，并返回响应报文，响应报文中包括一个重要的信息——状态码。</li>\n<li>状态码由三位数字组成，其中比较常见的是200 OK表示请求成功。301表示永久重定向，即请求的资源已经永久转移到新的位置。</li>\n<li>在返回301状态码的同时，响应报文也会附带重定向的url，客户端接收到后将http请求的url做相应的改变再重新发送。404 not found 表示客户端请求的资源找不到。</li>\n</ol>\n<h2 id=\"九、-服务器返回相应文件\"><a href=\"#九、-服务器返回相应文件\" class=\"headerlink\" title=\"九、 服务器返回相应文件\"></a>九、 服务器返回相应文件</h2><ol>\n<li>请求成功后，服务器会返回相应的HTML文件。接下来就到了页面的渲染阶段了。</li>\n</ol>\n<h1 id=\"页面渲染\"><a href=\"#页面渲染\" class=\"headerlink\" title=\"页面渲染\"></a>页面渲染</h1><ol>\n<li>现代浏览器渲染页面的过程是这样的：解析HTML以构建DOM树 –&gt; 构建渲染树 –&gt; 布局渲染树 –&gt; 绘制渲染树。</li>\n<li>DOM树是由HTML文件中的标签排列组成，渲染树是在DOM树中加入CSS或HTML中的style样式而形成。渲染树只包含需要显示在页面中的DOM元素，像元素或display属性值为none的元素都不在渲染树中。</li>\n<li>在浏览器还没接收到完整的HTML文件时，它就开始渲染页面了，在遇到外部链入的脚本标签或样式标签或图片时，会再次发送HTTP请求重复上述的步骤。</li>\n<li>在收到CSS文件后会对已经渲染的页面重新渲染，加入它们应有的样式，图片文件加载完立刻显示在相应位置。在这一过程中可能会触发页面的重绘或重排。</li>\n</ol>\n<ul>\n<li>最后总结一下：</li>\n</ul>\n<ol>\n<li>在浏览器客户端输入url后，url分为http协议和域名，先根据域名在本地查找是否有该域名对应的ip地址记录，如果没有则去DNS服务器上查找，查找到后浏览器正式发送http请求，请求到达传输层后，由于tcp协议，为了方便传输，将大块的数据分割成报文段为单位的数据包进行管理。接着就进行大家耳熟能详的三次握手建立连接的过程了。</li>\n<li>连接建立后数据包就会被传输到网络层，ARP协议可以将IP地址解析成对应的MAC地址，如果在不同网段会经过多次中转才能找到。找到物理地址后就会发送数据包到数据链路层，服务器在数据链路层接收到数据包，请求结束，进入服务器应答阶段。</li>\n<li>服务器将接收的数据包传递至传输层，将小块数据包重新组成原来的http请求报文。将http请求报文传递到服务器后，服务器对报文进行解析，并处理请求。无论成功与否，都会返回对应状态码，如果请求成功，还会返回相应的html文件。层层传递之后，应答被浏览器接收到，浏览器对html文件进行DOM树渲染，渲染后呈现的就是我们看到的页面了。</li>\n</ol>\n"},{"title":"Ajax请求的五个步骤","index_img":"/img/10002.jpg","date":"2022-10-09T16:00:00.000Z","_content":"#  Ajax请求的五个步骤\n\n  * ——Ajax简介——：ajax即异步 JavaScript 和XML。Ajax是一种用于创建快速动态网页的技术。通过在后台与服务器进行少量数据交换，Ajax可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。而传统的网页(不使用 Ajax)如果需要更新内容，必需重载整个网页面。\n  \n  * ajax的工作原理：客户端发送请求，请求交给xhr，xhr把请求提交给服务，服务器进行业务处理，服务器响应数据交给xhr对象，xhr对象接收数据，由javascript把数据写到页面上\n### 实现AJAX的基本步骤：\n\n* 要完整实现一个AJAX异步调用和局部刷新,通常需要以下几个步骤:\n\n1. 创建XMLHttpRequest对象,即创建一个异步调用对象。\n2. 创建一个新的HTTP请求,并指定该HTTP请求的方法、URL及验证信息。\n3. 设置响应HTTP请求状态变化的函数。\n4. 发送HTTP请求。\n5. 获取异步调用返回的数据。\n6. 使用JavaScript和DOM实现局部刷新。\n\n### 一.创建XMLHttpRequest对象\n\n1. 不同浏览器使用的异步调用对象有所不同，在IE浏览器中异步调用使用的是XMLHTTP组件中的XMLHttpRequest对象，而在Netscape、Firefox浏览器中则直接使用XMLHttpRequest组件。因此，在不同浏览器中创建XMLHttpRequest对象的方式都有所不同。\n\n* 在IE浏览器中创建XMLHttpRequest对象的方式为:\n var xmlHttpRequest = new ActiveXObject(\"Microsoft.XMLHTTP\");\n\n* 在Netscape浏览器中创建XMLHttpRequest对象的方式为:\n\nvar xmlHttpRequest = new XMLHttpRequest();\n\n**由于无法确定用户使用的是什么浏览器,所以在创建XMLHttpRequest对象时,最好将以上两种方法都加上.如以下代码所示:**\n\n ```ruby\n var xmlHttpRequest;  //定义一个变量,用于存放XMLHttpRequest对象\n    createXMLHttpRequst();   //调用创建对象的方法\n    //创建XMLHttpRequest对象的方法 \n    function createXMLHttpRequest(){                                                 \n        if(window.ActiveXObject) {//判断是否是IE浏览器\n            xmlHttpRequest = new ActiveXObject(\"Microsoft.XMLHTTP\");//创建IE的XMLHttpRequest对象\n        }else if(window.XMLHttpRequest){//判断是否是Netscape等其他支持XMLHttpRequest组件的浏览器\n            xmlHttpRequest = new XMLHttpRequest();//创建其他浏览器上的XMLHttpRequest对象\n        }\n    } \n ```\n  \n\n1. \"if(window.ActiveXObject)\"用来判断是否使用IE浏览器.其中ActiveXOject并不是Windows对象的标准属性,而是IE浏览器中专有的属性,可以用于判断浏览器是否支持ActiveX控件.通常只有IE浏览器或以IE浏览器为核心的浏览器才能支持Active控件.\n\n2. \"else if(window.XMLHttpRequest)\"是为了防止一些浏览器既不支持ActiveX控件,也不支持XMLHttpRequest组件而进行的判断.其中XMLHttpRequest也不是window对象的标准属性,但可以用来判断浏览器是否支持XMLHttpRequest组件.\n\n3. 如果浏览器既不支持ActiveX控件,也不支持XMLHttpRequest组件,那么就不会对xmlHttpRequest变量赋值.\n### 二.创建HTTP请求\n\n1. 创建了XMLHttpRequest对象之后，必须为XMLHttpRequest对象创建HTTP请求，用于说明XMLHttpRequest对象要从哪里获取数据。通常可以是网站中的数据,也可以是本地中其他文件中的数据。\n__创建HTTP请求可以使用XMLHttpRequest对象的open()方法,其语法代码如下所示:__\n\n* method：该参数用于指定HTTP的请求方法，一共有get、post、head、put、delete五种方法，常用的方法为get和post。\n\n* URL：该参数用于指定HTTP请求的URL地址，可以是绝对URL，也可以是相对URL。\n\n* flag：该参数为可选，参数值为布尔型。该参数用于指定是否使用异步方式。true表示异步、false表示同步，默认为true。\n\n* name：该参数为可选参数，用于输入用户名。如果服务器需要验证，则必须使用该参数。\n\n* password：该参数为可选，用于输入密码。若服务器需要验证，则必须使用该参数。\n\n1. 通常可以使用以下代码来访问一个网站文件的内容。      \n\nxmlHttpRequest.open(\"get\",\"http://www.aspxfans.com/BookSupport/JavaScript/ajax.htm\",true);\n\n3. 或者使用以下代码来访问一个本地文件内容：\n\nxmlHttpRequest.open(\"get\",\"ajax.htm\",true);\n\n* 注意：如果HTML文件放在Web服务器上，在Netscape浏览器中的JavaScript安全机制不允许与本机之外的主机进行通信。也就是说，使用open()方法只能打开与HTML文件在同一个服务器上的文件。而在IE浏览器中则无此限制（虽然可以打开其他服务器上的文件，但也会有警告提示）。\n\n### 三.设置响应HTTP请求状态变化的函数\n\n1. 创建完HTTP请求之后，应该就可以将HTTP请求发送给Web服务器了。然而，发送HTTP请求的目的是为了接收从服务器中返回的数据。从创建XMLHttpRequest对象开始，到发送数据、接收数据、XMLHttpRequest对象一共会经历以下5中状态。\n2. \n* 未初始化状态。在创建完XMLHttpRequest对象时，该对象处于未初始化状态，此时XMLHttpRequest对象的readyState属性值为0。\n* 初始化状态。在创建完XMLHttpRequest对象后使用open()方法创建了HTTP请求时，该对象处于初始化状态。此时XMLHttpRequest对象的readyState属性值为1。\n* 发送数据状态。在初始化XMLHttpRequest对象后，使用send()方法发送数据时，该对象处于发送数据状态，此时XMLHttpRequest对象的readyState属性值为2。\n* 接收数据状态。Web服务器接收完数据并进行处理完毕之后，向客户端传送返回的结果。此时，XMLHttpRequest对象处于接收数据状态，XMLHttpRequest对象的readyState属性值为3。\n* 完成状态。XMLHttpRequest对象接收数据完毕后，进入完成状态，此时XMLHttpRequest对象的readyState属性值为4。此时接收完毕后的数据存入在客户端计算机的内存中，可以使用responseText属性或responseXml属性来获取数据。\n\n3. 只有在XMLHttpRequest对象完成了以上5个步骤之后，才可以获取从服务器端返回的数据。因此，如果要获得从服务器端返回的数据，就必须要先判断XMLHttpRequest对象的状态。\n\n4. XMLHttpRequest对象可以响应readystatechange事件，该事件在XMLHttpRequest对象状态改变时（也就是readyState属性值改变时）激发。因此，可以通过该事件调用一个函数，并在该函数中判断XMLHttpRequest对象的readyState属性值。如果readyState属性值为4则使用responseText属性或responseXml属性来获取数据。具体代码如下所示：\n\n    //设置当XMLHttpRequest对象状态改变时调用的函数，注意函数名后面不要添加小括号\n    xmlHttpRequest.onreadystatechange = getData;\n     \n    //定义函数\n    function getData(){\n        //判断XMLHttpRequest对象的readyState属性值是否为4，如果为4表示异步调用完成\n        if(xmlHttpRequest.readyState == 4) {\n            //设置获取数据的语句\n        }\n    }\n\n### 四.设置获取服务器返回数据的语句\n\n1. 如果XMLHttpRequest对象的readyState属性值等于4，表示异步调用过程完毕，就可以通过XMLHttpRequest对象的responseText属性或responseXml属性来获取数据。\n\n2. 但是，异步调用过程完毕，并不代表异步调用成功了，如果要判断异步调用是否成功，还要判断XMLHttpRequest对象的status属性值，只有该属性值为200，才表示异步调用成功，因此，要获取服务器返回数据的语句，还必须要先判断XMLHttpRequest对象的status属性值是否等于200，\n  __如以下代码所示：__\n```ruby\n     if(xmlHttpRequst.status == 200) {\n        document.write(xmlHttpRequest.responseText);//将返回结果以字符串形式输出\n        //document.write(xmlHttpRequest.responseXML);//或者将返回结果以XML形式输出\n     }\n```\n3. 注意：如果HTML文件不是在Web服务器上运行，而是在本地运行，则xmlHttpRequest.status的返回值为0。因此，如果该文件在本地运行，则应该加上xmlHttpRequest.status == 0的判断。\n\n__通常将以上代码放在响应HTTP请求状态变化的函数体内，如以下代码所示__       \n```ruby\n    //设置当XMLHttpRequest对象状态改变时调用的函数，注意函数名后面不要添加小括号\n    xmlHttpRequest.onreadystatechange = getData;\n     \n    //定义函数\n    function getData(){\n        //判断XMLHttpRequest对象的readyState属性值是否为4，如果为4表示异步调用完成\n        if(xmlHttpRequest.readyState==4){\n            if(xmlHttpRequest.status == 200 || xmlHttpRequest.status == 0){//设置获取数据的语句\n                document.write(xmlHttpRequest.responseText);//将返回结果以字符串形式输出\n                //docunment.write(xmlHttpRequest.responseXML);//或者将返回结果以XML形式输出\n            }\n        }\n    }\n```\n### 五.发送HTTP请求\n\n1. 在经过以上几个步骤的设置之后，就可以将HTTP请求发送到Web服务器上去了。发送HTTP请求可以使用XMLHttpRequest对象的send()方法。\n \n___ 其语法代码如下所示：__\n\nXMLHttpRequest.send(data);\n\n2. 其中data是个可选参数，如果请求的数据不需要参数，即可以使用null来替代。data参数的格式与在URL中传递参数的格式类似，以下代码为一个send()方法中的data参数的示例：\n\nname=myName&value=myValue\n\n3. 只有在使用send()方法之后，XMLHttpRequest对象的readyState属性值才会开始改变，也才会激发readystatechange事件，并调用函数。\n### 六.局部更新\n1. 在通过Ajax的异步调用获得服务器端数据之后，可以使用JavaScript或DOM来将网页中的数据进行局部更新。\n  \n\n\n","source":"_posts/Ajax请求的五个步骤.md","raw":"---\ntitle:  Ajax请求的五个步骤\ntags: [telescope]\nindex_img: /img/10002.jpg\ndate: 2022-10-10\n---\n#  Ajax请求的五个步骤\n\n  * ——Ajax简介——：ajax即异步 JavaScript 和XML。Ajax是一种用于创建快速动态网页的技术。通过在后台与服务器进行少量数据交换，Ajax可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。而传统的网页(不使用 Ajax)如果需要更新内容，必需重载整个网页面。\n  \n  * ajax的工作原理：客户端发送请求，请求交给xhr，xhr把请求提交给服务，服务器进行业务处理，服务器响应数据交给xhr对象，xhr对象接收数据，由javascript把数据写到页面上\n### 实现AJAX的基本步骤：\n\n* 要完整实现一个AJAX异步调用和局部刷新,通常需要以下几个步骤:\n\n1. 创建XMLHttpRequest对象,即创建一个异步调用对象。\n2. 创建一个新的HTTP请求,并指定该HTTP请求的方法、URL及验证信息。\n3. 设置响应HTTP请求状态变化的函数。\n4. 发送HTTP请求。\n5. 获取异步调用返回的数据。\n6. 使用JavaScript和DOM实现局部刷新。\n\n### 一.创建XMLHttpRequest对象\n\n1. 不同浏览器使用的异步调用对象有所不同，在IE浏览器中异步调用使用的是XMLHTTP组件中的XMLHttpRequest对象，而在Netscape、Firefox浏览器中则直接使用XMLHttpRequest组件。因此，在不同浏览器中创建XMLHttpRequest对象的方式都有所不同。\n\n* 在IE浏览器中创建XMLHttpRequest对象的方式为:\n var xmlHttpRequest = new ActiveXObject(\"Microsoft.XMLHTTP\");\n\n* 在Netscape浏览器中创建XMLHttpRequest对象的方式为:\n\nvar xmlHttpRequest = new XMLHttpRequest();\n\n**由于无法确定用户使用的是什么浏览器,所以在创建XMLHttpRequest对象时,最好将以上两种方法都加上.如以下代码所示:**\n\n ```ruby\n var xmlHttpRequest;  //定义一个变量,用于存放XMLHttpRequest对象\n    createXMLHttpRequst();   //调用创建对象的方法\n    //创建XMLHttpRequest对象的方法 \n    function createXMLHttpRequest(){                                                 \n        if(window.ActiveXObject) {//判断是否是IE浏览器\n            xmlHttpRequest = new ActiveXObject(\"Microsoft.XMLHTTP\");//创建IE的XMLHttpRequest对象\n        }else if(window.XMLHttpRequest){//判断是否是Netscape等其他支持XMLHttpRequest组件的浏览器\n            xmlHttpRequest = new XMLHttpRequest();//创建其他浏览器上的XMLHttpRequest对象\n        }\n    } \n ```\n  \n\n1. \"if(window.ActiveXObject)\"用来判断是否使用IE浏览器.其中ActiveXOject并不是Windows对象的标准属性,而是IE浏览器中专有的属性,可以用于判断浏览器是否支持ActiveX控件.通常只有IE浏览器或以IE浏览器为核心的浏览器才能支持Active控件.\n\n2. \"else if(window.XMLHttpRequest)\"是为了防止一些浏览器既不支持ActiveX控件,也不支持XMLHttpRequest组件而进行的判断.其中XMLHttpRequest也不是window对象的标准属性,但可以用来判断浏览器是否支持XMLHttpRequest组件.\n\n3. 如果浏览器既不支持ActiveX控件,也不支持XMLHttpRequest组件,那么就不会对xmlHttpRequest变量赋值.\n### 二.创建HTTP请求\n\n1. 创建了XMLHttpRequest对象之后，必须为XMLHttpRequest对象创建HTTP请求，用于说明XMLHttpRequest对象要从哪里获取数据。通常可以是网站中的数据,也可以是本地中其他文件中的数据。\n__创建HTTP请求可以使用XMLHttpRequest对象的open()方法,其语法代码如下所示:__\n\n* method：该参数用于指定HTTP的请求方法，一共有get、post、head、put、delete五种方法，常用的方法为get和post。\n\n* URL：该参数用于指定HTTP请求的URL地址，可以是绝对URL，也可以是相对URL。\n\n* flag：该参数为可选，参数值为布尔型。该参数用于指定是否使用异步方式。true表示异步、false表示同步，默认为true。\n\n* name：该参数为可选参数，用于输入用户名。如果服务器需要验证，则必须使用该参数。\n\n* password：该参数为可选，用于输入密码。若服务器需要验证，则必须使用该参数。\n\n1. 通常可以使用以下代码来访问一个网站文件的内容。      \n\nxmlHttpRequest.open(\"get\",\"http://www.aspxfans.com/BookSupport/JavaScript/ajax.htm\",true);\n\n3. 或者使用以下代码来访问一个本地文件内容：\n\nxmlHttpRequest.open(\"get\",\"ajax.htm\",true);\n\n* 注意：如果HTML文件放在Web服务器上，在Netscape浏览器中的JavaScript安全机制不允许与本机之外的主机进行通信。也就是说，使用open()方法只能打开与HTML文件在同一个服务器上的文件。而在IE浏览器中则无此限制（虽然可以打开其他服务器上的文件，但也会有警告提示）。\n\n### 三.设置响应HTTP请求状态变化的函数\n\n1. 创建完HTTP请求之后，应该就可以将HTTP请求发送给Web服务器了。然而，发送HTTP请求的目的是为了接收从服务器中返回的数据。从创建XMLHttpRequest对象开始，到发送数据、接收数据、XMLHttpRequest对象一共会经历以下5中状态。\n2. \n* 未初始化状态。在创建完XMLHttpRequest对象时，该对象处于未初始化状态，此时XMLHttpRequest对象的readyState属性值为0。\n* 初始化状态。在创建完XMLHttpRequest对象后使用open()方法创建了HTTP请求时，该对象处于初始化状态。此时XMLHttpRequest对象的readyState属性值为1。\n* 发送数据状态。在初始化XMLHttpRequest对象后，使用send()方法发送数据时，该对象处于发送数据状态，此时XMLHttpRequest对象的readyState属性值为2。\n* 接收数据状态。Web服务器接收完数据并进行处理完毕之后，向客户端传送返回的结果。此时，XMLHttpRequest对象处于接收数据状态，XMLHttpRequest对象的readyState属性值为3。\n* 完成状态。XMLHttpRequest对象接收数据完毕后，进入完成状态，此时XMLHttpRequest对象的readyState属性值为4。此时接收完毕后的数据存入在客户端计算机的内存中，可以使用responseText属性或responseXml属性来获取数据。\n\n3. 只有在XMLHttpRequest对象完成了以上5个步骤之后，才可以获取从服务器端返回的数据。因此，如果要获得从服务器端返回的数据，就必须要先判断XMLHttpRequest对象的状态。\n\n4. XMLHttpRequest对象可以响应readystatechange事件，该事件在XMLHttpRequest对象状态改变时（也就是readyState属性值改变时）激发。因此，可以通过该事件调用一个函数，并在该函数中判断XMLHttpRequest对象的readyState属性值。如果readyState属性值为4则使用responseText属性或responseXml属性来获取数据。具体代码如下所示：\n\n    //设置当XMLHttpRequest对象状态改变时调用的函数，注意函数名后面不要添加小括号\n    xmlHttpRequest.onreadystatechange = getData;\n     \n    //定义函数\n    function getData(){\n        //判断XMLHttpRequest对象的readyState属性值是否为4，如果为4表示异步调用完成\n        if(xmlHttpRequest.readyState == 4) {\n            //设置获取数据的语句\n        }\n    }\n\n### 四.设置获取服务器返回数据的语句\n\n1. 如果XMLHttpRequest对象的readyState属性值等于4，表示异步调用过程完毕，就可以通过XMLHttpRequest对象的responseText属性或responseXml属性来获取数据。\n\n2. 但是，异步调用过程完毕，并不代表异步调用成功了，如果要判断异步调用是否成功，还要判断XMLHttpRequest对象的status属性值，只有该属性值为200，才表示异步调用成功，因此，要获取服务器返回数据的语句，还必须要先判断XMLHttpRequest对象的status属性值是否等于200，\n  __如以下代码所示：__\n```ruby\n     if(xmlHttpRequst.status == 200) {\n        document.write(xmlHttpRequest.responseText);//将返回结果以字符串形式输出\n        //document.write(xmlHttpRequest.responseXML);//或者将返回结果以XML形式输出\n     }\n```\n3. 注意：如果HTML文件不是在Web服务器上运行，而是在本地运行，则xmlHttpRequest.status的返回值为0。因此，如果该文件在本地运行，则应该加上xmlHttpRequest.status == 0的判断。\n\n__通常将以上代码放在响应HTTP请求状态变化的函数体内，如以下代码所示__       \n```ruby\n    //设置当XMLHttpRequest对象状态改变时调用的函数，注意函数名后面不要添加小括号\n    xmlHttpRequest.onreadystatechange = getData;\n     \n    //定义函数\n    function getData(){\n        //判断XMLHttpRequest对象的readyState属性值是否为4，如果为4表示异步调用完成\n        if(xmlHttpRequest.readyState==4){\n            if(xmlHttpRequest.status == 200 || xmlHttpRequest.status == 0){//设置获取数据的语句\n                document.write(xmlHttpRequest.responseText);//将返回结果以字符串形式输出\n                //docunment.write(xmlHttpRequest.responseXML);//或者将返回结果以XML形式输出\n            }\n        }\n    }\n```\n### 五.发送HTTP请求\n\n1. 在经过以上几个步骤的设置之后，就可以将HTTP请求发送到Web服务器上去了。发送HTTP请求可以使用XMLHttpRequest对象的send()方法。\n \n___ 其语法代码如下所示：__\n\nXMLHttpRequest.send(data);\n\n2. 其中data是个可选参数，如果请求的数据不需要参数，即可以使用null来替代。data参数的格式与在URL中传递参数的格式类似，以下代码为一个send()方法中的data参数的示例：\n\nname=myName&value=myValue\n\n3. 只有在使用send()方法之后，XMLHttpRequest对象的readyState属性值才会开始改变，也才会激发readystatechange事件，并调用函数。\n### 六.局部更新\n1. 在通过Ajax的异步调用获得服务器端数据之后，可以使用JavaScript或DOM来将网页中的数据进行局部更新。\n  \n\n\n","slug":"Ajax请求的五个步骤","published":1,"updated":"2023-02-18T03:29:25.566Z","_id":"cl7mhdy9v0001rksv5hyrhw8a","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Ajax请求的五个步骤\"><a href=\"#Ajax请求的五个步骤\" class=\"headerlink\" title=\"Ajax请求的五个步骤\"></a>Ajax请求的五个步骤</h1><ul>\n<li><p>——Ajax简介——：ajax即异步 JavaScript 和XML。Ajax是一种用于创建快速动态网页的技术。通过在后台与服务器进行少量数据交换，Ajax可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。而传统的网页(不使用 Ajax)如果需要更新内容，必需重载整个网页面。</p>\n</li>\n<li><p>ajax的工作原理：客户端发送请求，请求交给xhr，xhr把请求提交给服务，服务器进行业务处理，服务器响应数据交给xhr对象，xhr对象接收数据，由javascript把数据写到页面上</p>\n</li>\n</ul>\n<h3 id=\"实现AJAX的基本步骤：\"><a href=\"#实现AJAX的基本步骤：\" class=\"headerlink\" title=\"实现AJAX的基本步骤：\"></a>实现AJAX的基本步骤：</h3><ul>\n<li>要完整实现一个AJAX异步调用和局部刷新,通常需要以下几个步骤:</li>\n</ul>\n<ol>\n<li>创建XMLHttpRequest对象,即创建一个异步调用对象。</li>\n<li>创建一个新的HTTP请求,并指定该HTTP请求的方法、URL及验证信息。</li>\n<li>设置响应HTTP请求状态变化的函数。</li>\n<li>发送HTTP请求。</li>\n<li>获取异步调用返回的数据。</li>\n<li>使用JavaScript和DOM实现局部刷新。</li>\n</ol>\n<h3 id=\"一-创建XMLHttpRequest对象\"><a href=\"#一-创建XMLHttpRequest对象\" class=\"headerlink\" title=\"一.创建XMLHttpRequest对象\"></a>一.创建XMLHttpRequest对象</h3><ol>\n<li>不同浏览器使用的异步调用对象有所不同，在IE浏览器中异步调用使用的是XMLHTTP组件中的XMLHttpRequest对象，而在Netscape、Firefox浏览器中则直接使用XMLHttpRequest组件。因此，在不同浏览器中创建XMLHttpRequest对象的方式都有所不同。</li>\n</ol>\n<ul>\n<li><p>在IE浏览器中创建XMLHttpRequest对象的方式为:<br> var xmlHttpRequest &#x3D; new ActiveXObject(“Microsoft.XMLHTTP”);</p>\n</li>\n<li><p>在Netscape浏览器中创建XMLHttpRequest对象的方式为:</p>\n</li>\n</ul>\n<p>var xmlHttpRequest &#x3D; new XMLHttpRequest();</p>\n<p><strong>由于无法确定用户使用的是什么浏览器,所以在创建XMLHttpRequest对象时,最好将以上两种方法都加上.如以下代码所示:</strong></p>\n <figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ruby\">var xmlHttpRequest;  <span class=\"hljs-regexp\">//</span>定义一个变量,用于存放XMLHttpRequest对象<br>   createXMLHttpRequst();   <span class=\"hljs-regexp\">//</span>调用创建对象的方法<br>   /<span class=\"hljs-regexp\">/创建XMLHttpRequest对象的方法 </span><br><span class=\"hljs-regexp\">   function createXMLHttpRequest()&#123;                                                 </span><br><span class=\"hljs-regexp\">       if(window.ActiveXObject) &#123;/</span><span class=\"hljs-regexp\">/判断是否是IE浏览器</span><br><span class=\"hljs-regexp\">           xmlHttpRequest = new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;);/</span><span class=\"hljs-regexp\">/创建IE的XMLHttpRequest对象</span><br><span class=\"hljs-regexp\">       &#125;else if(window.XMLHttpRequest)&#123;/</span><span class=\"hljs-regexp\">/判断是否是Netscape等其他支持XMLHttpRequest组件的浏览器</span><br><span class=\"hljs-regexp\">           xmlHttpRequest = new XMLHttpRequest();/</span><span class=\"hljs-regexp\">/创建其他浏览器上的XMLHttpRequest对象</span><br><span class=\"hljs-regexp\">       &#125;</span><br><span class=\"hljs-regexp\">   &#125; </span><br></code></pre></td></tr></table></figure>\n<ol>\n<li><p>“if(window.ActiveXObject)”用来判断是否使用IE浏览器.其中ActiveXOject并不是Windows对象的标准属性,而是IE浏览器中专有的属性,可以用于判断浏览器是否支持ActiveX控件.通常只有IE浏览器或以IE浏览器为核心的浏览器才能支持Active控件.</p>\n</li>\n<li><p>“else if(window.XMLHttpRequest)”是为了防止一些浏览器既不支持ActiveX控件,也不支持XMLHttpRequest组件而进行的判断.其中XMLHttpRequest也不是window对象的标准属性,但可以用来判断浏览器是否支持XMLHttpRequest组件.</p>\n</li>\n<li><p>如果浏览器既不支持ActiveX控件,也不支持XMLHttpRequest组件,那么就不会对xmlHttpRequest变量赋值.</p>\n</li>\n</ol>\n<h3 id=\"二-创建HTTP请求\"><a href=\"#二-创建HTTP请求\" class=\"headerlink\" title=\"二.创建HTTP请求\"></a>二.创建HTTP请求</h3><ol>\n<li>创建了XMLHttpRequest对象之后，必须为XMLHttpRequest对象创建HTTP请求，用于说明XMLHttpRequest对象要从哪里获取数据。通常可以是网站中的数据,也可以是本地中其他文件中的数据。<br><strong>创建HTTP请求可以使用XMLHttpRequest对象的open()方法,其语法代码如下所示:</strong></li>\n</ol>\n<ul>\n<li><p>method：该参数用于指定HTTP的请求方法，一共有get、post、head、put、delete五种方法，常用的方法为get和post。</p>\n</li>\n<li><p>URL：该参数用于指定HTTP请求的URL地址，可以是绝对URL，也可以是相对URL。</p>\n</li>\n<li><p>flag：该参数为可选，参数值为布尔型。该参数用于指定是否使用异步方式。true表示异步、false表示同步，默认为true。</p>\n</li>\n<li><p>name：该参数为可选参数，用于输入用户名。如果服务器需要验证，则必须使用该参数。</p>\n</li>\n<li><p>password：该参数为可选，用于输入密码。若服务器需要验证，则必须使用该参数。</p>\n</li>\n</ul>\n<ol>\n<li>通常可以使用以下代码来访问一个网站文件的内容。</li>\n</ol>\n<p>xmlHttpRequest.open(“get”,”<a href=\"http://www.aspxfans.com/BookSupport/JavaScript/ajax.htm&quot;,true\">http://www.aspxfans.com/BookSupport/JavaScript/ajax.htm&quot;,true</a>);</p>\n<ol start=\"3\">\n<li>或者使用以下代码来访问一个本地文件内容：</li>\n</ol>\n<p>xmlHttpRequest.open(“get”,”ajax.htm”,true);</p>\n<ul>\n<li>注意：如果HTML文件放在Web服务器上，在Netscape浏览器中的JavaScript安全机制不允许与本机之外的主机进行通信。也就是说，使用open()方法只能打开与HTML文件在同一个服务器上的文件。而在IE浏览器中则无此限制（虽然可以打开其他服务器上的文件，但也会有警告提示）。</li>\n</ul>\n<h3 id=\"三-设置响应HTTP请求状态变化的函数\"><a href=\"#三-设置响应HTTP请求状态变化的函数\" class=\"headerlink\" title=\"三.设置响应HTTP请求状态变化的函数\"></a>三.设置响应HTTP请求状态变化的函数</h3><ol>\n<li>创建完HTTP请求之后，应该就可以将HTTP请求发送给Web服务器了。然而，发送HTTP请求的目的是为了接收从服务器中返回的数据。从创建XMLHttpRequest对象开始，到发送数据、接收数据、XMLHttpRequest对象一共会经历以下5中状态。</li>\n<li></li>\n</ol>\n<ul>\n<li>未初始化状态。在创建完XMLHttpRequest对象时，该对象处于未初始化状态，此时XMLHttpRequest对象的readyState属性值为0。</li>\n<li>初始化状态。在创建完XMLHttpRequest对象后使用open()方法创建了HTTP请求时，该对象处于初始化状态。此时XMLHttpRequest对象的readyState属性值为1。</li>\n<li>发送数据状态。在初始化XMLHttpRequest对象后，使用send()方法发送数据时，该对象处于发送数据状态，此时XMLHttpRequest对象的readyState属性值为2。</li>\n<li>接收数据状态。Web服务器接收完数据并进行处理完毕之后，向客户端传送返回的结果。此时，XMLHttpRequest对象处于接收数据状态，XMLHttpRequest对象的readyState属性值为3。</li>\n<li>完成状态。XMLHttpRequest对象接收数据完毕后，进入完成状态，此时XMLHttpRequest对象的readyState属性值为4。此时接收完毕后的数据存入在客户端计算机的内存中，可以使用responseText属性或responseXml属性来获取数据。</li>\n</ul>\n<ol start=\"3\">\n<li><p>只有在XMLHttpRequest对象完成了以上5个步骤之后，才可以获取从服务器端返回的数据。因此，如果要获得从服务器端返回的数据，就必须要先判断XMLHttpRequest对象的状态。</p>\n</li>\n<li><p>XMLHttpRequest对象可以响应readystatechange事件，该事件在XMLHttpRequest对象状态改变时（也就是readyState属性值改变时）激发。因此，可以通过该事件调用一个函数，并在该函数中判断XMLHttpRequest对象的readyState属性值。如果readyState属性值为4则使用responseText属性或responseXml属性来获取数据。具体代码如下所示：</p>\n<p> &#x2F;&#x2F;设置当XMLHttpRequest对象状态改变时调用的函数，注意函数名后面不要添加小括号<br> xmlHttpRequest.onreadystatechange &#x3D; getData;</p>\n<p> &#x2F;&#x2F;定义函数<br> function getData(){<br> &#x2F;&#x2F;判断XMLHttpRequest对象的readyState属性值是否为4，如果为4表示异步调用完成<br> if(xmlHttpRequest.readyState &#x3D;&#x3D; 4) {<br>     &#x2F;&#x2F;设置获取数据的语句<br> }<br> }</p>\n</li>\n</ol>\n<h3 id=\"四-设置获取服务器返回数据的语句\"><a href=\"#四-设置获取服务器返回数据的语句\" class=\"headerlink\" title=\"四.设置获取服务器返回数据的语句\"></a>四.设置获取服务器返回数据的语句</h3><ol>\n<li><p>如果XMLHttpRequest对象的readyState属性值等于4，表示异步调用过程完毕，就可以通过XMLHttpRequest对象的responseText属性或responseXml属性来获取数据。</p>\n</li>\n<li><p>但是，异步调用过程完毕，并不代表异步调用成功了，如果要判断异步调用是否成功，还要判断XMLHttpRequest对象的status属性值，只有该属性值为200，才表示异步调用成功，因此，要获取服务器返回数据的语句，还必须要先判断XMLHttpRequest对象的status属性值是否等于200，<br>  <strong>如以下代码所示：</strong></p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ruby\"><span class=\"hljs-keyword\">if</span>(xmlHttpRequst.status == <span class=\"hljs-number\">200</span>) &#123;<br>   document.write(xmlHttpRequest.responseText);<span class=\"hljs-regexp\">//</span>将返回结果以字符串形式输出<br>   /<span class=\"hljs-regexp\">/document.write(xmlHttpRequest.responseXML);/</span><span class=\"hljs-regexp\">/或者将返回结果以XML形式输出</span><br><span class=\"hljs-regexp\">&#125;</span><br></code></pre></td></tr></table></figure></li>\n<li><p>注意：如果HTML文件不是在Web服务器上运行，而是在本地运行，则xmlHttpRequest.status的返回值为0。因此，如果该文件在本地运行，则应该加上xmlHttpRequest.status &#x3D;&#x3D; 0的判断。</p>\n</li>\n</ol>\n<p><strong>通常将以上代码放在响应HTTP请求状态变化的函数体内，如以下代码所示</strong>       </p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ruby\">/<span class=\"hljs-regexp\">/设置当XMLHttpRequest对象状态改变时调用的函数，注意函数名后面不要添加小括号</span><br><span class=\"hljs-regexp\">xmlHttpRequest.onreadystatechange = getData;</span><br><span class=\"hljs-regexp\"> </span><br><span class=\"hljs-regexp\">/</span><span class=\"hljs-regexp\">/定义函数</span><br><span class=\"hljs-regexp\">function getData()&#123;</span><br><span class=\"hljs-regexp\">    /</span><span class=\"hljs-regexp\">/判断XMLHttpRequest对象的readyState属性值是否为4，如果为4表示异步调用完成</span><br><span class=\"hljs-regexp\">    if(xmlHttpRequest.readyState==4)&#123;</span><br><span class=\"hljs-regexp\">        if(xmlHttpRequest.status == 200 || xmlHttpRequest.status == 0)&#123;/</span><span class=\"hljs-regexp\">/设置获取数据的语句</span><br><span class=\"hljs-regexp\">            document.write(xmlHttpRequest.responseText);/</span><span class=\"hljs-regexp\">/将返回结果以字符串形式输出</span><br><span class=\"hljs-regexp\">            /</span><span class=\"hljs-regexp\">/docunment.write(xmlHttpRequest.responseXML);/</span><span class=\"hljs-regexp\">/或者将返回结果以XML形式输出</span><br><span class=\"hljs-regexp\">        &#125;</span><br><span class=\"hljs-regexp\">    &#125;</span><br><span class=\"hljs-regexp\">&#125;</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"五-发送HTTP请求\"><a href=\"#五-发送HTTP请求\" class=\"headerlink\" title=\"五.发送HTTP请求\"></a>五.发送HTTP请求</h3><ol>\n<li>在经过以上几个步骤的设置之后，就可以将HTTP请求发送到Web服务器上去了。发送HTTP请求可以使用XMLHttpRequest对象的send()方法。</li>\n</ol>\n<p>___ 其语法代码如下所示：__</p>\n<p>XMLHttpRequest.send(data);</p>\n<ol start=\"2\">\n<li>其中data是个可选参数，如果请求的数据不需要参数，即可以使用null来替代。data参数的格式与在URL中传递参数的格式类似，以下代码为一个send()方法中的data参数的示例：</li>\n</ol>\n<p>name&#x3D;myName&amp;value&#x3D;myValue</p>\n<ol start=\"3\">\n<li>只有在使用send()方法之后，XMLHttpRequest对象的readyState属性值才会开始改变，也才会激发readystatechange事件，并调用函数。</li>\n</ol>\n<h3 id=\"六-局部更新\"><a href=\"#六-局部更新\" class=\"headerlink\" title=\"六.局部更新\"></a>六.局部更新</h3><ol>\n<li>在通过Ajax的异步调用获得服务器端数据之后，可以使用JavaScript或DOM来将网页中的数据进行局部更新。</li>\n</ol>\n","site":{"data":{}},"wordcount":4999,"excerpt":"","more":"<h1 id=\"Ajax请求的五个步骤\"><a href=\"#Ajax请求的五个步骤\" class=\"headerlink\" title=\"Ajax请求的五个步骤\"></a>Ajax请求的五个步骤</h1><ul>\n<li><p>——Ajax简介——：ajax即异步 JavaScript 和XML。Ajax是一种用于创建快速动态网页的技术。通过在后台与服务器进行少量数据交换，Ajax可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。而传统的网页(不使用 Ajax)如果需要更新内容，必需重载整个网页面。</p>\n</li>\n<li><p>ajax的工作原理：客户端发送请求，请求交给xhr，xhr把请求提交给服务，服务器进行业务处理，服务器响应数据交给xhr对象，xhr对象接收数据，由javascript把数据写到页面上</p>\n</li>\n</ul>\n<h3 id=\"实现AJAX的基本步骤：\"><a href=\"#实现AJAX的基本步骤：\" class=\"headerlink\" title=\"实现AJAX的基本步骤：\"></a>实现AJAX的基本步骤：</h3><ul>\n<li>要完整实现一个AJAX异步调用和局部刷新,通常需要以下几个步骤:</li>\n</ul>\n<ol>\n<li>创建XMLHttpRequest对象,即创建一个异步调用对象。</li>\n<li>创建一个新的HTTP请求,并指定该HTTP请求的方法、URL及验证信息。</li>\n<li>设置响应HTTP请求状态变化的函数。</li>\n<li>发送HTTP请求。</li>\n<li>获取异步调用返回的数据。</li>\n<li>使用JavaScript和DOM实现局部刷新。</li>\n</ol>\n<h3 id=\"一-创建XMLHttpRequest对象\"><a href=\"#一-创建XMLHttpRequest对象\" class=\"headerlink\" title=\"一.创建XMLHttpRequest对象\"></a>一.创建XMLHttpRequest对象</h3><ol>\n<li>不同浏览器使用的异步调用对象有所不同，在IE浏览器中异步调用使用的是XMLHTTP组件中的XMLHttpRequest对象，而在Netscape、Firefox浏览器中则直接使用XMLHttpRequest组件。因此，在不同浏览器中创建XMLHttpRequest对象的方式都有所不同。</li>\n</ol>\n<ul>\n<li><p>在IE浏览器中创建XMLHttpRequest对象的方式为:<br> var xmlHttpRequest &#x3D; new ActiveXObject(“Microsoft.XMLHTTP”);</p>\n</li>\n<li><p>在Netscape浏览器中创建XMLHttpRequest对象的方式为:</p>\n</li>\n</ul>\n<p>var xmlHttpRequest &#x3D; new XMLHttpRequest();</p>\n<p><strong>由于无法确定用户使用的是什么浏览器,所以在创建XMLHttpRequest对象时,最好将以上两种方法都加上.如以下代码所示:</strong></p>\n <figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ruby\">var xmlHttpRequest;  <span class=\"hljs-regexp\">//</span>定义一个变量,用于存放XMLHttpRequest对象<br>   createXMLHttpRequst();   <span class=\"hljs-regexp\">//</span>调用创建对象的方法<br>   /<span class=\"hljs-regexp\">/创建XMLHttpRequest对象的方法 </span><br><span class=\"hljs-regexp\">   function createXMLHttpRequest()&#123;                                                 </span><br><span class=\"hljs-regexp\">       if(window.ActiveXObject) &#123;/</span><span class=\"hljs-regexp\">/判断是否是IE浏览器</span><br><span class=\"hljs-regexp\">           xmlHttpRequest = new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;);/</span><span class=\"hljs-regexp\">/创建IE的XMLHttpRequest对象</span><br><span class=\"hljs-regexp\">       &#125;else if(window.XMLHttpRequest)&#123;/</span><span class=\"hljs-regexp\">/判断是否是Netscape等其他支持XMLHttpRequest组件的浏览器</span><br><span class=\"hljs-regexp\">           xmlHttpRequest = new XMLHttpRequest();/</span><span class=\"hljs-regexp\">/创建其他浏览器上的XMLHttpRequest对象</span><br><span class=\"hljs-regexp\">       &#125;</span><br><span class=\"hljs-regexp\">   &#125; </span><br></code></pre></td></tr></table></figure>\n<ol>\n<li><p>“if(window.ActiveXObject)”用来判断是否使用IE浏览器.其中ActiveXOject并不是Windows对象的标准属性,而是IE浏览器中专有的属性,可以用于判断浏览器是否支持ActiveX控件.通常只有IE浏览器或以IE浏览器为核心的浏览器才能支持Active控件.</p>\n</li>\n<li><p>“else if(window.XMLHttpRequest)”是为了防止一些浏览器既不支持ActiveX控件,也不支持XMLHttpRequest组件而进行的判断.其中XMLHttpRequest也不是window对象的标准属性,但可以用来判断浏览器是否支持XMLHttpRequest组件.</p>\n</li>\n<li><p>如果浏览器既不支持ActiveX控件,也不支持XMLHttpRequest组件,那么就不会对xmlHttpRequest变量赋值.</p>\n</li>\n</ol>\n<h3 id=\"二-创建HTTP请求\"><a href=\"#二-创建HTTP请求\" class=\"headerlink\" title=\"二.创建HTTP请求\"></a>二.创建HTTP请求</h3><ol>\n<li>创建了XMLHttpRequest对象之后，必须为XMLHttpRequest对象创建HTTP请求，用于说明XMLHttpRequest对象要从哪里获取数据。通常可以是网站中的数据,也可以是本地中其他文件中的数据。<br><strong>创建HTTP请求可以使用XMLHttpRequest对象的open()方法,其语法代码如下所示:</strong></li>\n</ol>\n<ul>\n<li><p>method：该参数用于指定HTTP的请求方法，一共有get、post、head、put、delete五种方法，常用的方法为get和post。</p>\n</li>\n<li><p>URL：该参数用于指定HTTP请求的URL地址，可以是绝对URL，也可以是相对URL。</p>\n</li>\n<li><p>flag：该参数为可选，参数值为布尔型。该参数用于指定是否使用异步方式。true表示异步、false表示同步，默认为true。</p>\n</li>\n<li><p>name：该参数为可选参数，用于输入用户名。如果服务器需要验证，则必须使用该参数。</p>\n</li>\n<li><p>password：该参数为可选，用于输入密码。若服务器需要验证，则必须使用该参数。</p>\n</li>\n</ul>\n<ol>\n<li>通常可以使用以下代码来访问一个网站文件的内容。</li>\n</ol>\n<p>xmlHttpRequest.open(“get”,”<a href=\"http://www.aspxfans.com/BookSupport/JavaScript/ajax.htm&quot;,true\">http://www.aspxfans.com/BookSupport/JavaScript/ajax.htm&quot;,true</a>);</p>\n<ol start=\"3\">\n<li>或者使用以下代码来访问一个本地文件内容：</li>\n</ol>\n<p>xmlHttpRequest.open(“get”,”ajax.htm”,true);</p>\n<ul>\n<li>注意：如果HTML文件放在Web服务器上，在Netscape浏览器中的JavaScript安全机制不允许与本机之外的主机进行通信。也就是说，使用open()方法只能打开与HTML文件在同一个服务器上的文件。而在IE浏览器中则无此限制（虽然可以打开其他服务器上的文件，但也会有警告提示）。</li>\n</ul>\n<h3 id=\"三-设置响应HTTP请求状态变化的函数\"><a href=\"#三-设置响应HTTP请求状态变化的函数\" class=\"headerlink\" title=\"三.设置响应HTTP请求状态变化的函数\"></a>三.设置响应HTTP请求状态变化的函数</h3><ol>\n<li>创建完HTTP请求之后，应该就可以将HTTP请求发送给Web服务器了。然而，发送HTTP请求的目的是为了接收从服务器中返回的数据。从创建XMLHttpRequest对象开始，到发送数据、接收数据、XMLHttpRequest对象一共会经历以下5中状态。</li>\n<li></li>\n</ol>\n<ul>\n<li>未初始化状态。在创建完XMLHttpRequest对象时，该对象处于未初始化状态，此时XMLHttpRequest对象的readyState属性值为0。</li>\n<li>初始化状态。在创建完XMLHttpRequest对象后使用open()方法创建了HTTP请求时，该对象处于初始化状态。此时XMLHttpRequest对象的readyState属性值为1。</li>\n<li>发送数据状态。在初始化XMLHttpRequest对象后，使用send()方法发送数据时，该对象处于发送数据状态，此时XMLHttpRequest对象的readyState属性值为2。</li>\n<li>接收数据状态。Web服务器接收完数据并进行处理完毕之后，向客户端传送返回的结果。此时，XMLHttpRequest对象处于接收数据状态，XMLHttpRequest对象的readyState属性值为3。</li>\n<li>完成状态。XMLHttpRequest对象接收数据完毕后，进入完成状态，此时XMLHttpRequest对象的readyState属性值为4。此时接收完毕后的数据存入在客户端计算机的内存中，可以使用responseText属性或responseXml属性来获取数据。</li>\n</ul>\n<ol start=\"3\">\n<li><p>只有在XMLHttpRequest对象完成了以上5个步骤之后，才可以获取从服务器端返回的数据。因此，如果要获得从服务器端返回的数据，就必须要先判断XMLHttpRequest对象的状态。</p>\n</li>\n<li><p>XMLHttpRequest对象可以响应readystatechange事件，该事件在XMLHttpRequest对象状态改变时（也就是readyState属性值改变时）激发。因此，可以通过该事件调用一个函数，并在该函数中判断XMLHttpRequest对象的readyState属性值。如果readyState属性值为4则使用responseText属性或responseXml属性来获取数据。具体代码如下所示：</p>\n<p> &#x2F;&#x2F;设置当XMLHttpRequest对象状态改变时调用的函数，注意函数名后面不要添加小括号<br> xmlHttpRequest.onreadystatechange &#x3D; getData;</p>\n<p> &#x2F;&#x2F;定义函数<br> function getData(){<br> &#x2F;&#x2F;判断XMLHttpRequest对象的readyState属性值是否为4，如果为4表示异步调用完成<br> if(xmlHttpRequest.readyState &#x3D;&#x3D; 4) {<br>     &#x2F;&#x2F;设置获取数据的语句<br> }<br> }</p>\n</li>\n</ol>\n<h3 id=\"四-设置获取服务器返回数据的语句\"><a href=\"#四-设置获取服务器返回数据的语句\" class=\"headerlink\" title=\"四.设置获取服务器返回数据的语句\"></a>四.设置获取服务器返回数据的语句</h3><ol>\n<li><p>如果XMLHttpRequest对象的readyState属性值等于4，表示异步调用过程完毕，就可以通过XMLHttpRequest对象的responseText属性或responseXml属性来获取数据。</p>\n</li>\n<li><p>但是，异步调用过程完毕，并不代表异步调用成功了，如果要判断异步调用是否成功，还要判断XMLHttpRequest对象的status属性值，只有该属性值为200，才表示异步调用成功，因此，要获取服务器返回数据的语句，还必须要先判断XMLHttpRequest对象的status属性值是否等于200，<br>  <strong>如以下代码所示：</strong></p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ruby\"><span class=\"hljs-keyword\">if</span>(xmlHttpRequst.status == <span class=\"hljs-number\">200</span>) &#123;<br>   document.write(xmlHttpRequest.responseText);<span class=\"hljs-regexp\">//</span>将返回结果以字符串形式输出<br>   /<span class=\"hljs-regexp\">/document.write(xmlHttpRequest.responseXML);/</span><span class=\"hljs-regexp\">/或者将返回结果以XML形式输出</span><br><span class=\"hljs-regexp\">&#125;</span><br></code></pre></td></tr></table></figure></li>\n<li><p>注意：如果HTML文件不是在Web服务器上运行，而是在本地运行，则xmlHttpRequest.status的返回值为0。因此，如果该文件在本地运行，则应该加上xmlHttpRequest.status &#x3D;&#x3D; 0的判断。</p>\n</li>\n</ol>\n<p><strong>通常将以上代码放在响应HTTP请求状态变化的函数体内，如以下代码所示</strong>       </p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ruby\">/<span class=\"hljs-regexp\">/设置当XMLHttpRequest对象状态改变时调用的函数，注意函数名后面不要添加小括号</span><br><span class=\"hljs-regexp\">xmlHttpRequest.onreadystatechange = getData;</span><br><span class=\"hljs-regexp\"> </span><br><span class=\"hljs-regexp\">/</span><span class=\"hljs-regexp\">/定义函数</span><br><span class=\"hljs-regexp\">function getData()&#123;</span><br><span class=\"hljs-regexp\">    /</span><span class=\"hljs-regexp\">/判断XMLHttpRequest对象的readyState属性值是否为4，如果为4表示异步调用完成</span><br><span class=\"hljs-regexp\">    if(xmlHttpRequest.readyState==4)&#123;</span><br><span class=\"hljs-regexp\">        if(xmlHttpRequest.status == 200 || xmlHttpRequest.status == 0)&#123;/</span><span class=\"hljs-regexp\">/设置获取数据的语句</span><br><span class=\"hljs-regexp\">            document.write(xmlHttpRequest.responseText);/</span><span class=\"hljs-regexp\">/将返回结果以字符串形式输出</span><br><span class=\"hljs-regexp\">            /</span><span class=\"hljs-regexp\">/docunment.write(xmlHttpRequest.responseXML);/</span><span class=\"hljs-regexp\">/或者将返回结果以XML形式输出</span><br><span class=\"hljs-regexp\">        &#125;</span><br><span class=\"hljs-regexp\">    &#125;</span><br><span class=\"hljs-regexp\">&#125;</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"五-发送HTTP请求\"><a href=\"#五-发送HTTP请求\" class=\"headerlink\" title=\"五.发送HTTP请求\"></a>五.发送HTTP请求</h3><ol>\n<li>在经过以上几个步骤的设置之后，就可以将HTTP请求发送到Web服务器上去了。发送HTTP请求可以使用XMLHttpRequest对象的send()方法。</li>\n</ol>\n<p>___ 其语法代码如下所示：__</p>\n<p>XMLHttpRequest.send(data);</p>\n<ol start=\"2\">\n<li>其中data是个可选参数，如果请求的数据不需要参数，即可以使用null来替代。data参数的格式与在URL中传递参数的格式类似，以下代码为一个send()方法中的data参数的示例：</li>\n</ol>\n<p>name&#x3D;myName&amp;value&#x3D;myValue</p>\n<ol start=\"3\">\n<li>只有在使用send()方法之后，XMLHttpRequest对象的readyState属性值才会开始改变，也才会激发readystatechange事件，并调用函数。</li>\n</ol>\n<h3 id=\"六-局部更新\"><a href=\"#六-局部更新\" class=\"headerlink\" title=\"六.局部更新\"></a>六.局部更新</h3><ol>\n<li>在通过Ajax的异步调用获得服务器端数据之后，可以使用JavaScript或DOM来将网页中的数据进行局部更新。</li>\n</ol>\n"},{"title":"10s支付跳转案例","index_img":"/img/10003.jpg","date":"2023-02-14T16:00:00.000Z","_content":"## 一.这是点击跳转的页面\n\n### 逻辑：获取支付的 button 按钮，绑定一个 onclick 点击事件，绑定一个跳转页面，如果点击支付就判断为真就跳转到相应页面\n### style 代码\n        div {\n            width: 200px;\n            height: 280px;\n            background-color: #999;\n            padding: 20px;\n            margin: 0 auto;\n            text-align: center;\n        }\n\n        button {\n            margin: 25px 15px;\n        }      \n### div 代码\n      <p>商品： wed前端课程</p>\n        <p>价格： 198元</p>\n        <p>内容： HTML·css ·js</p>\n        <p>地址： 广州白云区</p>\n\n        <p>\n            <button>取消</button>\n            <button>支付</button>\n        </p>\n### //逻辑：点击支付，出现确认  \n### script 代码\n      document.getElementsByTagName('button')[1].onclick = function () {\n            let res = window.confirm('您确定要支付吗？');\n            if (res) {\n                location.href = './跳转页面.html'\n            }\n        }\n## 二.这是跳转页面\n\n### 逻辑：加载页面时，触发定时器倒计时 10s，绑定链接 10s 后自动跳转相应页面。也可以直接点击立即跳转按钮，进行跳转。\n### style部分代码\n        .one {\n            width: 500px;\n            padding: 20px;\n            margin: 0 auto;\n        }\n        .one span {\n            font-size: 30px;\n            color: red;\n        }     \n### div 代码\n    <div class=\"one\">\n        <h1>恭喜您，支付成功</h1>\n        <span>10</span>秒后自动返回首页\n        <p> <button>立即返回</button></p>\n    </div>\n### script 代码\n#### 逻辑：加载页面时，触发定时器 10s\n        window.onload = function () {\n            let timer = 10;\n            setInterval(() => {\n                timer--;\n                document.getElementsByTagName('span')[0].innerHTML = timer;\n                if (timer == 0) {\n                    location.href = 'https://www.runoob.com/w3c/w3c-tutorial.html';\n                }\n            }, 1000)\n        }\n        document.getElementsByTagName('button')[0].onclick = function () {\n            location.href = 'https://www.runoob.com/w3c/w3c-tutorial.html';\n        }\n      \n      \n\n\n","source":"_posts/10s支付跳转案例.md","raw":"---\ntitle: 10s支付跳转案例\ntags: [telescope]\nindex_img: /img/10003.jpg\ndate: 2023-2-15 \n---\n## 一.这是点击跳转的页面\n\n### 逻辑：获取支付的 button 按钮，绑定一个 onclick 点击事件，绑定一个跳转页面，如果点击支付就判断为真就跳转到相应页面\n### style 代码\n        div {\n            width: 200px;\n            height: 280px;\n            background-color: #999;\n            padding: 20px;\n            margin: 0 auto;\n            text-align: center;\n        }\n\n        button {\n            margin: 25px 15px;\n        }      \n### div 代码\n      <p>商品： wed前端课程</p>\n        <p>价格： 198元</p>\n        <p>内容： HTML·css ·js</p>\n        <p>地址： 广州白云区</p>\n\n        <p>\n            <button>取消</button>\n            <button>支付</button>\n        </p>\n### //逻辑：点击支付，出现确认  \n### script 代码\n      document.getElementsByTagName('button')[1].onclick = function () {\n            let res = window.confirm('您确定要支付吗？');\n            if (res) {\n                location.href = './跳转页面.html'\n            }\n        }\n## 二.这是跳转页面\n\n### 逻辑：加载页面时，触发定时器倒计时 10s，绑定链接 10s 后自动跳转相应页面。也可以直接点击立即跳转按钮，进行跳转。\n### style部分代码\n        .one {\n            width: 500px;\n            padding: 20px;\n            margin: 0 auto;\n        }\n        .one span {\n            font-size: 30px;\n            color: red;\n        }     \n### div 代码\n    <div class=\"one\">\n        <h1>恭喜您，支付成功</h1>\n        <span>10</span>秒后自动返回首页\n        <p> <button>立即返回</button></p>\n    </div>\n### script 代码\n#### 逻辑：加载页面时，触发定时器 10s\n        window.onload = function () {\n            let timer = 10;\n            setInterval(() => {\n                timer--;\n                document.getElementsByTagName('span')[0].innerHTML = timer;\n                if (timer == 0) {\n                    location.href = 'https://www.runoob.com/w3c/w3c-tutorial.html';\n                }\n            }, 1000)\n        }\n        document.getElementsByTagName('button')[0].onclick = function () {\n            location.href = 'https://www.runoob.com/w3c/w3c-tutorial.html';\n        }\n      \n      \n\n\n","slug":"10s支付跳转案例","published":1,"updated":"2023-02-18T03:03:19.669Z","_id":"cle073ar5000080sv02higpoz","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"一-这是点击跳转的页面\"><a href=\"#一-这是点击跳转的页面\" class=\"headerlink\" title=\"一.这是点击跳转的页面\"></a>一.这是点击跳转的页面</h2><h3 id=\"逻辑：获取支付的-button-按钮，绑定一个-onclick-点击事件，绑定一个跳转页面，如果点击支付就判断为真就跳转到相应页面\"><a href=\"#逻辑：获取支付的-button-按钮，绑定一个-onclick-点击事件，绑定一个跳转页面，如果点击支付就判断为真就跳转到相应页面\" class=\"headerlink\" title=\"逻辑：获取支付的 button 按钮，绑定一个 onclick 点击事件，绑定一个跳转页面，如果点击支付就判断为真就跳转到相应页面\"></a>逻辑：获取支付的 button 按钮，绑定一个 onclick 点击事件，绑定一个跳转页面，如果点击支付就判断为真就跳转到相应页面</h3><h3 id=\"style-代码\"><a href=\"#style-代码\" class=\"headerlink\" title=\"style 代码\"></a>style 代码</h3><pre><code class=\"hljs\">    div &#123;\n        width: 200px;\n        height: 280px;\n        background-color: #999;\n        padding: 20px;\n        margin: 0 auto;\n        text-align: center;\n    &#125;\n\n    button &#123;\n        margin: 25px 15px;\n    &#125;      \n</code></pre>\n<h3 id=\"div-代码\"><a href=\"#div-代码\" class=\"headerlink\" title=\"div 代码\"></a>div 代码</h3><pre><code class=\"hljs\">  &lt;p&gt;商品： wed前端课程&lt;/p&gt;\n    &lt;p&gt;价格： 198元&lt;/p&gt;\n    &lt;p&gt;内容： HTML·css ·js&lt;/p&gt;\n    &lt;p&gt;地址： 广州白云区&lt;/p&gt;\n\n    &lt;p&gt;\n        &lt;button&gt;取消&lt;/button&gt;\n        &lt;button&gt;支付&lt;/button&gt;\n    &lt;/p&gt;\n</code></pre>\n<h3 id=\"x2F-x2F-逻辑：点击支付，出现确认\"><a href=\"#x2F-x2F-逻辑：点击支付，出现确认\" class=\"headerlink\" title=\"&#x2F;&#x2F;逻辑：点击支付，出现确认\"></a>&#x2F;&#x2F;逻辑：点击支付，出现确认</h3><h3 id=\"script-代码\"><a href=\"#script-代码\" class=\"headerlink\" title=\"script 代码\"></a>script 代码</h3><pre><code class=\"hljs\">  document.getElementsByTagName(&#39;button&#39;)[1].onclick = function () &#123;\n        let res = window.confirm(&#39;您确定要支付吗？&#39;);\n        if (res) &#123;\n            location.href = &#39;./跳转页面.html&#39;\n        &#125;\n    &#125;\n</code></pre>\n<h2 id=\"二-这是跳转页面\"><a href=\"#二-这是跳转页面\" class=\"headerlink\" title=\"二.这是跳转页面\"></a>二.这是跳转页面</h2><h3 id=\"逻辑：加载页面时，触发定时器倒计时-10s，绑定链接-10s-后自动跳转相应页面。也可以直接点击立即跳转按钮，进行跳转。\"><a href=\"#逻辑：加载页面时，触发定时器倒计时-10s，绑定链接-10s-后自动跳转相应页面。也可以直接点击立即跳转按钮，进行跳转。\" class=\"headerlink\" title=\"逻辑：加载页面时，触发定时器倒计时 10s，绑定链接 10s 后自动跳转相应页面。也可以直接点击立即跳转按钮，进行跳转。\"></a>逻辑：加载页面时，触发定时器倒计时 10s，绑定链接 10s 后自动跳转相应页面。也可以直接点击立即跳转按钮，进行跳转。</h3><h3 id=\"style部分代码\"><a href=\"#style部分代码\" class=\"headerlink\" title=\"style部分代码\"></a>style部分代码</h3><pre><code class=\"hljs\">    .one &#123;\n        width: 500px;\n        padding: 20px;\n        margin: 0 auto;\n    &#125;\n    .one span &#123;\n        font-size: 30px;\n        color: red;\n    &#125;     \n</code></pre>\n<h3 id=\"div-代码-1\"><a href=\"#div-代码-1\" class=\"headerlink\" title=\"div 代码\"></a>div 代码</h3><pre><code class=\"hljs\">&lt;div class=&quot;one&quot;&gt;\n    &lt;h1&gt;恭喜您，支付成功&lt;/h1&gt;\n    &lt;span&gt;10&lt;/span&gt;秒后自动返回首页\n    &lt;p&gt; &lt;button&gt;立即返回&lt;/button&gt;&lt;/p&gt;\n&lt;/div&gt;\n</code></pre>\n<h3 id=\"script-代码-1\"><a href=\"#script-代码-1\" class=\"headerlink\" title=\"script 代码\"></a>script 代码</h3><h4 id=\"逻辑：加载页面时，触发定时器-10s\"><a href=\"#逻辑：加载页面时，触发定时器-10s\" class=\"headerlink\" title=\"逻辑：加载页面时，触发定时器 10s\"></a>逻辑：加载页面时，触发定时器 10s</h4><pre><code class=\"hljs\">    window.onload = function () &#123;\n        let timer = 10;\n        setInterval(() =&gt; &#123;\n            timer--;\n            document.getElementsByTagName(&#39;span&#39;)[0].innerHTML = timer;\n            if (timer == 0) &#123;\n                location.href = &#39;https://www.runoob.com/w3c/w3c-tutorial.html&#39;;\n            &#125;\n        &#125;, 1000)\n    &#125;\n    document.getElementsByTagName(&#39;button&#39;)[0].onclick = function () &#123;\n        location.href = &#39;https://www.runoob.com/w3c/w3c-tutorial.html&#39;;\n    &#125;\n  \n  \n</code></pre>\n","site":{"data":{}},"wordcount":1393,"excerpt":"","more":"<h2 id=\"一-这是点击跳转的页面\"><a href=\"#一-这是点击跳转的页面\" class=\"headerlink\" title=\"一.这是点击跳转的页面\"></a>一.这是点击跳转的页面</h2><h3 id=\"逻辑：获取支付的-button-按钮，绑定一个-onclick-点击事件，绑定一个跳转页面，如果点击支付就判断为真就跳转到相应页面\"><a href=\"#逻辑：获取支付的-button-按钮，绑定一个-onclick-点击事件，绑定一个跳转页面，如果点击支付就判断为真就跳转到相应页面\" class=\"headerlink\" title=\"逻辑：获取支付的 button 按钮，绑定一个 onclick 点击事件，绑定一个跳转页面，如果点击支付就判断为真就跳转到相应页面\"></a>逻辑：获取支付的 button 按钮，绑定一个 onclick 点击事件，绑定一个跳转页面，如果点击支付就判断为真就跳转到相应页面</h3><h3 id=\"style-代码\"><a href=\"#style-代码\" class=\"headerlink\" title=\"style 代码\"></a>style 代码</h3><pre><code>    div &#123;\n        width: 200px;\n        height: 280px;\n        background-color: #999;\n        padding: 20px;\n        margin: 0 auto;\n        text-align: center;\n    &#125;\n\n    button &#123;\n        margin: 25px 15px;\n    &#125;      \n</code></pre>\n<h3 id=\"div-代码\"><a href=\"#div-代码\" class=\"headerlink\" title=\"div 代码\"></a>div 代码</h3><pre><code>  &lt;p&gt;商品： wed前端课程&lt;/p&gt;\n    &lt;p&gt;价格： 198元&lt;/p&gt;\n    &lt;p&gt;内容： HTML·css ·js&lt;/p&gt;\n    &lt;p&gt;地址： 广州白云区&lt;/p&gt;\n\n    &lt;p&gt;\n        &lt;button&gt;取消&lt;/button&gt;\n        &lt;button&gt;支付&lt;/button&gt;\n    &lt;/p&gt;\n</code></pre>\n<h3 id=\"x2F-x2F-逻辑：点击支付，出现确认\"><a href=\"#x2F-x2F-逻辑：点击支付，出现确认\" class=\"headerlink\" title=\"&#x2F;&#x2F;逻辑：点击支付，出现确认\"></a>&#x2F;&#x2F;逻辑：点击支付，出现确认</h3><h3 id=\"script-代码\"><a href=\"#script-代码\" class=\"headerlink\" title=\"script 代码\"></a>script 代码</h3><pre><code>  document.getElementsByTagName(&#39;button&#39;)[1].onclick = function () &#123;\n        let res = window.confirm(&#39;您确定要支付吗？&#39;);\n        if (res) &#123;\n            location.href = &#39;./跳转页面.html&#39;\n        &#125;\n    &#125;\n</code></pre>\n<h2 id=\"二-这是跳转页面\"><a href=\"#二-这是跳转页面\" class=\"headerlink\" title=\"二.这是跳转页面\"></a>二.这是跳转页面</h2><h3 id=\"逻辑：加载页面时，触发定时器倒计时-10s，绑定链接-10s-后自动跳转相应页面。也可以直接点击立即跳转按钮，进行跳转。\"><a href=\"#逻辑：加载页面时，触发定时器倒计时-10s，绑定链接-10s-后自动跳转相应页面。也可以直接点击立即跳转按钮，进行跳转。\" class=\"headerlink\" title=\"逻辑：加载页面时，触发定时器倒计时 10s，绑定链接 10s 后自动跳转相应页面。也可以直接点击立即跳转按钮，进行跳转。\"></a>逻辑：加载页面时，触发定时器倒计时 10s，绑定链接 10s 后自动跳转相应页面。也可以直接点击立即跳转按钮，进行跳转。</h3><h3 id=\"style部分代码\"><a href=\"#style部分代码\" class=\"headerlink\" title=\"style部分代码\"></a>style部分代码</h3><pre><code>    .one &#123;\n        width: 500px;\n        padding: 20px;\n        margin: 0 auto;\n    &#125;\n    .one span &#123;\n        font-size: 30px;\n        color: red;\n    &#125;     \n</code></pre>\n<h3 id=\"div-代码-1\"><a href=\"#div-代码-1\" class=\"headerlink\" title=\"div 代码\"></a>div 代码</h3><pre><code>&lt;div class=&quot;one&quot;&gt;\n    &lt;h1&gt;恭喜您，支付成功&lt;/h1&gt;\n    &lt;span&gt;10&lt;/span&gt;秒后自动返回首页\n    &lt;p&gt; &lt;button&gt;立即返回&lt;/button&gt;&lt;/p&gt;\n&lt;/div&gt;\n</code></pre>\n<h3 id=\"script-代码-1\"><a href=\"#script-代码-1\" class=\"headerlink\" title=\"script 代码\"></a>script 代码</h3><h4 id=\"逻辑：加载页面时，触发定时器-10s\"><a href=\"#逻辑：加载页面时，触发定时器-10s\" class=\"headerlink\" title=\"逻辑：加载页面时，触发定时器 10s\"></a>逻辑：加载页面时，触发定时器 10s</h4><pre><code>    window.onload = function () &#123;\n        let timer = 10;\n        setInterval(() =&gt; &#123;\n            timer--;\n            document.getElementsByTagName(&#39;span&#39;)[0].innerHTML = timer;\n            if (timer == 0) &#123;\n                location.href = &#39;https://www.runoob.com/w3c/w3c-tutorial.html&#39;;\n            &#125;\n        &#125;, 1000)\n    &#125;\n    document.getElementsByTagName(&#39;button&#39;)[0].onclick = function () &#123;\n        location.href = &#39;https://www.runoob.com/w3c/w3c-tutorial.html&#39;;\n    &#125;\n  \n  \n</code></pre>\n"},{"title":"节流防抖案例","index_img":"/img/jl.png","date":"2023-02-16T16:00:00.000Z","_content":"\n # 防抖 （多次触发 只执行最后一次）\n ## 逻辑： 高频率触发的事件,在指定的单位时间内，只响应最后一次，如果在指定的时间内再次触发，则重新计算时间\n ## 防抖类似于英雄联盟回城6秒，如果回城中被打断，再次回城需要再等6秒 (如：搜索框搜索输入)\n  ### style 部分代码\n  ```\n    div {\n      width:200px;\n      height:200px;\n      background-color:skyblue;\n    }\n  ```\n\n\n### div 部分代码 \n\n ``` \n <input type=\"text\">\n  <div> </div>\n  ```\n\n ### scrip t部分代码\n```\n    //获取元素\n    let input = document.getElementsByTagName('input')[0]\n    //防抖\n    let timerId = null\n    input.onkeyup =function () {\n\n      if (timerId !== null) {\n        clearTimeout(timerId)\n      }\n      timerId = setTimeout(() => {\n        console.log(\"防抖\");\n      }, 2000)\n    }\n```\n# 2.节流 （规定时间内 只触发一次）\n\n ## 逻辑： 高频率触发的事件,在指定的单位时间内，只响应第一次\n ## 节流类似于英雄联盟里的英雄平A   一定是内点击多次只进行攻击一次 (如：搜索框搜索输入)\n ### script 部分代码\n\n ```\n    //获取元素\n    let div = document.getElementsByTagName('div')[0]\n    //节流\n    let timerout = 0\n    div.onmousemove = function () {\n      if (timerout !== 0) {\n        return\n      }\n      timerout = setTimeout(() => {\n        console.log(\"节流\");\n        timerout = 0\n      }, 2000)\n    }\n```\n\n\n\n","source":"_posts/防抖节流案列.md","raw":"---\ntitle: 节流防抖案例\ntags: [telescope]\nindex_img: /img/jl.png\ndate: 2023-2-17\n---\n\n # 防抖 （多次触发 只执行最后一次）\n ## 逻辑： 高频率触发的事件,在指定的单位时间内，只响应最后一次，如果在指定的时间内再次触发，则重新计算时间\n ## 防抖类似于英雄联盟回城6秒，如果回城中被打断，再次回城需要再等6秒 (如：搜索框搜索输入)\n  ### style 部分代码\n  ```\n    div {\n      width:200px;\n      height:200px;\n      background-color:skyblue;\n    }\n  ```\n\n\n### div 部分代码 \n\n ``` \n <input type=\"text\">\n  <div> </div>\n  ```\n\n ### scrip t部分代码\n```\n    //获取元素\n    let input = document.getElementsByTagName('input')[0]\n    //防抖\n    let timerId = null\n    input.onkeyup =function () {\n\n      if (timerId !== null) {\n        clearTimeout(timerId)\n      }\n      timerId = setTimeout(() => {\n        console.log(\"防抖\");\n      }, 2000)\n    }\n```\n# 2.节流 （规定时间内 只触发一次）\n\n ## 逻辑： 高频率触发的事件,在指定的单位时间内，只响应第一次\n ## 节流类似于英雄联盟里的英雄平A   一定是内点击多次只进行攻击一次 (如：搜索框搜索输入)\n ### script 部分代码\n\n ```\n    //获取元素\n    let div = document.getElementsByTagName('div')[0]\n    //节流\n    let timerout = 0\n    div.onmousemove = function () {\n      if (timerout !== 0) {\n        return\n      }\n      timerout = setTimeout(() => {\n        console.log(\"节流\");\n        timerout = 0\n      }, 2000)\n    }\n```\n\n\n\n","slug":"防抖节流案列","published":1,"updated":"2023-02-18T00:16:31.333Z","_id":"cle92q35n000058svanrx78ki","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"防抖-（多次触发-只执行最后一次）\"><a href=\"#防抖-（多次触发-只执行最后一次）\" class=\"headerlink\" title=\"防抖 （多次触发 只执行最后一次）\"></a>防抖 （多次触发 只执行最后一次）</h1><h2 id=\"逻辑：-高频率触发的事件-在指定的单位时间内，只响应最后一次，如果在指定的时间内再次触发，则重新计算时间\"><a href=\"#逻辑：-高频率触发的事件-在指定的单位时间内，只响应最后一次，如果在指定的时间内再次触发，则重新计算时间\" class=\"headerlink\" title=\"逻辑： 高频率触发的事件,在指定的单位时间内，只响应最后一次，如果在指定的时间内再次触发，则重新计算时间\"></a>逻辑： 高频率触发的事件,在指定的单位时间内，只响应最后一次，如果在指定的时间内再次触发，则重新计算时间</h2><h2 id=\"防抖类似于英雄联盟回城6秒，如果回城中被打断，再次回城需要再等6秒-如：搜索框搜索输入\"><a href=\"#防抖类似于英雄联盟回城6秒，如果回城中被打断，再次回城需要再等6秒-如：搜索框搜索输入\" class=\"headerlink\" title=\"防抖类似于英雄联盟回城6秒，如果回城中被打断，再次回城需要再等6秒 (如：搜索框搜索输入)\"></a>防抖类似于英雄联盟回城6秒，如果回城中被打断，再次回城需要再等6秒 (如：搜索框搜索输入)</h2><h3 id=\"style-部分代码\"><a href=\"#style-部分代码\" class=\"headerlink\" title=\"style 部分代码\"></a>style 部分代码</h3>  <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-tag\">div</span> &#123;<br>  <span class=\"hljs-attribute\">width</span>:<span class=\"hljs-number\">200px</span>;<br>  <span class=\"hljs-attribute\">height</span>:<span class=\"hljs-number\">200px</span>;<br>  <span class=\"hljs-attribute\">background-color</span>:skyblue;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n<h3 id=\"div-部分代码\"><a href=\"#div-部分代码\" class=\"headerlink\" title=\"div 部分代码\"></a>div 部分代码</h3> <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span>&gt;</span><br> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span> <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"scrip-t部分代码\"><a href=\"#scrip-t部分代码\" class=\"headerlink\" title=\"scrip t部分代码\"></a>scrip t部分代码</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//获取元素</span><br><span class=\"hljs-keyword\">let</span> input = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementsByTagName</span>(<span class=\"hljs-string\">&#x27;input&#x27;</span>)[<span class=\"hljs-number\">0</span>]<br><span class=\"hljs-comment\">//防抖</span><br><span class=\"hljs-keyword\">let</span> timerId = <span class=\"hljs-literal\">null</span><br>input.<span class=\"hljs-property\">onkeyup</span> =<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br><br>  <span class=\"hljs-keyword\">if</span> (timerId !== <span class=\"hljs-literal\">null</span>) &#123;<br>    <span class=\"hljs-built_in\">clearTimeout</span>(timerId)<br>  &#125;<br>  timerId = <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> &#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;防抖&quot;</span>);<br>  &#125;, <span class=\"hljs-number\">2000</span>)<br>&#125;<br></code></pre></td></tr></table></figure>\n<h1 id=\"2-节流-（规定时间内-只触发一次）\"><a href=\"#2-节流-（规定时间内-只触发一次）\" class=\"headerlink\" title=\"2.节流 （规定时间内 只触发一次）\"></a>2.节流 （规定时间内 只触发一次）</h1><h2 id=\"逻辑：-高频率触发的事件-在指定的单位时间内，只响应第一次\"><a href=\"#逻辑：-高频率触发的事件-在指定的单位时间内，只响应第一次\" class=\"headerlink\" title=\"逻辑： 高频率触发的事件,在指定的单位时间内，只响应第一次\"></a>逻辑： 高频率触发的事件,在指定的单位时间内，只响应第一次</h2><h2 id=\"节流类似于英雄联盟里的英雄平A-一定是内点击多次只进行攻击一次-如：搜索框搜索输入\"><a href=\"#节流类似于英雄联盟里的英雄平A-一定是内点击多次只进行攻击一次-如：搜索框搜索输入\" class=\"headerlink\" title=\"节流类似于英雄联盟里的英雄平A   一定是内点击多次只进行攻击一次 (如：搜索框搜索输入)\"></a>节流类似于英雄联盟里的英雄平A   一定是内点击多次只进行攻击一次 (如：搜索框搜索输入)</h2><h3 id=\"script-部分代码\"><a href=\"#script-部分代码\" class=\"headerlink\" title=\"script 部分代码\"></a>script 部分代码</h3> <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//获取元素</span><br><span class=\"hljs-keyword\">let</span> div = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementsByTagName</span>(<span class=\"hljs-string\">&#x27;div&#x27;</span>)[<span class=\"hljs-number\">0</span>]<br><span class=\"hljs-comment\">//节流</span><br><span class=\"hljs-keyword\">let</span> timerout = <span class=\"hljs-number\">0</span><br>div.<span class=\"hljs-property\">onmousemove</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>  <span class=\"hljs-keyword\">if</span> (timerout !== <span class=\"hljs-number\">0</span>) &#123;<br>    <span class=\"hljs-keyword\">return</span><br>  &#125;<br>  timerout = <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> &#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;节流&quot;</span>);<br>    timerout = <span class=\"hljs-number\">0</span><br>  &#125;, <span class=\"hljs-number\">2000</span>)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n","site":{"data":{}},"wordcount":872,"excerpt":"","more":"<h1 id=\"防抖-（多次触发-只执行最后一次）\"><a href=\"#防抖-（多次触发-只执行最后一次）\" class=\"headerlink\" title=\"防抖 （多次触发 只执行最后一次）\"></a>防抖 （多次触发 只执行最后一次）</h1><h2 id=\"逻辑：-高频率触发的事件-在指定的单位时间内，只响应最后一次，如果在指定的时间内再次触发，则重新计算时间\"><a href=\"#逻辑：-高频率触发的事件-在指定的单位时间内，只响应最后一次，如果在指定的时间内再次触发，则重新计算时间\" class=\"headerlink\" title=\"逻辑： 高频率触发的事件,在指定的单位时间内，只响应最后一次，如果在指定的时间内再次触发，则重新计算时间\"></a>逻辑： 高频率触发的事件,在指定的单位时间内，只响应最后一次，如果在指定的时间内再次触发，则重新计算时间</h2><h2 id=\"防抖类似于英雄联盟回城6秒，如果回城中被打断，再次回城需要再等6秒-如：搜索框搜索输入\"><a href=\"#防抖类似于英雄联盟回城6秒，如果回城中被打断，再次回城需要再等6秒-如：搜索框搜索输入\" class=\"headerlink\" title=\"防抖类似于英雄联盟回城6秒，如果回城中被打断，再次回城需要再等6秒 (如：搜索框搜索输入)\"></a>防抖类似于英雄联盟回城6秒，如果回城中被打断，再次回城需要再等6秒 (如：搜索框搜索输入)</h2><h3 id=\"style-部分代码\"><a href=\"#style-部分代码\" class=\"headerlink\" title=\"style 部分代码\"></a>style 部分代码</h3>  <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-tag\">div</span> &#123;<br>  <span class=\"hljs-attribute\">width</span>:<span class=\"hljs-number\">200px</span>;<br>  <span class=\"hljs-attribute\">height</span>:<span class=\"hljs-number\">200px</span>;<br>  <span class=\"hljs-attribute\">background-color</span>:skyblue;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n<h3 id=\"div-部分代码\"><a href=\"#div-部分代码\" class=\"headerlink\" title=\"div 部分代码\"></a>div 部分代码</h3> <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span>&gt;</span><br> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span> <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"scrip-t部分代码\"><a href=\"#scrip-t部分代码\" class=\"headerlink\" title=\"scrip t部分代码\"></a>scrip t部分代码</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//获取元素</span><br><span class=\"hljs-keyword\">let</span> input = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementsByTagName</span>(<span class=\"hljs-string\">&#x27;input&#x27;</span>)[<span class=\"hljs-number\">0</span>]<br><span class=\"hljs-comment\">//防抖</span><br><span class=\"hljs-keyword\">let</span> timerId = <span class=\"hljs-literal\">null</span><br>input.<span class=\"hljs-property\">onkeyup</span> =<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br><br>  <span class=\"hljs-keyword\">if</span> (timerId !== <span class=\"hljs-literal\">null</span>) &#123;<br>    <span class=\"hljs-built_in\">clearTimeout</span>(timerId)<br>  &#125;<br>  timerId = <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> &#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;防抖&quot;</span>);<br>  &#125;, <span class=\"hljs-number\">2000</span>)<br>&#125;<br></code></pre></td></tr></table></figure>\n<h1 id=\"2-节流-（规定时间内-只触发一次）\"><a href=\"#2-节流-（规定时间内-只触发一次）\" class=\"headerlink\" title=\"2.节流 （规定时间内 只触发一次）\"></a>2.节流 （规定时间内 只触发一次）</h1><h2 id=\"逻辑：-高频率触发的事件-在指定的单位时间内，只响应第一次\"><a href=\"#逻辑：-高频率触发的事件-在指定的单位时间内，只响应第一次\" class=\"headerlink\" title=\"逻辑： 高频率触发的事件,在指定的单位时间内，只响应第一次\"></a>逻辑： 高频率触发的事件,在指定的单位时间内，只响应第一次</h2><h2 id=\"节流类似于英雄联盟里的英雄平A-一定是内点击多次只进行攻击一次-如：搜索框搜索输入\"><a href=\"#节流类似于英雄联盟里的英雄平A-一定是内点击多次只进行攻击一次-如：搜索框搜索输入\" class=\"headerlink\" title=\"节流类似于英雄联盟里的英雄平A   一定是内点击多次只进行攻击一次 (如：搜索框搜索输入)\"></a>节流类似于英雄联盟里的英雄平A   一定是内点击多次只进行攻击一次 (如：搜索框搜索输入)</h2><h3 id=\"script-部分代码\"><a href=\"#script-部分代码\" class=\"headerlink\" title=\"script 部分代码\"></a>script 部分代码</h3> <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//获取元素</span><br><span class=\"hljs-keyword\">let</span> div = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementsByTagName</span>(<span class=\"hljs-string\">&#x27;div&#x27;</span>)[<span class=\"hljs-number\">0</span>]<br><span class=\"hljs-comment\">//节流</span><br><span class=\"hljs-keyword\">let</span> timerout = <span class=\"hljs-number\">0</span><br>div.<span class=\"hljs-property\">onmousemove</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>  <span class=\"hljs-keyword\">if</span> (timerout !== <span class=\"hljs-number\">0</span>) &#123;<br>    <span class=\"hljs-keyword\">return</span><br>  &#125;<br>  timerout = <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> &#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;节流&quot;</span>);<br>    timerout = <span class=\"hljs-number\">0</span><br>  &#125;, <span class=\"hljs-number\">2000</span>)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n"},{"title":"fliter+indexOf 数组去重","index_img":"/img/fluid03.png","date":"2023-02-16T16:00:00.000Z","_content":"# 一.去掉重复的留下相同的，返回一个新的数组。\n## 逻辑：\n### 1.filter() 过滤数组，会根据条件返回新的数组（两个数组指向同一个内存属于浅拷贝）\n### 2.indexOf() 会返回当前数字 首次 出现的索引\n\n```\n    let arr = [1, 4, 5, 8, 2, 3, 8, 2, 6, 8, ]\n   \n    let arry = arr.filter((item, i) =>\n      \n      arr.indexOf(item) === i\n    )\n    console.log(arry);\n\n    //arry[[1, 4, 5, 8, 2, 3,6]\n``` \n\n\n","source":"_posts/数组去重.md","raw":"---\ntitle: fliter+indexOf 数组去重\ntags: [telescope]\nindex_img: /img/fluid03.png\ndate: 2023-2-17\n---\n# 一.去掉重复的留下相同的，返回一个新的数组。\n## 逻辑：\n### 1.filter() 过滤数组，会根据条件返回新的数组（两个数组指向同一个内存属于浅拷贝）\n### 2.indexOf() 会返回当前数字 首次 出现的索引\n\n```\n    let arr = [1, 4, 5, 8, 2, 3, 8, 2, 6, 8, ]\n   \n    let arry = arr.filter((item, i) =>\n      \n      arr.indexOf(item) === i\n    )\n    console.log(arry);\n\n    //arry[[1, 4, 5, 8, 2, 3,6]\n``` \n\n\n","slug":"数组去重","published":1,"updated":"2023-02-18T00:14:59.252Z","_id":"cle94tbx400015osv8rjk8bxx","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"一-去掉重复的留下相同的，返回一个新的数组。\"><a href=\"#一-去掉重复的留下相同的，返回一个新的数组。\" class=\"headerlink\" title=\"一.去掉重复的留下相同的，返回一个新的数组。\"></a>一.去掉重复的留下相同的，返回一个新的数组。</h1><h2 id=\"逻辑：\"><a href=\"#逻辑：\" class=\"headerlink\" title=\"逻辑：\"></a>逻辑：</h2><h3 id=\"1-filter-过滤数组，会根据条件返回新的数组（两个数组指向同一个内存属于浅拷贝）\"><a href=\"#1-filter-过滤数组，会根据条件返回新的数组（两个数组指向同一个内存属于浅拷贝）\" class=\"headerlink\" title=\"1.filter() 过滤数组，会根据条件返回新的数组（两个数组指向同一个内存属于浅拷贝）\"></a>1.filter() 过滤数组，会根据条件返回新的数组（两个数组指向同一个内存属于浅拷贝）</h3><h3 id=\"2-indexOf-会返回当前数字-首次-出现的索引\"><a href=\"#2-indexOf-会返回当前数字-首次-出现的索引\" class=\"headerlink\" title=\"2.indexOf() 会返回当前数字 首次 出现的索引\"></a>2.indexOf() 会返回当前数字 首次 出现的索引</h3><figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\">let arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">8</span>, ]<br>   <br>let arry = arr.<span class=\"hljs-built_in\">filter</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">item, i</span>) =&gt;</span><br>  <br>  arr.<span class=\"hljs-built_in\">indexOf</span>(item) === i<br>)<br><span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(arry);<br><br><span class=\"hljs-comment\">//arry[[1, 4, 5, 8, 2, 3,6]</span><br></code></pre></td></tr></table></figure>\n\n\n","site":{"data":{}},"wordcount":226,"excerpt":"","more":"<h1 id=\"一-去掉重复的留下相同的，返回一个新的数组。\"><a href=\"#一-去掉重复的留下相同的，返回一个新的数组。\" class=\"headerlink\" title=\"一.去掉重复的留下相同的，返回一个新的数组。\"></a>一.去掉重复的留下相同的，返回一个新的数组。</h1><h2 id=\"逻辑：\"><a href=\"#逻辑：\" class=\"headerlink\" title=\"逻辑：\"></a>逻辑：</h2><h3 id=\"1-filter-过滤数组，会根据条件返回新的数组（两个数组指向同一个内存属于浅拷贝）\"><a href=\"#1-filter-过滤数组，会根据条件返回新的数组（两个数组指向同一个内存属于浅拷贝）\" class=\"headerlink\" title=\"1.filter() 过滤数组，会根据条件返回新的数组（两个数组指向同一个内存属于浅拷贝）\"></a>1.filter() 过滤数组，会根据条件返回新的数组（两个数组指向同一个内存属于浅拷贝）</h3><h3 id=\"2-indexOf-会返回当前数字-首次-出现的索引\"><a href=\"#2-indexOf-会返回当前数字-首次-出现的索引\" class=\"headerlink\" title=\"2.indexOf() 会返回当前数字 首次 出现的索引\"></a>2.indexOf() 会返回当前数字 首次 出现的索引</h3><figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\">let arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">8</span>, ]<br>   <br>let arry = arr.<span class=\"hljs-built_in\">filter</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">item, i</span>) =&gt;</span><br>  <br>  arr.<span class=\"hljs-built_in\">indexOf</span>(item) === i<br>)<br><span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(arry);<br><br><span class=\"hljs-comment\">//arry[[1, 4, 5, 8, 2, 3,6]</span><br></code></pre></td></tr></table></figure>\n\n\n"},{"title":"promise 解决回调地狱的问题","index_img":"/img/default3.jpeg","date":"2023-02-17T16:00:00.000Z","_content":"# promise 解决回调地狱的问题\n ## 一、准备两个事件\n ```\n\n    //获取奶茶的方法\n    function getTea(fn) {\n      setTimeout(() => {\n        fn(\"喝奶茶\")\n      }, 500);\n    }\n\n    //获取火锅的方法\n    function getHotpot(fn) {\n      setTimeout(() => {\n        fn(\"吃火锅\")\n      }, 1000);\n    }\n```\n## 二、用回调地狱的方法按自己想要的顺序获取事件\n### 我们可以看出 因为\"吃火锅\"定时器事件比 \"喝奶茶\"定时器事件要长，\n### 所以\"吃火锅\"函数要将\"喝奶茶\"函数包裹在里面，如果继续增加就要层层嵌套形成了回调地狱，不方便维护。\n\n```\n    //调用获取火锅的方法\n\n    getHotpot(((data) => {\n      console.log(data);\n\n      //调用获取奶茶的方法\n      getTea(((data) => {\n        console.log(data);\n      }))\n    }))  \n ```\n ## 三、用promise的方法按自己想要的顺序获取事件\n```\n   ###先new一个 \"喝奶茶\" 的Promise，\n    function getTea() {\n      return new Promise(function (resolve) {\n        setTimeout(() => {\n          resolve(\"喝奶茶\")\n        }, 500)\n      })\n\n    }\n```\n  ### 再new一个 \"吃火锅\" 的Promise，\n```\n    function getHotpot() {\n      return new Promise(function (resolve) {\n        setTimeout(() => {\n          resolve(\"吃火锅\")\n        }, 1000);\n      })\n    }\n```\n  ### 1.用 .then 的方法获取数据--链式操作\n```\n       getHotpot().then(function (data) {\n         console.log(data); //这是吃火锅的数据\n\n         return getTea()\n       }).then(function (date) {\n         console.log(date); //这是喝奶茶的数据\n    \n       }) */\n```\n### 2.用async 函数调用 更精简，看起来像是同步的。\n```\n    async function getData() {\n\n      //直接获取 resolve 传过来的数据\n      let hotPot = await getHotpot(); //吃火锅\n      console.log(hotPot);\n\n      let Tea = await getTea(); //喝奶茶\n      console.log(Tea);\n    }\n\n    //调用getData函数\n    getData()\n```\n\n","source":"_posts/回调地狱与promise.md","raw":"---\ntitle: promise 解决回调地狱的问题\ntags: [telescope]\nindex_img: /img/default3.jpeg\ndate: 2023-2-18\n---\n# promise 解决回调地狱的问题\n ## 一、准备两个事件\n ```\n\n    //获取奶茶的方法\n    function getTea(fn) {\n      setTimeout(() => {\n        fn(\"喝奶茶\")\n      }, 500);\n    }\n\n    //获取火锅的方法\n    function getHotpot(fn) {\n      setTimeout(() => {\n        fn(\"吃火锅\")\n      }, 1000);\n    }\n```\n## 二、用回调地狱的方法按自己想要的顺序获取事件\n### 我们可以看出 因为\"吃火锅\"定时器事件比 \"喝奶茶\"定时器事件要长，\n### 所以\"吃火锅\"函数要将\"喝奶茶\"函数包裹在里面，如果继续增加就要层层嵌套形成了回调地狱，不方便维护。\n\n```\n    //调用获取火锅的方法\n\n    getHotpot(((data) => {\n      console.log(data);\n\n      //调用获取奶茶的方法\n      getTea(((data) => {\n        console.log(data);\n      }))\n    }))  \n ```\n ## 三、用promise的方法按自己想要的顺序获取事件\n```\n   ###先new一个 \"喝奶茶\" 的Promise，\n    function getTea() {\n      return new Promise(function (resolve) {\n        setTimeout(() => {\n          resolve(\"喝奶茶\")\n        }, 500)\n      })\n\n    }\n```\n  ### 再new一个 \"吃火锅\" 的Promise，\n```\n    function getHotpot() {\n      return new Promise(function (resolve) {\n        setTimeout(() => {\n          resolve(\"吃火锅\")\n        }, 1000);\n      })\n    }\n```\n  ### 1.用 .then 的方法获取数据--链式操作\n```\n       getHotpot().then(function (data) {\n         console.log(data); //这是吃火锅的数据\n\n         return getTea()\n       }).then(function (date) {\n         console.log(date); //这是喝奶茶的数据\n    \n       }) */\n```\n### 2.用async 函数调用 更精简，看起来像是同步的。\n```\n    async function getData() {\n\n      //直接获取 resolve 传过来的数据\n      let hotPot = await getHotpot(); //吃火锅\n      console.log(hotPot);\n\n      let Tea = await getTea(); //喝奶茶\n      console.log(Tea);\n    }\n\n    //调用getData函数\n    getData()\n```\n\n","slug":"回调地狱与promise","published":1,"updated":"2023-02-18T00:24:13.050Z","_id":"cle97fd7z00035osv6wtqdazu","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"promise-解决回调地狱的问题\"><a href=\"#promise-解决回调地狱的问题\" class=\"headerlink\" title=\"promise 解决回调地狱的问题\"></a>promise 解决回调地狱的问题</h1><h2 id=\"一、准备两个事件\"><a href=\"#一、准备两个事件\" class=\"headerlink\" title=\"一、准备两个事件\"></a>一、准备两个事件</h2> <figure class=\"highlight zephir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs zephir\"><br><span class=\"hljs-comment\">//获取奶茶的方法</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getTea</span><span class=\"hljs-params\">(fn)</span> </span>&#123;<br>  setTimeout(() =&gt; &#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span><span class=\"hljs-params\">(<span class=\"hljs-string\">&quot;喝奶茶&quot;</span>)</span></span><br><span class=\"hljs-function\">  &#125;, 500)</span>;<br>&#125;<br><br><span class=\"hljs-comment\">//获取火锅的方法</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getHotpot</span><span class=\"hljs-params\">(fn)</span> </span>&#123;<br>  setTimeout(() =&gt; &#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span><span class=\"hljs-params\">(<span class=\"hljs-string\">&quot;吃火锅&quot;</span>)</span></span><br><span class=\"hljs-function\">  &#125;, 1000)</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h2 id=\"二、用回调地狱的方法按自己想要的顺序获取事件\"><a href=\"#二、用回调地狱的方法按自己想要的顺序获取事件\" class=\"headerlink\" title=\"二、用回调地狱的方法按自己想要的顺序获取事件\"></a>二、用回调地狱的方法按自己想要的顺序获取事件</h2><h3 id=\"我们可以看出-因为”吃火锅”定时器事件比-“喝奶茶”定时器事件要长，\"><a href=\"#我们可以看出-因为”吃火锅”定时器事件比-“喝奶茶”定时器事件要长，\" class=\"headerlink\" title=\"我们可以看出 因为”吃火锅”定时器事件比 “喝奶茶”定时器事件要长，\"></a>我们可以看出 因为”吃火锅”定时器事件比 “喝奶茶”定时器事件要长，</h3><h3 id=\"所以”吃火锅”函数要将”喝奶茶”函数包裹在里面，如果继续增加就要层层嵌套形成了回调地狱，不方便维护。\"><a href=\"#所以”吃火锅”函数要将”喝奶茶”函数包裹在里面，如果继续增加就要层层嵌套形成了回调地狱，不方便维护。\" class=\"headerlink\" title=\"所以”吃火锅”函数要将”喝奶茶”函数包裹在里面，如果继续增加就要层层嵌套形成了回调地狱，不方便维护。\"></a>所以”吃火锅”函数要将”喝奶茶”函数包裹在里面，如果继续增加就要层层嵌套形成了回调地狱，不方便维护。</h3><figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\"><span class=\"hljs-comment\">//调用获取火锅的方法</span><br><br>getHotpot(<span class=\"hljs-function\">(<span class=\"hljs-params\">(data</span>) =&gt;</span> &#123;<br>  <span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(data);<br><br>  <span class=\"hljs-comment\">//调用获取奶茶的方法</span><br>  getTea(<span class=\"hljs-function\">(<span class=\"hljs-params\">(data</span>) =&gt;</span> &#123;<br>    <span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(data);<br>  &#125;))<br>&#125;))  <br></code></pre></td></tr></table></figure>\n<h2 id=\"三、用promise的方法按自己想要的顺序获取事件\"><a href=\"#三、用promise的方法按自己想要的顺序获取事件\" class=\"headerlink\" title=\"三、用promise的方法按自己想要的顺序获取事件\"></a>三、用promise的方法按自己想要的顺序获取事件</h2><figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">###先<span class=\"hljs-keyword\">new</span>一个 <span class=\"hljs-string\">&quot;喝奶茶&quot;</span> 的Promise，<br> <span class=\"hljs-keyword\">function</span> get<span class=\"hljs-constructor\">Tea()</span> &#123;<br>   return <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">Promise(<span class=\"hljs-params\">function</span> (<span class=\"hljs-params\">resolve</span>)</span> &#123;<br>     set<span class=\"hljs-constructor\">Timeout(()</span> =&gt; &#123;<br>       resolve(<span class=\"hljs-string\">&quot;喝奶茶&quot;</span>)<br>     &#125;, <span class=\"hljs-number\">500</span>)<br>   &#125;)<br><br> &#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"再new一个-“吃火锅”-的Promise，\"><a href=\"#再new一个-“吃火锅”-的Promise，\" class=\"headerlink\" title=\"再new一个 “吃火锅” 的Promise，\"></a>再new一个 “吃火锅” 的Promise，</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">getHotpot</span>(<span class=\"hljs-params\"></span>) &#123;<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">resolve</span>) &#123;<br>    <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> &#123;<br>      <span class=\"hljs-title function_\">resolve</span>(<span class=\"hljs-string\">&quot;吃火锅&quot;</span>)<br>    &#125;, <span class=\"hljs-number\">1000</span>);<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"1-用-then-的方法获取数据–链式操作\"><a href=\"#1-用-then-的方法获取数据–链式操作\" class=\"headerlink\" title=\"1.用 .then 的方法获取数据–链式操作\"></a>1.用 .then 的方法获取数据–链式操作</h3><figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\">getHotpot().then(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) &#123;<br>  <span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(data); <span class=\"hljs-comment\">//这是吃火锅的数据</span><br><br>  <span class=\"hljs-keyword\">return</span> getTea()<br>&#125;).then(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">date</span>) &#123;<br>  <span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(<span class=\"hljs-built_in\">date</span>); <span class=\"hljs-comment\">//这是喝奶茶的数据</span><br>    <br>&#125;) */<br></code></pre></td></tr></table></figure>\n<h3 id=\"2-用async-函数调用-更精简，看起来像是同步的。\"><a href=\"#2-用async-函数调用-更精简，看起来像是同步的。\" class=\"headerlink\" title=\"2.用async 函数调用 更精简，看起来像是同步的。\"></a>2.用async 函数调用 更精简，看起来像是同步的。</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">getData</span>(<span class=\"hljs-params\"></span>) &#123;<br><br>  <span class=\"hljs-comment\">//直接获取 resolve 传过来的数据</span><br>  <span class=\"hljs-keyword\">let</span> hotPot = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">getHotpot</span>(); <span class=\"hljs-comment\">//吃火锅</span><br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(hotPot);<br><br>  <span class=\"hljs-keyword\">let</span> <span class=\"hljs-title class_\">Tea</span> = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">getTea</span>(); <span class=\"hljs-comment\">//喝奶茶</span><br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title class_\">Tea</span>);<br>&#125;<br><br><span class=\"hljs-comment\">//调用getData函数</span><br><span class=\"hljs-title function_\">getData</span>()<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"wordcount":1231,"excerpt":"","more":"<h1 id=\"promise-解决回调地狱的问题\"><a href=\"#promise-解决回调地狱的问题\" class=\"headerlink\" title=\"promise 解决回调地狱的问题\"></a>promise 解决回调地狱的问题</h1><h2 id=\"一、准备两个事件\"><a href=\"#一、准备两个事件\" class=\"headerlink\" title=\"一、准备两个事件\"></a>一、准备两个事件</h2> <figure class=\"highlight zephir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs zephir\"><br><span class=\"hljs-comment\">//获取奶茶的方法</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getTea</span><span class=\"hljs-params\">(fn)</span> </span>&#123;<br>  setTimeout(() =&gt; &#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span><span class=\"hljs-params\">(<span class=\"hljs-string\">&quot;喝奶茶&quot;</span>)</span></span><br><span class=\"hljs-function\">  &#125;, 500)</span>;<br>&#125;<br><br><span class=\"hljs-comment\">//获取火锅的方法</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getHotpot</span><span class=\"hljs-params\">(fn)</span> </span>&#123;<br>  setTimeout(() =&gt; &#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span><span class=\"hljs-params\">(<span class=\"hljs-string\">&quot;吃火锅&quot;</span>)</span></span><br><span class=\"hljs-function\">  &#125;, 1000)</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h2 id=\"二、用回调地狱的方法按自己想要的顺序获取事件\"><a href=\"#二、用回调地狱的方法按自己想要的顺序获取事件\" class=\"headerlink\" title=\"二、用回调地狱的方法按自己想要的顺序获取事件\"></a>二、用回调地狱的方法按自己想要的顺序获取事件</h2><h3 id=\"我们可以看出-因为”吃火锅”定时器事件比-“喝奶茶”定时器事件要长，\"><a href=\"#我们可以看出-因为”吃火锅”定时器事件比-“喝奶茶”定时器事件要长，\" class=\"headerlink\" title=\"我们可以看出 因为”吃火锅”定时器事件比 “喝奶茶”定时器事件要长，\"></a>我们可以看出 因为”吃火锅”定时器事件比 “喝奶茶”定时器事件要长，</h3><h3 id=\"所以”吃火锅”函数要将”喝奶茶”函数包裹在里面，如果继续增加就要层层嵌套形成了回调地狱，不方便维护。\"><a href=\"#所以”吃火锅”函数要将”喝奶茶”函数包裹在里面，如果继续增加就要层层嵌套形成了回调地狱，不方便维护。\" class=\"headerlink\" title=\"所以”吃火锅”函数要将”喝奶茶”函数包裹在里面，如果继续增加就要层层嵌套形成了回调地狱，不方便维护。\"></a>所以”吃火锅”函数要将”喝奶茶”函数包裹在里面，如果继续增加就要层层嵌套形成了回调地狱，不方便维护。</h3><figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\"><span class=\"hljs-comment\">//调用获取火锅的方法</span><br><br>getHotpot(<span class=\"hljs-function\">(<span class=\"hljs-params\">(data</span>) =&gt;</span> &#123;<br>  <span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(data);<br><br>  <span class=\"hljs-comment\">//调用获取奶茶的方法</span><br>  getTea(<span class=\"hljs-function\">(<span class=\"hljs-params\">(data</span>) =&gt;</span> &#123;<br>    <span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(data);<br>  &#125;))<br>&#125;))  <br></code></pre></td></tr></table></figure>\n<h2 id=\"三、用promise的方法按自己想要的顺序获取事件\"><a href=\"#三、用promise的方法按自己想要的顺序获取事件\" class=\"headerlink\" title=\"三、用promise的方法按自己想要的顺序获取事件\"></a>三、用promise的方法按自己想要的顺序获取事件</h2><figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">###先<span class=\"hljs-keyword\">new</span>一个 <span class=\"hljs-string\">&quot;喝奶茶&quot;</span> 的Promise，<br> <span class=\"hljs-keyword\">function</span> get<span class=\"hljs-constructor\">Tea()</span> &#123;<br>   return <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">Promise(<span class=\"hljs-params\">function</span> (<span class=\"hljs-params\">resolve</span>)</span> &#123;<br>     set<span class=\"hljs-constructor\">Timeout(()</span> =&gt; &#123;<br>       resolve(<span class=\"hljs-string\">&quot;喝奶茶&quot;</span>)<br>     &#125;, <span class=\"hljs-number\">500</span>)<br>   &#125;)<br><br> &#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"再new一个-“吃火锅”-的Promise，\"><a href=\"#再new一个-“吃火锅”-的Promise，\" class=\"headerlink\" title=\"再new一个 “吃火锅” 的Promise，\"></a>再new一个 “吃火锅” 的Promise，</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">getHotpot</span>(<span class=\"hljs-params\"></span>) &#123;<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">resolve</span>) &#123;<br>    <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> &#123;<br>      <span class=\"hljs-title function_\">resolve</span>(<span class=\"hljs-string\">&quot;吃火锅&quot;</span>)<br>    &#125;, <span class=\"hljs-number\">1000</span>);<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"1-用-then-的方法获取数据–链式操作\"><a href=\"#1-用-then-的方法获取数据–链式操作\" class=\"headerlink\" title=\"1.用 .then 的方法获取数据–链式操作\"></a>1.用 .then 的方法获取数据–链式操作</h3><figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\">getHotpot().then(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) &#123;<br>  <span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(data); <span class=\"hljs-comment\">//这是吃火锅的数据</span><br><br>  <span class=\"hljs-keyword\">return</span> getTea()<br>&#125;).then(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">date</span>) &#123;<br>  <span class=\"hljs-built_in\">console</span>.<span class=\"hljs-built_in\">log</span>(<span class=\"hljs-built_in\">date</span>); <span class=\"hljs-comment\">//这是喝奶茶的数据</span><br>    <br>&#125;) */<br></code></pre></td></tr></table></figure>\n<h3 id=\"2-用async-函数调用-更精简，看起来像是同步的。\"><a href=\"#2-用async-函数调用-更精简，看起来像是同步的。\" class=\"headerlink\" title=\"2.用async 函数调用 更精简，看起来像是同步的。\"></a>2.用async 函数调用 更精简，看起来像是同步的。</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">getData</span>(<span class=\"hljs-params\"></span>) &#123;<br><br>  <span class=\"hljs-comment\">//直接获取 resolve 传过来的数据</span><br>  <span class=\"hljs-keyword\">let</span> hotPot = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">getHotpot</span>(); <span class=\"hljs-comment\">//吃火锅</span><br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(hotPot);<br><br>  <span class=\"hljs-keyword\">let</span> <span class=\"hljs-title class_\">Tea</span> = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">getTea</span>(); <span class=\"hljs-comment\">//喝奶茶</span><br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title class_\">Tea</span>);<br>&#125;<br><br><span class=\"hljs-comment\">//调用getData函数</span><br><span class=\"hljs-title function_\">getData</span>()<br></code></pre></td></tr></table></figure>\n\n"},{"title":"电影票选座","index_img":"/img/dy.jpg","date":"2022-12-09T16:00:00.000Z","_content":"# 电影票选座案例\n\n### css 代码\n```\n    * {\n      margin: 0;\n      padding: 0;\n      list-style: none;\n    }\n\n    h1 {\n      display: flex;\n      justify-content: center;\n      padding-top: 20px;\n\n    }\n\n    li {\n      background-color: #ccc;\n      border: 1px solid #888;\n      cursor: pointer;\n    }\n\n    ul {\n      margin: 10px auto;\n      border: 1px solid #ccc;\n      width: 550px;\n      height: 390px;\n      display: grid;\n      grid-template-columns: 80px 80px 80px 80px 80px 80px;\n      grid-template-rows: 40px 40px 40px 40px 40px 40px;\n      grid-gap: 10px 10px;\n\n    }\n\n    div {\n      margin-left: 40px;\n      text-align: center;\n      line-height: 80px;\n      width: 280px;\n      height: 80px;\n      border: 1px solid #ccc;\n    }\n\n    .click {\n      font-size: 10px;\n      text-align: center;\n      line-height: 40px;\n      font-family: '仿宋';\n      font-weight: bold;\n      color: #333;\n      background-color: orange;\n      border: 1px solid red;\n    }\n``` \n### html 代码\n```\n  <h1>电影票选座</h1>\n  <ul>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <p style=\"clear:both\"></p>\n    <div>屏幕中央</div>\n  </ul>\n```\n\n## 逻辑：没有cilck类的时候，进行添加，同时文本进行赋值；反之清空click类和文本值\n### javascript 代码\n```\n    let lis = document.getElementsByTagName('li');\n    for (let i = 0; i < lis.length; i++) {\n      lis[i].onclick = function () {\n\n        //获取文本节点\n        let res = this.getAttribute('class');\n        if (!res) {\n\n          //如果不存在 class 就赋予click的样式\n          this.setAttribute('class', 'click');\n          this.innerText = '座位已选';\n        } else {\n          \n          //如果存在 class 就设置为空\n          this.setAttribute('class', '');\n          this.innerText = '';\n        }\n\n      }\n    }\n```\n","source":"_posts/电影票选座案例.md","raw":"---\ntitle: 电影票选座\ntags: [telescope]\nindex_img: /img/dy.jpg\ndate: 2022-12-10\n---\n# 电影票选座案例\n\n### css 代码\n```\n    * {\n      margin: 0;\n      padding: 0;\n      list-style: none;\n    }\n\n    h1 {\n      display: flex;\n      justify-content: center;\n      padding-top: 20px;\n\n    }\n\n    li {\n      background-color: #ccc;\n      border: 1px solid #888;\n      cursor: pointer;\n    }\n\n    ul {\n      margin: 10px auto;\n      border: 1px solid #ccc;\n      width: 550px;\n      height: 390px;\n      display: grid;\n      grid-template-columns: 80px 80px 80px 80px 80px 80px;\n      grid-template-rows: 40px 40px 40px 40px 40px 40px;\n      grid-gap: 10px 10px;\n\n    }\n\n    div {\n      margin-left: 40px;\n      text-align: center;\n      line-height: 80px;\n      width: 280px;\n      height: 80px;\n      border: 1px solid #ccc;\n    }\n\n    .click {\n      font-size: 10px;\n      text-align: center;\n      line-height: 40px;\n      font-family: '仿宋';\n      font-weight: bold;\n      color: #333;\n      background-color: orange;\n      border: 1px solid red;\n    }\n``` \n### html 代码\n```\n  <h1>电影票选座</h1>\n  <ul>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <p style=\"clear:both\"></p>\n    <div>屏幕中央</div>\n  </ul>\n```\n\n## 逻辑：没有cilck类的时候，进行添加，同时文本进行赋值；反之清空click类和文本值\n### javascript 代码\n```\n    let lis = document.getElementsByTagName('li');\n    for (let i = 0; i < lis.length; i++) {\n      lis[i].onclick = function () {\n\n        //获取文本节点\n        let res = this.getAttribute('class');\n        if (!res) {\n\n          //如果不存在 class 就赋予click的样式\n          this.setAttribute('class', 'click');\n          this.innerText = '座位已选';\n        } else {\n          \n          //如果存在 class 就设置为空\n          this.setAttribute('class', '');\n          this.innerText = '';\n        }\n\n      }\n    }\n```\n","slug":"电影票选座案例","published":1,"updated":"2023-02-18T03:11:07.201Z","_id":"cle9c9s1f0000fcsvd1cv82zq","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"电影票选座案例\"><a href=\"#电影票选座案例\" class=\"headerlink\" title=\"电影票选座案例\"></a>电影票选座案例</h1><h3 id=\"css-代码\"><a href=\"#css-代码\" class=\"headerlink\" title=\"css 代码\"></a>css 代码</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\">* &#123;<br>  <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">0</span>;<br>  <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">0</span>;<br>  <span class=\"hljs-attribute\">list-style</span>: none;<br>&#125;<br><br><span class=\"hljs-selector-tag\">h1</span> &#123;<br>  <span class=\"hljs-attribute\">display</span>: flex;<br>  <span class=\"hljs-attribute\">justify-content</span>: center;<br>  <span class=\"hljs-attribute\">padding-top</span>: <span class=\"hljs-number\">20px</span>;<br><br>&#125;<br><br><span class=\"hljs-selector-tag\">li</span> &#123;<br>  <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#ccc</span>;<br>  <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">1px</span> solid <span class=\"hljs-number\">#888</span>;<br>  <span class=\"hljs-attribute\">cursor</span>: pointer;<br>&#125;<br><br><span class=\"hljs-selector-tag\">ul</span> &#123;<br>  <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">10px</span> auto;<br>  <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">1px</span> solid <span class=\"hljs-number\">#ccc</span>;<br>  <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">550px</span>;<br>  <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">390px</span>;<br>  <span class=\"hljs-attribute\">display</span>: grid;<br>  <span class=\"hljs-attribute\">grid-template-columns</span>: <span class=\"hljs-number\">80px</span> <span class=\"hljs-number\">80px</span> <span class=\"hljs-number\">80px</span> <span class=\"hljs-number\">80px</span> <span class=\"hljs-number\">80px</span> <span class=\"hljs-number\">80px</span>;<br>  <span class=\"hljs-attribute\">grid-template-rows</span>: <span class=\"hljs-number\">40px</span> <span class=\"hljs-number\">40px</span> <span class=\"hljs-number\">40px</span> <span class=\"hljs-number\">40px</span> <span class=\"hljs-number\">40px</span> <span class=\"hljs-number\">40px</span>;<br>  <span class=\"hljs-attribute\">grid-gap</span>: <span class=\"hljs-number\">10px</span> <span class=\"hljs-number\">10px</span>;<br><br>&#125;<br><br><span class=\"hljs-selector-tag\">div</span> &#123;<br>  <span class=\"hljs-attribute\">margin-left</span>: <span class=\"hljs-number\">40px</span>;<br>  <span class=\"hljs-attribute\">text-align</span>: center;<br>  <span class=\"hljs-attribute\">line-height</span>: <span class=\"hljs-number\">80px</span>;<br>  <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">280px</span>;<br>  <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">80px</span>;<br>  <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">1px</span> solid <span class=\"hljs-number\">#ccc</span>;<br>&#125;<br><br><span class=\"hljs-selector-class\">.click</span> &#123;<br>  <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">10px</span>;<br>  <span class=\"hljs-attribute\">text-align</span>: center;<br>  <span class=\"hljs-attribute\">line-height</span>: <span class=\"hljs-number\">40px</span>;<br>  <span class=\"hljs-attribute\">font-family</span>: <span class=\"hljs-string\">&#x27;仿宋&#x27;</span>;<br>  <span class=\"hljs-attribute\">font-weight</span>: bold;<br>  <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#333</span>;<br>  <span class=\"hljs-attribute\">background-color</span>: orange;<br>  <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">1px</span> solid red;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"html-代码\"><a href=\"#html-代码\" class=\"headerlink\" title=\"html 代码\"></a>html 代码</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>电影票选座<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">&quot;clear:both&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>屏幕中央<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"逻辑：没有cilck类的时候，进行添加，同时文本进行赋值；反之清空click类和文本值\"><a href=\"#逻辑：没有cilck类的时候，进行添加，同时文本进行赋值；反之清空click类和文本值\" class=\"headerlink\" title=\"逻辑：没有cilck类的时候，进行添加，同时文本进行赋值；反之清空click类和文本值\"></a>逻辑：没有cilck类的时候，进行添加，同时文本进行赋值；反之清空click类和文本值</h2><h3 id=\"javascript-代码\"><a href=\"#javascript-代码\" class=\"headerlink\" title=\"javascript 代码\"></a>javascript 代码</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">let</span> lis = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementsByTagName</span>(<span class=\"hljs-string\">&#x27;li&#x27;</span>);<br><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; lis.<span class=\"hljs-property\">length</span>; i++) &#123;<br>  lis[i].<span class=\"hljs-property\">onclick</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br><br>    <span class=\"hljs-comment\">//获取文本节点</span><br>    <span class=\"hljs-keyword\">let</span> res = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">getAttribute</span>(<span class=\"hljs-string\">&#x27;class&#x27;</span>);<br>    <span class=\"hljs-keyword\">if</span> (!res) &#123;<br><br>      <span class=\"hljs-comment\">//如果不存在 class 就赋予click的样式</span><br>      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">setAttribute</span>(<span class=\"hljs-string\">&#x27;class&#x27;</span>, <span class=\"hljs-string\">&#x27;click&#x27;</span>);<br>      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">innerText</span> = <span class=\"hljs-string\">&#x27;座位已选&#x27;</span>;<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>      <br>      <span class=\"hljs-comment\">//如果存在 class 就设置为空</span><br>      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">setAttribute</span>(<span class=\"hljs-string\">&#x27;class&#x27;</span>, <span class=\"hljs-string\">&#x27;&#x27;</span>);<br>      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">innerText</span> = <span class=\"hljs-string\">&#x27;&#x27;</span>;<br>    &#125;<br><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n","site":{"data":{}},"wordcount":2230,"excerpt":"","more":"<h1 id=\"电影票选座案例\"><a href=\"#电影票选座案例\" class=\"headerlink\" title=\"电影票选座案例\"></a>电影票选座案例</h1><h3 id=\"css-代码\"><a href=\"#css-代码\" class=\"headerlink\" title=\"css 代码\"></a>css 代码</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\">* &#123;<br>  <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">0</span>;<br>  <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">0</span>;<br>  <span class=\"hljs-attribute\">list-style</span>: none;<br>&#125;<br><br><span class=\"hljs-selector-tag\">h1</span> &#123;<br>  <span class=\"hljs-attribute\">display</span>: flex;<br>  <span class=\"hljs-attribute\">justify-content</span>: center;<br>  <span class=\"hljs-attribute\">padding-top</span>: <span class=\"hljs-number\">20px</span>;<br><br>&#125;<br><br><span class=\"hljs-selector-tag\">li</span> &#123;<br>  <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#ccc</span>;<br>  <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">1px</span> solid <span class=\"hljs-number\">#888</span>;<br>  <span class=\"hljs-attribute\">cursor</span>: pointer;<br>&#125;<br><br><span class=\"hljs-selector-tag\">ul</span> &#123;<br>  <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">10px</span> auto;<br>  <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">1px</span> solid <span class=\"hljs-number\">#ccc</span>;<br>  <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">550px</span>;<br>  <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">390px</span>;<br>  <span class=\"hljs-attribute\">display</span>: grid;<br>  <span class=\"hljs-attribute\">grid-template-columns</span>: <span class=\"hljs-number\">80px</span> <span class=\"hljs-number\">80px</span> <span class=\"hljs-number\">80px</span> <span class=\"hljs-number\">80px</span> <span class=\"hljs-number\">80px</span> <span class=\"hljs-number\">80px</span>;<br>  <span class=\"hljs-attribute\">grid-template-rows</span>: <span class=\"hljs-number\">40px</span> <span class=\"hljs-number\">40px</span> <span class=\"hljs-number\">40px</span> <span class=\"hljs-number\">40px</span> <span class=\"hljs-number\">40px</span> <span class=\"hljs-number\">40px</span>;<br>  <span class=\"hljs-attribute\">grid-gap</span>: <span class=\"hljs-number\">10px</span> <span class=\"hljs-number\">10px</span>;<br><br>&#125;<br><br><span class=\"hljs-selector-tag\">div</span> &#123;<br>  <span class=\"hljs-attribute\">margin-left</span>: <span class=\"hljs-number\">40px</span>;<br>  <span class=\"hljs-attribute\">text-align</span>: center;<br>  <span class=\"hljs-attribute\">line-height</span>: <span class=\"hljs-number\">80px</span>;<br>  <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">280px</span>;<br>  <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">80px</span>;<br>  <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">1px</span> solid <span class=\"hljs-number\">#ccc</span>;<br>&#125;<br><br><span class=\"hljs-selector-class\">.click</span> &#123;<br>  <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">10px</span>;<br>  <span class=\"hljs-attribute\">text-align</span>: center;<br>  <span class=\"hljs-attribute\">line-height</span>: <span class=\"hljs-number\">40px</span>;<br>  <span class=\"hljs-attribute\">font-family</span>: <span class=\"hljs-string\">&#x27;仿宋&#x27;</span>;<br>  <span class=\"hljs-attribute\">font-weight</span>: bold;<br>  <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#333</span>;<br>  <span class=\"hljs-attribute\">background-color</span>: orange;<br>  <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">1px</span> solid red;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"html-代码\"><a href=\"#html-代码\" class=\"headerlink\" title=\"html 代码\"></a>html 代码</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>电影票选座<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">&quot;clear:both&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>屏幕中央<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"逻辑：没有cilck类的时候，进行添加，同时文本进行赋值；反之清空click类和文本值\"><a href=\"#逻辑：没有cilck类的时候，进行添加，同时文本进行赋值；反之清空click类和文本值\" class=\"headerlink\" title=\"逻辑：没有cilck类的时候，进行添加，同时文本进行赋值；反之清空click类和文本值\"></a>逻辑：没有cilck类的时候，进行添加，同时文本进行赋值；反之清空click类和文本值</h2><h3 id=\"javascript-代码\"><a href=\"#javascript-代码\" class=\"headerlink\" title=\"javascript 代码\"></a>javascript 代码</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">let</span> lis = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementsByTagName</span>(<span class=\"hljs-string\">&#x27;li&#x27;</span>);<br><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; lis.<span class=\"hljs-property\">length</span>; i++) &#123;<br>  lis[i].<span class=\"hljs-property\">onclick</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br><br>    <span class=\"hljs-comment\">//获取文本节点</span><br>    <span class=\"hljs-keyword\">let</span> res = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">getAttribute</span>(<span class=\"hljs-string\">&#x27;class&#x27;</span>);<br>    <span class=\"hljs-keyword\">if</span> (!res) &#123;<br><br>      <span class=\"hljs-comment\">//如果不存在 class 就赋予click的样式</span><br>      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">setAttribute</span>(<span class=\"hljs-string\">&#x27;class&#x27;</span>, <span class=\"hljs-string\">&#x27;click&#x27;</span>);<br>      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">innerText</span> = <span class=\"hljs-string\">&#x27;座位已选&#x27;</span>;<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>      <br>      <span class=\"hljs-comment\">//如果存在 class 就设置为空</span><br>      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">setAttribute</span>(<span class=\"hljs-string\">&#x27;class&#x27;</span>, <span class=\"hljs-string\">&#x27;&#x27;</span>);<br>      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">innerText</span> = <span class=\"hljs-string\">&#x27;&#x27;</span>;<br>    &#125;<br><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n"},{"title":"百度搜索数据展示","index_img":"/img/dn.jpg","date":"2023-01-14T16:00:00.000Z","_content":"# 百度搜索数据展示案例\n## css 代码\n```\n    * {\n      margin: 0;\n      padding: 0;\n    }\n\n    #val {\n      width: 200px;\n      height: 22px;\n      color: #888;\n      font-size: 13px;\n      font-weight: 400;\n    }\n\n    .show {\n      width: 200px;\n      height: 200px;\n      border: 1px solid #ccc;.\n      display: none;\n      position: absolute;\n    }\n\n    .search {\n      width: 500px;\n      height: 600px;\n      position: relative;\n      margin: 100px auto;\n    }\n```\n## html 代码\n```\n  <div class=\"content\">\n    <div class=\"search\">\n      <input type=\"text\" id=\"val\" placeholder=\"请输入课程\">\n      <input type=\"submit\" value=\"搜索\" id=\"sub\">\n      <div class=\"show\" id=\"show\"></div>\n    </div>\n  </div>\n ```\n## JavaScript 代码\n\n ```\n    let arr = [\n      'web前端精英特训班 980元',\n      'HTML核心技术 299元',\n      'Vue核心技术 599元',\n      'CSS+HTNL核心技术 299元',\n      'web前端在线商城 99元',\n      'JavaScript高级技术 899元'\n    ];\n    //逻辑：1.先完成 展示区域的显示和隐藏\n    let val = document.getElementById('val');\n    let show = document.getElementById('show');\n    //给输入框绑定一个键盘弹起事件\n    val.onkeyup = function () {\n      show.style.display = 'block';\n      //this.value 和arr的每一项进行匹配 indexOf 匹配不到显示-1\n      let str = '';\n      arr.forEach((item) => {\n        let res = item.indexOf(val.value)\n        if (res != -1) {\n          str += '<p>' + item + '</p>'\n        }\n      });\n      //如果val.value 为空或者 str为false 就给用户一个提示\n      if (!val.value || !str) {\n        show.innerHTML = '<p>暂无结果</p>'\n      } else {\n        show.innerHTML = str;\n\n      };\n      //如果搜索框为空，展示页面也清空\n      if (!val.value) {\n        show.innerHTML = '';\n      };\n\n    };\n    val.onblur = function () {\n      show.style.display = 'none';\n      val.value = '';\n    };\n```","source":"_posts/百度搜索数据展示.md","raw":"---\ntitle: 百度搜索数据展示\ntags: [telescope]\nindex_img: /img/dn.jpg\ndate: 2023-01-15 \n---\n# 百度搜索数据展示案例\n## css 代码\n```\n    * {\n      margin: 0;\n      padding: 0;\n    }\n\n    #val {\n      width: 200px;\n      height: 22px;\n      color: #888;\n      font-size: 13px;\n      font-weight: 400;\n    }\n\n    .show {\n      width: 200px;\n      height: 200px;\n      border: 1px solid #ccc;.\n      display: none;\n      position: absolute;\n    }\n\n    .search {\n      width: 500px;\n      height: 600px;\n      position: relative;\n      margin: 100px auto;\n    }\n```\n## html 代码\n```\n  <div class=\"content\">\n    <div class=\"search\">\n      <input type=\"text\" id=\"val\" placeholder=\"请输入课程\">\n      <input type=\"submit\" value=\"搜索\" id=\"sub\">\n      <div class=\"show\" id=\"show\"></div>\n    </div>\n  </div>\n ```\n## JavaScript 代码\n\n ```\n    let arr = [\n      'web前端精英特训班 980元',\n      'HTML核心技术 299元',\n      'Vue核心技术 599元',\n      'CSS+HTNL核心技术 299元',\n      'web前端在线商城 99元',\n      'JavaScript高级技术 899元'\n    ];\n    //逻辑：1.先完成 展示区域的显示和隐藏\n    let val = document.getElementById('val');\n    let show = document.getElementById('show');\n    //给输入框绑定一个键盘弹起事件\n    val.onkeyup = function () {\n      show.style.display = 'block';\n      //this.value 和arr的每一项进行匹配 indexOf 匹配不到显示-1\n      let str = '';\n      arr.forEach((item) => {\n        let res = item.indexOf(val.value)\n        if (res != -1) {\n          str += '<p>' + item + '</p>'\n        }\n      });\n      //如果val.value 为空或者 str为false 就给用户一个提示\n      if (!val.value || !str) {\n        show.innerHTML = '<p>暂无结果</p>'\n      } else {\n        show.innerHTML = str;\n\n      };\n      //如果搜索框为空，展示页面也清空\n      if (!val.value) {\n        show.innerHTML = '';\n      };\n\n    };\n    val.onblur = function () {\n      show.style.display = 'none';\n      val.value = '';\n    };\n```","slug":"百度搜索数据展示","published":1,"updated":"2023-02-18T03:10:52.021Z","_id":"cle9dbj9d0002assv37j26rb7","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"百度搜索数据展示案例\"><a href=\"#百度搜索数据展示案例\" class=\"headerlink\" title=\"百度搜索数据展示案例\"></a>百度搜索数据展示案例</h1><h2 id=\"css-代码\"><a href=\"#css-代码\" class=\"headerlink\" title=\"css 代码\"></a>css 代码</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\">* &#123;<br>  <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">0</span>;<br>  <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">0</span>;<br>&#125;<br><br><span class=\"hljs-selector-id\">#val</span> &#123;<br>  <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">200px</span>;<br>  <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">22px</span>;<br>  <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#888</span>;<br>  <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">13px</span>;<br>  <span class=\"hljs-attribute\">font-weight</span>: <span class=\"hljs-number\">400</span>;<br>&#125;<br><br><span class=\"hljs-selector-class\">.show</span> &#123;<br>  <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">200px</span>;<br>  <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">200px</span>;<br>  <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">1px</span> solid <span class=\"hljs-number\">#ccc</span>;.<br>  <span class=\"hljs-attribute\">display</span>: none;<br>  <span class=\"hljs-attribute\">position</span>: absolute;<br>&#125;<br><br><span class=\"hljs-selector-class\">.search</span> &#123;<br>  <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">500px</span>;<br>  <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">600px</span>;<br>  <span class=\"hljs-attribute\">position</span>: relative;<br>  <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">100px</span> auto;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h2 id=\"html-代码\"><a href=\"#html-代码\" class=\"headerlink\" title=\"html 代码\"></a>html 代码</h2><figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\">&lt;div <span class=\"hljs-keyword\">class</span>=&quot;<span class=\"hljs-symbol\">content</span>&quot;&gt;<br>  &lt;<span class=\"hljs-symbol\">div</span> <span class=\"hljs-symbol\">class</span>=&quot;<span class=\"hljs-symbol\">search</span>&quot;&gt;<br>    &lt;<span class=\"hljs-symbol\">input</span> <span class=\"hljs-symbol\">type</span>=&quot;<span class=\"hljs-symbol\">text</span>&quot; <span class=\"hljs-symbol\">id</span>=&quot;<span class=\"hljs-symbol\">val</span>&quot; <span class=\"hljs-symbol\">placeholder</span>=&quot;请输入课程&quot;&gt;<br>    &lt;<span class=\"hljs-symbol\">input</span> <span class=\"hljs-symbol\">type</span>=&quot;<span class=\"hljs-symbol\">submit</span>&quot; <span class=\"hljs-symbol\">value</span>=&quot;搜索&quot; <span class=\"hljs-symbol\">id</span>=&quot;<span class=\"hljs-symbol\">sub</span>&quot;&gt;<br>    &lt;<span class=\"hljs-symbol\">div</span> <span class=\"hljs-symbol\">class</span>=&quot;<span class=\"hljs-symbol\">show</span>&quot; <span class=\"hljs-symbol\">id</span>=&quot;<span class=\"hljs-symbol\">show</span>&quot;&gt;&lt;/<span class=\"hljs-symbol\">div</span>&gt;<br>  &lt;/<span class=\"hljs-symbol\">div</span>&gt;<br>&lt;/<span class=\"hljs-symbol\">div</span>&gt;<br></code></pre></td></tr></table></figure>\n<h2 id=\"JavaScript-代码\"><a href=\"#JavaScript-代码\" class=\"headerlink\" title=\"JavaScript 代码\"></a>JavaScript 代码</h2> <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">let</span> arr = [<br>  <span class=\"hljs-string\">&#x27;web前端精英特训班 980元&#x27;</span>,<br>  <span class=\"hljs-string\">&#x27;HTML核心技术 299元&#x27;</span>,<br>  <span class=\"hljs-string\">&#x27;Vue核心技术 599元&#x27;</span>,<br>  <span class=\"hljs-string\">&#x27;CSS+HTNL核心技术 299元&#x27;</span>,<br>  <span class=\"hljs-string\">&#x27;web前端在线商城 99元&#x27;</span>,<br>  <span class=\"hljs-string\">&#x27;JavaScript高级技术 899元&#x27;</span><br>];<br><span class=\"hljs-comment\">//逻辑：1.先完成 展示区域的显示和隐藏</span><br><span class=\"hljs-keyword\">let</span> val = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&#x27;val&#x27;</span>);<br><span class=\"hljs-keyword\">let</span> show = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&#x27;show&#x27;</span>);<br><span class=\"hljs-comment\">//给输入框绑定一个键盘弹起事件</span><br>val.<span class=\"hljs-property\">onkeyup</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>  show.<span class=\"hljs-property\">style</span>.<span class=\"hljs-property\">display</span> = <span class=\"hljs-string\">&#x27;block&#x27;</span>;<br>  <span class=\"hljs-comment\">//this.value 和arr的每一项进行匹配 indexOf 匹配不到显示-1</span><br>  <span class=\"hljs-keyword\">let</span> str = <span class=\"hljs-string\">&#x27;&#x27;</span>;<br>  arr.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">item</span>) =&gt;</span> &#123;<br>    <span class=\"hljs-keyword\">let</span> res = item.<span class=\"hljs-title function_\">indexOf</span>(val.<span class=\"hljs-property\">value</span>)<br>    <span class=\"hljs-keyword\">if</span> (res != -<span class=\"hljs-number\">1</span>) &#123;<br>      str += <span class=\"hljs-string\">&#x27;&lt;p&gt;&#x27;</span> + item + <span class=\"hljs-string\">&#x27;&lt;/p&gt;&#x27;</span><br>    &#125;<br>  &#125;);<br>  <span class=\"hljs-comment\">//如果val.value 为空或者 str为false 就给用户一个提示</span><br>  <span class=\"hljs-keyword\">if</span> (!val.<span class=\"hljs-property\">value</span> || !str) &#123;<br>    show.<span class=\"hljs-property\">innerHTML</span> = <span class=\"hljs-string\">&#x27;&lt;p&gt;暂无结果&lt;/p&gt;&#x27;</span><br>  &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>    show.<span class=\"hljs-property\">innerHTML</span> = str;<br><br>  &#125;;<br>  <span class=\"hljs-comment\">//如果搜索框为空，展示页面也清空</span><br>  <span class=\"hljs-keyword\">if</span> (!val.<span class=\"hljs-property\">value</span>) &#123;<br>    show.<span class=\"hljs-property\">innerHTML</span> = <span class=\"hljs-string\">&#x27;&#x27;</span>;<br>  &#125;;<br><br>&#125;;<br>val.<span class=\"hljs-property\">onblur</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>  show.<span class=\"hljs-property\">style</span>.<span class=\"hljs-property\">display</span> = <span class=\"hljs-string\">&#x27;none&#x27;</span>;<br>  val.<span class=\"hljs-property\">value</span> = <span class=\"hljs-string\">&#x27;&#x27;</span>;<br>&#125;;<br></code></pre></td></tr></table></figure>","site":{"data":{}},"wordcount":1651,"excerpt":"","more":"<h1 id=\"百度搜索数据展示案例\"><a href=\"#百度搜索数据展示案例\" class=\"headerlink\" title=\"百度搜索数据展示案例\"></a>百度搜索数据展示案例</h1><h2 id=\"css-代码\"><a href=\"#css-代码\" class=\"headerlink\" title=\"css 代码\"></a>css 代码</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\">* &#123;<br>  <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">0</span>;<br>  <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">0</span>;<br>&#125;<br><br><span class=\"hljs-selector-id\">#val</span> &#123;<br>  <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">200px</span>;<br>  <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">22px</span>;<br>  <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#888</span>;<br>  <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">13px</span>;<br>  <span class=\"hljs-attribute\">font-weight</span>: <span class=\"hljs-number\">400</span>;<br>&#125;<br><br><span class=\"hljs-selector-class\">.show</span> &#123;<br>  <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">200px</span>;<br>  <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">200px</span>;<br>  <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">1px</span> solid <span class=\"hljs-number\">#ccc</span>;.<br>  <span class=\"hljs-attribute\">display</span>: none;<br>  <span class=\"hljs-attribute\">position</span>: absolute;<br>&#125;<br><br><span class=\"hljs-selector-class\">.search</span> &#123;<br>  <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">500px</span>;<br>  <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">600px</span>;<br>  <span class=\"hljs-attribute\">position</span>: relative;<br>  <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">100px</span> auto;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h2 id=\"html-代码\"><a href=\"#html-代码\" class=\"headerlink\" title=\"html 代码\"></a>html 代码</h2><figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\">&lt;div <span class=\"hljs-keyword\">class</span>=&quot;<span class=\"hljs-symbol\">content</span>&quot;&gt;<br>  &lt;<span class=\"hljs-symbol\">div</span> <span class=\"hljs-symbol\">class</span>=&quot;<span class=\"hljs-symbol\">search</span>&quot;&gt;<br>    &lt;<span class=\"hljs-symbol\">input</span> <span class=\"hljs-symbol\">type</span>=&quot;<span class=\"hljs-symbol\">text</span>&quot; <span class=\"hljs-symbol\">id</span>=&quot;<span class=\"hljs-symbol\">val</span>&quot; <span class=\"hljs-symbol\">placeholder</span>=&quot;请输入课程&quot;&gt;<br>    &lt;<span class=\"hljs-symbol\">input</span> <span class=\"hljs-symbol\">type</span>=&quot;<span class=\"hljs-symbol\">submit</span>&quot; <span class=\"hljs-symbol\">value</span>=&quot;搜索&quot; <span class=\"hljs-symbol\">id</span>=&quot;<span class=\"hljs-symbol\">sub</span>&quot;&gt;<br>    &lt;<span class=\"hljs-symbol\">div</span> <span class=\"hljs-symbol\">class</span>=&quot;<span class=\"hljs-symbol\">show</span>&quot; <span class=\"hljs-symbol\">id</span>=&quot;<span class=\"hljs-symbol\">show</span>&quot;&gt;&lt;/<span class=\"hljs-symbol\">div</span>&gt;<br>  &lt;/<span class=\"hljs-symbol\">div</span>&gt;<br>&lt;/<span class=\"hljs-symbol\">div</span>&gt;<br></code></pre></td></tr></table></figure>\n<h2 id=\"JavaScript-代码\"><a href=\"#JavaScript-代码\" class=\"headerlink\" title=\"JavaScript 代码\"></a>JavaScript 代码</h2> <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">let</span> arr = [<br>  <span class=\"hljs-string\">&#x27;web前端精英特训班 980元&#x27;</span>,<br>  <span class=\"hljs-string\">&#x27;HTML核心技术 299元&#x27;</span>,<br>  <span class=\"hljs-string\">&#x27;Vue核心技术 599元&#x27;</span>,<br>  <span class=\"hljs-string\">&#x27;CSS+HTNL核心技术 299元&#x27;</span>,<br>  <span class=\"hljs-string\">&#x27;web前端在线商城 99元&#x27;</span>,<br>  <span class=\"hljs-string\">&#x27;JavaScript高级技术 899元&#x27;</span><br>];<br><span class=\"hljs-comment\">//逻辑：1.先完成 展示区域的显示和隐藏</span><br><span class=\"hljs-keyword\">let</span> val = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&#x27;val&#x27;</span>);<br><span class=\"hljs-keyword\">let</span> show = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&#x27;show&#x27;</span>);<br><span class=\"hljs-comment\">//给输入框绑定一个键盘弹起事件</span><br>val.<span class=\"hljs-property\">onkeyup</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>  show.<span class=\"hljs-property\">style</span>.<span class=\"hljs-property\">display</span> = <span class=\"hljs-string\">&#x27;block&#x27;</span>;<br>  <span class=\"hljs-comment\">//this.value 和arr的每一项进行匹配 indexOf 匹配不到显示-1</span><br>  <span class=\"hljs-keyword\">let</span> str = <span class=\"hljs-string\">&#x27;&#x27;</span>;<br>  arr.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">item</span>) =&gt;</span> &#123;<br>    <span class=\"hljs-keyword\">let</span> res = item.<span class=\"hljs-title function_\">indexOf</span>(val.<span class=\"hljs-property\">value</span>)<br>    <span class=\"hljs-keyword\">if</span> (res != -<span class=\"hljs-number\">1</span>) &#123;<br>      str += <span class=\"hljs-string\">&#x27;&lt;p&gt;&#x27;</span> + item + <span class=\"hljs-string\">&#x27;&lt;/p&gt;&#x27;</span><br>    &#125;<br>  &#125;);<br>  <span class=\"hljs-comment\">//如果val.value 为空或者 str为false 就给用户一个提示</span><br>  <span class=\"hljs-keyword\">if</span> (!val.<span class=\"hljs-property\">value</span> || !str) &#123;<br>    show.<span class=\"hljs-property\">innerHTML</span> = <span class=\"hljs-string\">&#x27;&lt;p&gt;暂无结果&lt;/p&gt;&#x27;</span><br>  &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>    show.<span class=\"hljs-property\">innerHTML</span> = str;<br><br>  &#125;;<br>  <span class=\"hljs-comment\">//如果搜索框为空，展示页面也清空</span><br>  <span class=\"hljs-keyword\">if</span> (!val.<span class=\"hljs-property\">value</span>) &#123;<br>    show.<span class=\"hljs-property\">innerHTML</span> = <span class=\"hljs-string\">&#x27;&#x27;</span>;<br>  &#125;;<br><br>&#125;;<br>val.<span class=\"hljs-property\">onblur</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>  show.<span class=\"hljs-property\">style</span>.<span class=\"hljs-property\">display</span> = <span class=\"hljs-string\">&#x27;none&#x27;</span>;<br>  val.<span class=\"hljs-property\">value</span> = <span class=\"hljs-string\">&#x27;&#x27;</span>;<br>&#125;;<br></code></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cle92q35n000058svanrx78ki","tag_id":"cle92v5xk000158svhvs1052f","_id":"cle935z26000358sv2rw99jcm"},{"post_id":"cle94tbx400015osv8rjk8bxx","tag_id":"cle92v5xk000158svhvs1052f","_id":"cle94tbx500025osv7hsddqqb"},{"post_id":"cle97fd7z00035osv6wtqdazu","tag_id":"cle92v5xk000158svhvs1052f","_id":"cle97fd8100045osvhk458bla"},{"post_id":"cle9c9s1f0000fcsvd1cv82zq","tag_id":"cle92v5xk000158svhvs1052f","_id":"cle9c9s1h0001fcsv7rde1snn"},{"post_id":"cl79kecih0005bwsv08mz1yui","tag_id":"cle9d5muh0000assvaalk4ali","_id":"cle9d5mui0001assv2k804eld"},{"post_id":"cle9dbj9d0002assv37j26rb7","tag_id":"cle92v5xk000158svhvs1052f","_id":"cle9dbrzw0003assv1up863dd"},{"post_id":"cle073ar5000080sv02higpoz","tag_id":"cle92v5xk000158svhvs1052f","_id":"cle9dkpuo0004assvhbqhfo4w"},{"post_id":"cl7mhdy9v0001rksv5hyrhw8a","tag_id":"cle92v5xk000158svhvs1052f","_id":"cle9e4cmj0005assv4bx527tb"},{"post_id":"cl7fj93m800016csvg1md4wrm","tag_id":"cle92v5xk000158svhvs1052f","_id":"cle9eb9at0006assv3qo1d1ms"},{"post_id":"cl7jiues40000dwsveucef0by","tag_id":"cle92v5xk000158svhvs1052f","_id":"cle9ecu8u0007assv8a7o69of"},{"post_id":"cl79kecij0007bwsv582f6byt","tag_id":"cle92v5xk000158svhvs1052f","_id":"cle9eiyl10008assv7em3ggbg"},{"post_id":"cl7fihwml0002y4sv9h9c04yl","tag_id":"cle92v5xk000158svhvs1052f","_id":"cle9fhini0009assv5f7o94ku"},{"post_id":"cl79kecie0003bwsv5p9j7g3n","tag_id":"cle92v5xk000158svhvs1052f","_id":"cle9fmfuo000aassvhb00gzjx"},{"post_id":"cl7fial9i0000y4svfz85bd4k","tag_id":"cle92v5xk000158svhvs1052f","_id":"cle9gltwr000bassv3mds4ki7"}],"Tag":[{"name":"telescope","_id":"cle92v5xk000158svhvs1052f"},{"name":"Telescope","_id":"cle9d5muh0000assvaalk4ali"}]}}
>>>>>>> c9ab02b3 (WIP on master: 1a287a13 Merge remote-tracking branch 'remotes/origin/dependabot/npm_and_yarn/hexo-6.3.0')
